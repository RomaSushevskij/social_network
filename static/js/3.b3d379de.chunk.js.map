{"version":3,"sources":["components/Settings/Settings.module.scss","components/forms/ContactsForm/ContactsSettingsForm.module.scss","components/forms/ProfileUpdateForm/ProfileSettingsForm.module.scss","components/generic/TextareaSecondary/TextareaSecondary.module.scss","components/forms/ContactsForm/ContactsSettingsForm.tsx","utils/validators.ts","components/generic/TextareaSecondary/TextareaSecondary.tsx","components/forms/ProfileUpdateForm/ProfileSettingsForm.tsx","components/Settings/Settings.tsx"],"names":["module","exports","ContactsSettingsForm","memo","contacts","useSelector","state","profilePage","profile","isFetching","usersPage","dispatch","useDispatch","navigate","useNavigate","contactsTitles","Object","keys","formik","useFormik","initialValues","onSubmit","values","updateContacts","validate","errors","map","contact","prop","test","validateURL","isSubmitButtonDisabled","length","className","styleModule","settingsFormWrapper","description","settingsFormContainer","handleSubmit","Preloader","size","color","key","field","fieldTitle","toUpperCase","slice","InputTextSecondary","placeholder","getFieldProps","error","border","Button","type","name","disabled","TextareaSecondary","onChange","onChangeText","onKeyPress","onEnter","spanClassName","customStyle","title","restProps","finalSpanClassName","s","finalInputClassName","errorTextarea","superTextarea","textAreaWrapper","e","currentTarget","value","ProfileSettingsForm","fullName","userId","aboutMe","lookingForAJob","lookingForAJobDescription","profileModel","updateProfile","checkbox","Checkbox","checked","optionalField","Settings","props","useEffect","settingsWrapper","links","to","l","isActive","activeLink","path","element"],"mappings":"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","file":"static/js/3.b3d379de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"Settings_settingsWrapper__GJPbR\",\"title\":\"Settings_title__vK7M4\",\"links\":\"Settings_links__3Gku6\",\"activeLink\":\"Settings_activeLink__ZMxUH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsFormWrapper\":\"ContactsSettingsForm_settingsFormWrapper__VR9Zs\",\"description\":\"ContactsSettingsForm_description__2WIB6\",\"settingsFormContainer\":\"ContactsSettingsForm_settingsFormContainer__1XJoP\",\"field\":\"ContactsSettingsForm_field__3DPFj\",\"fieldTitle\":\"ContactsSettingsForm_fieldTitle__2JcaZ\",\"border\":\"ContactsSettingsForm_border__2RVk_\",\"checkbox\":\"ContactsSettingsForm_checkbox__V5mlm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsFormWrapper\":\"ProfileSettingsForm_settingsFormWrapper__30w6l\",\"description\":\"ProfileSettingsForm_description__2r0zh\",\"settingsFormContainer\":\"ProfileSettingsForm_settingsFormContainer__2BGIX\",\"field\":\"ProfileSettingsForm_field__3d9iH\",\"fieldTitle\":\"ProfileSettingsForm_fieldTitle__1WK5A\",\"border\":\"ProfileSettingsForm_border__2xby7\",\"checkbox\":\"ProfileSettingsForm_checkbox__3Rx4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textAreaWrapper\":\"TextareaSecondary_textAreaWrapper__1dM9_\",\"superTextarea\":\"TextareaSecondary_superTextarea__12Pnq\",\"errorTextarea\":\"TextareaSecondary_errorTextarea__12iES\",\"error\":\"TextareaSecondary_error__1txAg\"};","import React, {memo} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {useFormik} from 'formik';\r\nimport {ContactsType, updateContacts} from '../../../redux/redusers/profileReducer/profileReducer';\r\nimport styleModule from './ContactsSettingsForm.module.scss';\r\nimport {Preloader} from '../../generic/Preloader/Preloader';\r\nimport InputTextSecondary from '../../generic/InputTextSecondary/InputTextSecondary';\r\nimport {Button} from '../../generic/Button/Button';\r\nimport {validateURL} from '../../../utils/validators';\r\n\r\nexport const ContactsSettingsForm = memo(() => {\r\n    const contacts = useSelector((state: AppStateType) => state.profilePage.profile?.contacts)\r\n    const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const contactsTitles = contacts && Object.keys(contacts);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            ...contacts\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(updateContacts(values, navigate))\r\n        },\r\n        validate: values => {\r\n            const errors: Partial<ContactsType> = {};\r\n            Object.keys(values).map(contact => validateURL(values, errors, contact))\r\n            return errors;\r\n        }\r\n    });\r\n\r\n    const isSubmitButtonDisabled = Object.keys(formik.errors).length !== 0;\r\n    return (\r\n        <div className={styleModule.settingsFormWrapper}>\r\n            <div className={styleModule.description}>\r\n                <h3>Social links</h3>\r\n                <p>Here you can enter your contacts...</p>\r\n            </div>\r\n            <div className={styleModule.settingsFormContainer}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    {isFetching ? <Preloader size={'30px'} color={'#EC4899'}/> :\r\n                        <>\r\n                            {contactsTitles && contactsTitles.map(key => {\r\n                                    return (\r\n                                        <div className={styleModule.field}\r\n                                             key={key}>\r\n                                            <p className={styleModule.fieldTitle}>\r\n                                                {`${key[0].toUpperCase()}${key.slice(1)}`}\r\n                                            </p>\r\n                                            <InputTextSecondary placeholder={`${key}...`}\r\n                                                                {...formik.getFieldProps(key)}\r\n                                                //@ts-ignore\r\n                                                                error={formik.errors[key]}\r\n                                                //@ts-ignore\r\n                                                                className={!formik.errors[key] ? styleModule.border : ''}/>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            )}\r\n                            < Button type={'submit'} name={'Save'} disabled={isSubmitButtonDisabled}/>\r\n                        </>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n})","export const requiredField = (value: string): string | null => {\r\n    return !value.length ? 'This field is required' : null\r\n}\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} characters!` : null\r\n}\r\nexport const composeValidators = (...validators: Function[]) => (value: string) =>\r\n    validators.reduce((error, validator) => error || validator(value), undefined);\r\n\r\nexport const validateURL = (values: any, errors: any, prop: string) => {\r\n    if (values[prop]) {\r\n        if (!/[-a-zA-Z0-9@:%_\\+.~#?&\\/=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&\\/=]*)?/gi.test(values[prop])) {\r\n            errors[prop] = 'Invalid URL address';\r\n        }\r\n    }\r\n}","import React, {\r\n    ChangeEvent,\r\n    DetailedHTMLProps,\r\n    InputHTMLAttributes,\r\n    KeyboardEvent,\r\n    memo,\r\n    TextareaHTMLAttributes\r\n} from 'react'\r\nimport s from './TextareaSecondary.module.scss'\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultTextAreaPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    customStyle?: string\r\n}\r\n\r\nexport const TextareaSecondary: React.FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, name, title,\r\n        customStyle,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    };\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    };\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\r\n    const finalInputClassName = `${error ? `${s.errorTextarea} ${s.superTextarea}` : s.superTextarea} ${className}`;\r\n\r\n    return (\r\n        <div className={customStyle ? `${customStyle} ${s.textAreaWrapper}` : s.textAreaWrapper}>\r\n            <textarea name={name}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={finalInputClassName}\r\n                   {...restProps}\r\n            />\r\n            {error && <div className={finalSpanClassName}>{error}</div>}\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {memo} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {useFormik} from 'formik';\r\nimport {UploadProfileModelType} from '../../../api/api';\r\nimport {updateProfile} from '../../../redux/redusers/profileReducer/profileReducer';\r\nimport styleModule from './ProfileSettingsForm.module.scss';\r\nimport {Preloader} from '../../generic/Preloader/Preloader';\r\nimport InputTextSecondary from '../../generic/InputTextSecondary/InputTextSecondary';\r\nimport {TextareaSecondary} from '../../generic/TextareaSecondary/TextareaSecondary';\r\nimport {Checkbox} from '../../generic/Checkbox/Checkbox';\r\nimport {Button} from '../../generic/Button/Button';\r\n\r\nexport const ProfileSettingsForm = memo(() => {\r\n    const fullName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName)\r\n    const userId = useSelector((state: AppStateType) => state.profilePage.profile?.userId)\r\n    const aboutMe = useSelector((state: AppStateType) => state.profilePage.profile?.aboutMe)\r\n    const lookingForAJob = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJob)\r\n    const lookingForAJobDescription = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJobDescription)\r\n    const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: fullName,\r\n            aboutMe: aboutMe as string,\r\n            lookingForAJob: lookingForAJob,\r\n            lookingForAJobDescription: lookingForAJobDescription as string,\r\n        },\r\n        onSubmit: values => {\r\n            const profileModel: UploadProfileModelType = {\r\n                fullName: values.fullName,\r\n                aboutMe: values.aboutMe,\r\n                lookingForAJob: values.lookingForAJob,\r\n                lookingForAJobDescription: values.lookingForAJobDescription,\r\n                userId: userId\r\n            }\r\n            dispatch(updateProfile(profileModel, navigate))\r\n        },\r\n        validate: values => {\r\n            const errors: Partial<UploadProfileModelType> = {};\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Field is required';\r\n            }\r\n            if (!values.aboutMe) {\r\n                errors.aboutMe = 'Field is required';\r\n            }\r\n            return errors;\r\n        }\r\n    });\r\n    const isSubmitButtonDisabled = formik.errors.fullName || formik.errors.aboutMe;\r\n    return (\r\n        <div className={styleModule.settingsFormWrapper}>\r\n            <div className={styleModule.description}>\r\n                <h3>Basic</h3>\r\n                <p>Basic settings for your profile...</p>\r\n            </div>\r\n            <div className={styleModule.settingsFormContainer}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    {isFetching ? <Preloader size={'30px'} color={'#EC4899'}/> :\r\n                        <>\r\n                            <div className={styleModule.field}>\r\n                                <p className={styleModule.fieldTitle}>\r\n                                    Full name\r\n                                </p>\r\n                                <InputTextSecondary placeholder={'Your name...'}\r\n                                                    {...formik.getFieldProps('fullName')}\r\n                                                    error={formik.errors.fullName}\r\n                                                    className={!formik.errors.fullName ? styleModule.border : ''}/>\r\n                            </div>\r\n                            <div className={styleModule.field}>\r\n                                <p className={styleModule.fieldTitle}>\r\n                                    About me\r\n                                </p>\r\n                                <TextareaSecondary placeholder={'A few words about myself...'}\r\n                                                   {...formik.getFieldProps('aboutMe')}\r\n                                                   error={formik.errors.aboutMe}\r\n                                                   className={!formik.errors.aboutMe ? styleModule.border : ''}/>\r\n                            </div>\r\n                            <div className={`${styleModule.field} ${styleModule.checkbox}`}>\r\n                                <p className={styleModule.fieldTitle}>\r\n                                    Looking for a job\r\n                                </p>\r\n                                <Checkbox {...formik.getFieldProps('lookingForAJob')}\r\n                                          checked={formik.values.lookingForAJob}>\r\n                                    Looking for a job\r\n                                </Checkbox>\r\n                            </div>\r\n                            <div className={styleModule.field}>\r\n                                <p className={styleModule.fieldTitle}>\r\n                                    Job description\r\n                                </p>\r\n                                <TextareaSecondary placeholder={'Description of the job you are looking for...'}\r\n                                    {...formik.getFieldProps('lookingForAJobDescription')}\r\n                                                   disabled={!formik.values.lookingForAJob}\r\n                                                   className={!formik.errors.lookingForAJobDescription ?\r\n                                                       `${styleModule.optionalField} ${styleModule.border}` :\r\n                                                       styleModule.optionalField}/>\r\n                            </div>\r\n                            <Button type={'submit'} name={'Save'} disabled={!!isSubmitButtonDisabled}/>\r\n                        </>\r\n                    }\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {memo, useEffect} from \"react\";\nimport styleModule from './Settings.module.scss';\nimport {NavLink, Route, Routes, useNavigate} from 'react-router-dom';\nimport InputTextSecondary from '../generic/InputTextSecondary/InputTextSecondary';\nimport {TextareaSecondary} from '../generic/TextareaSecondary/TextareaSecondary';\nimport {Checkbox} from '../generic/Checkbox/Checkbox';\nimport {useFormik} from 'formik';\nimport {Button} from '../generic/Button/Button';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {updateContacts, updateProfile} from '../../redux/redusers/profileReducer/profileReducer';\nimport {securityAPI, UploadProfileModelType} from '../../api/api';\nimport {Preloader} from '../generic/Preloader/Preloader';\nimport {ContactsSettingsForm} from '../forms/ContactsForm/ContactsSettingsForm';\nimport {ProfileSettingsForm} from '../forms/ProfileUpdateForm/ProfileSettingsForm';\n\nconst Settings = memo((props: any) => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        navigate('/settings/profile')\n    }, [])\n    return (\n        <div className={styleModule.settingsWrapper}>\n            <div className={styleModule.title}>\n                Account Setting\n            </div>\n            <div className={styleModule.links}>\n                <NavLink to={'/settings/profile'}\n\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Profile\n                </NavLink>\n                <NavLink to={'/settings/contacts'}\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Contacts\n                </NavLink>\n            </div>\n            <Routes>\n                <Route path={'profile'} element={<ProfileSettingsForm/>}/>\n                <Route path={'contacts'} element={<ContactsSettingsForm/>}/>\n            </Routes>\n        </div>\n    );\n})\nexport default Settings;\n"],"sourceRoot":""}