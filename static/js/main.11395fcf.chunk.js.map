{"version":3,"sources":["components/Settings/Settings.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.css","components/generic/Paginator/Paginator.module.scss","components/generic/InputText/InputText.module.css","components/Dialogs/Mesage/Message.module.css","components/forms/LoginForm/LoginForm.module.css","components/Navbar/Navbar.module.css","components/Sidebar/Sidebar.module.scss","components/Header/Header.module.css","components/generic/InputTextSecondary/InputTextSecondary.module.css","components/Dialogs/Dialogs.module.css","components/generic/EditableSpan/EditableSpan.module.css","components/generic/TextareaSecondary/TextareaSecondary.module.scss","components/Navbar/NavLink/CustomNavLink.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/generic/Checkbox/Checkbox.module.scss","components/Users/User/User.module.css","components/generic/Avatar/Avatar.module.css","components/generic/UnderConstruction/UnderConstruction.module.css","components/forms/AddMessageForm/AddMessageForm.module.css","components/Users/Users.module.css","components/forms/AddPostForm/AddPostForm.module.css","components/generic/Preloader/Preloader.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/generic/Button/Button.module.css","components/generic/Textarea/Textarea.module.css","components/generic/Select/Select.module.scss","components/Login/Login.module.css","redux/redusers/dialogsReducer/dialogsReducer.ts","components/Navbar/NavLink/CustomNavLink.tsx","components/generic/Button/Button.tsx","assets/user-solid.svg","components/generic/Avatar/Avatar.tsx","components/Navbar/Navbar.tsx","components/generic/UnderConstruction/UnderConstruction.tsx","components/Music/Music.tsx","components/News/News.tsx","components/generic/InputTextSecondary/InputTextSecondary.tsx","components/generic/TextareaSecondary/TextareaSecondary.tsx","components/generic/Checkbox/Checkbox.tsx","components/Settings/Settings.tsx","api/api.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Mesage/Message.tsx","components/generic/Textarea/Textarea.tsx","components/forms/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","redux/selectors/authSelectors.ts","components/Dialogs/DialogsContainer.tsx","components/Users/User/User.tsx","components/generic/Select/Select.tsx","components/generic/Paginator/Paginator.tsx","components/generic/Preloader/Preloader.tsx","components/Users/Users.tsx","redux/redusers/profileReducer/profileReducer.ts","redux/redusers/usersReducer/usersReducer.ts","hoc/withRouter.tsx","redux/redusers/auth/authReducer.ts","redux/selectors/usersSelectors.ts","components/Users/UsersContainer.tsx","components/generic/InputText/InputText.tsx","components/generic/EditableSpan/EditableSpan.tsx","components/Profile/ProfileStatusHooks/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/forms/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/selectors/profileSelectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Sidebar/Sidebar.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","usersAvatars/user.png","components/Header/Header.tsx","utils/validators.ts","components/Header/HeaderContainer.tsx","components/forms/LoginForm/LoginForm.tsx","components/Login/Login.tsx","redux/redusers/app/appReducer.ts","redux/selectors/appSelectors.ts","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","DIALOGS_ACTIONS_TYPES","CustomNavLink","memo","path","title","iconTitle","resultClassName","styleModule","item","users","className","to","nav","isActive","active","icon","JSON","parse","Button","React","name","onClick","disabled","type","props","ButtonSetting","styled","button","colorHover","background","backgroundHover","style","Avatar","photo","wrapperBgc","innerBgc","borderImg","src","userLogo","alt","UserLogo","xmlns","viewBox","d","NavbarContainer","navigate","useNavigate","navLinksArr","stringify","faUserAlt","withAuthRedirect","faCommentDots","faNewspaper","faHeadphonesAlt","faUsers","faSlidersH","useState","navLinks","resultNavLinks","isAuth","filter","avatar","useSelector","state","auth","fullName","postsCount","profilePage","postsData","length","followers","customNavLinks","map","navLink","meInfoBlock","statistic","followersCount","links","buttonBlock","Navbar","connect","UnderConstruction","container","faPaintRoller","logo","description","Music","musicWrapper","News","newsWrapper","InputTextSecondary","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","customStyle","field","form","restProps","meta","finalSpanClassName","s","finalInputClassName","errors","errorInput","superInput","inputWrapper","e","currentTarget","value","key","CSSTransition","in","touched","timeout","classNames","unmountOnExit","mountOnEnter","TextareaSecondary","errorTextarea","superTextarea","textAreaWrapper","Checkbox","onChangeChecked","children","checkbox","checked","id","htmlFor","checkboxIcon","Settings","useEffect","settingsWrapper","l","activeLink","element","ProfileSettingsForm","ContactsSettingsForm","profile","aboutMe","lookingForAJob","lookingForAJobDescription","formik","useFormik","initialValues","onSubmit","values","alert","settingsFormWrapper","handleSubmit","fieldTitle","placeholder","getFieldProps","optionalField","contacts","contactsTitles","Object","keys","toUpperCase","slice","RESPONSE_RESULT_CODES","initialState","dialogsData","userId","image","isOnline","messagesData","message","time","Dialog","color","setActiveDialogId","forDialogTitle","DialogWrapper","div","finalAvatarClass","contactAvatar","online","validName","dialog","dialogActive","Message","meBackground","meColor","myUserId","myAvatar","MessageBlock","resultAvatar","messageWrapperStyle","messageWrapper","meMessageWrapper","messageBlockStyle","messageBlock","meMessageBlock","Textarea","textareaValue","setTextareaValue","reference","onAddWithEnter","styles","textarea","ref","AddMessageForm","addMessage","newMessageText","setSubmitting","resetForm","trim","isSubmitting","writeAndSendMessage","shiftKey","preventDefault","onAddMessageWithEnter","writeMessage","component","TextAreaField","sendMessage","MESSAGE_STYLE","DIALOG_STYLE","Dialogs","activeDialogId","activeDialog","dialogsPage","messagesByUser","m","params","useParams","dialogs","dialogsContainer","dialogs_items","full","messagesBlock","messagesHeader","messages","mapStateToPropsAuth","WrappedComponent","getAuthUserIDSelector","getIsAuthSelector","getAvatarSelector","getFullNameSelector","DialogsContainer","compose","ADD_MESSAGE","payload","User","isFollowingButtonDisabled","followingInProcessUsersId","includes","userWrapper","width","height","photos","small","followed","stopBeingFollower","faUserMinus","becomeFollower","faUserPlus","Select","options","onChangeOption","mappedOptions","o","selectControl","Paginator","portionSize","useMemo","pageCount","pages","Math","ceil","totalItemsCount","pageSize","i","push","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","currentPage","currentPortionNumber","floor","paginator","firstPage","pagesToBack","faAngleLeft","threeDots","page","pageNumber","selectedPageNumber","onChangePage","pagesToForward","faAngleRight","lastPage","pageCountSettings","select","onChangePageSize","Preloader","size","preloaderBlock","fontSize","preloaderIcon","faSpinner","Users","usersTotalCount","isFetching","toggleFollowingInProcess","userElements","user","usersWrapper","usersBlock","paginatorBlock","PROFILE_ACTIONS_TYPES","instance_1","axios","create","baseURL","withCredentials","headers","usersAPI","get","then","response","data","post","delete","profileAPI","status","put","authMeAPI","email","password","rememberMe","USERS_ACTIONS_TYPES","likes","likeCount","isLike","setProfile","SET_PROFILE","setStatus","SET_STATUS","getFollowers","dispatch","getState","totalCount","items","SET_FOLLOWERS","AUTH_ACTIONS_TYPES","setUsers","SET_USERS","setIsFetchingValue","SET_IS_FETCHING_VALUE","followingInProcess","TOGGLE_FOLLOWING_IN_PROCESS","followerId","userID","resultCode","success","UNFOLLOW","DELETE_FOLLOWER","getUsersSelector","usersPage","getUsersTotalCountSelector","createSelector","getPageSizeSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingInProcessUsersIdSelector","UsersApiContainer","repeatGetUsers","this","getUsers","PureComponent","UsersContainer","FOLLOW","SET_USERS_TOTAL_COUNT","SET_CURRENT_PAGE","InputText","EditableSpan","editMode","onEnterCallback","setState","onBlurCallback","onBlur","onDoubleClickCallBack","onDoubleClick","spanProps","autoFocus","restSpanProps","editSpan","editableSpanWrapper","inputStyle","spanWrapper","editPen","faPencilAlt","Component","ProfileStatusHooks","updateStatus","localStatus","setLocalStatus","onBlurEnterCallback","profileStatus","undefined","ProfileInfo","useDispatch","newDialogId","isMyProfile","toString","profileInfo","large","userAvatar","statusContent","withoutEdit","statusJob","faCheck","iconYes","faTimes","iconNot","descriptionJob","buttonsBlock","ADD_DIALOG","Post","removePost","likePost","PostWrapper","LikesDiv","postWrapper","avaBlock","onCrossClick","onLikeClick","likesBlock","AddPostForm","addPost","newPostText","formWrapper","onAddPostWithEnter","writePost","addPostButton","POST_STYLE","MyPosts","myPosts","posts","getProfileSelector","getPostsDataSelector","getStatusSelector","MyPostsContainer","ADD_POST","REMOVE_POST","LIKE_POST","SideBar","random","setRandom","randomFollowers","finalFollowers","sidebarWrapper","content","follower","FollowerItem","itemWrapper","nameAndStatus","action","Profile","postsAndSidebar","ProfileAPIContainer","refreshProfile","getProfile","getStatus","PATH","LOGIN","Number","prevProps","prevState","snapshot","ProfileContainer","Header","header","TitleDescription","logoAndDescription","title_description","loginStatus","loginAndAvatar","PROFILE","logo_avatar","notifications","logoutButton","logout","NotificationsLogo","maxLength","login","setAuthUserData","SET_AUTH_USER_DATA","getAuthorizationInfo","SET_FULL_NAME_AND_AVATAR","setFullNameAndAvatar","HeaderAPIContainer","render","HEADER_STYLE","HeaderContainer","requiredField","composeValidators","validators","reduce","validator","maxLength30","LoginForm","wrapperLoginForm","formErrorBlock","formElement","validate","checkMark","CheckBoxField","submitButton","bgColor","APP_ACTIONS_TYPES","Login","wrapperLogin","initialized","getInitializedSelector","app","DIALOGS","MUSIC","NEWS","USERS","SETTINGS","faGlobe","App","initializeApp","promise_1","Promise","all","SET_APP_INITIALIZE_VALUE","rootReducer","combineReducers","newPost","p","f","newMessage","Date","toLocaleTimeString","isDialog","find","newDialog","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.11395fcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"Settings_settingsWrapper__GJPbR\",\"title\":\"Settings_title__vK7M4\",\"links\":\"Settings_links__3Gku6\",\"activeLink\":\"Settings_activeLink__ZMxUH\",\"settingsFormWrapper\":\"Settings_settingsFormWrapper__1tQvr\",\"field\":\"Settings_field__zYcJb\",\"fieldTitle\":\"Settings_fieldTitle__vvfrY\",\"checkbox\":\"Settings_checkbox__5oMtP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__7ylqO\",\"avatar\":\"ProfileInfo_avatar__2EIzC\",\"description\":\"ProfileInfo_description__3f-6U\",\"fullName\":\"ProfileInfo_fullName__15UDG\",\"title\":\"ProfileInfo_title__2kif2\",\"status\":\"ProfileInfo_status__3oc6k\",\"statusContent\":\"ProfileInfo_statusContent__1zKMN\",\"withoutEdit\":\"ProfileInfo_withoutEdit__11kua\",\"aboutMe\":\"ProfileInfo_aboutMe__AeW_S\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__h-vFk\",\"statusJob\":\"ProfileInfo_statusJob__2KhXS\",\"iconYes\":\"ProfileInfo_iconYes__3682c\",\"iconNot\":\"ProfileInfo_iconNot__1bYWv\",\"buttonsBlock\":\"ProfileInfo_buttonsBlock__2Rqm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__xQcWP\",\"pagesToBack\":\"Paginator_pagesToBack__3L2UC\",\"pageNumber\":\"Paginator_pageNumber__gzrtq\",\"lastPage\":\"Paginator_lastPage__2Iuq4\",\"firstPage\":\"Paginator_firstPage__31SzO\",\"pagesToForward\":\"Paginator_pagesToForward__2b803\",\"selectedPageNumber\":\"Paginator_selectedPageNumber__2UZ8E\",\"threeDots\":\"Paginator_threeDots__3teun\",\"pageCountSettings\":\"Paginator_pageCountSettings__1DNg1\",\"select\":\"Paginator_select__2usRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"InputText_inputWrapper__8UzaQ\",\"superInput\":\"InputText_superInput__MC_64\",\"errorInput\":\"InputText_errorInput__EG88-\",\"forStatus\":\"InputText_forStatus__3cIkX\",\"error\":\"InputText_error__35kd9\",\"enter\":\"InputText_enter__12EqO\",\"enterActive\":\"InputText_enterActive__2ULgT\",\"exit\":\"InputText_exit__WCjSQ\",\"exitActive\":\"InputText_exitActive__1k-SM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrapper\":\"Message_messageWrapper__2v9vO\",\"meMessageWrapper\":\"Message_meMessageWrapper__1MAX1\",\"messageBlock\":\"Message_messageBlock__3LBDi\",\"meMessageBlock\":\"Message_meMessageBlock__1x_NA\",\"name\":\"Message_name__3Gp6r\",\"message\":\"Message_message__9Gaxr\",\"time\":\"Message_time__2pDBU\",\"avatar\":\"Message_avatar__1V7_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperLoginForm\":\"LoginForm_wrapperLoginForm__2vlIU\",\"title\":\"LoginForm_title__i-9CN\",\"formWrapper\":\"LoginForm_formWrapper__3UkNk\",\"formElement\":\"LoginForm_formElement__1Wl7v\",\"checkMark\":\"LoginForm_checkMark__305L6\",\"submitButton\":\"LoginForm_submitButton__2hob8\",\"formErrorBlock\":\"LoginForm_formErrorBlock__jRDwN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2lBSZ\",\"meInfoBlock\":\"Navbar_meInfoBlock__23xT7\",\"statistic\":\"Navbar_statistic__6DEYI\",\"postsCount\":\"Navbar_postsCount__1jdMm\",\"followersCount\":\"Navbar_followersCount__1L-nc\",\"links\":\"Navbar_links__1CVd4\",\"buttonBlock\":\"Navbar_buttonBlock__2sf4a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebarWrapper\":\"Sidebar_sidebarWrapper__2RC4w\",\"title\":\"Sidebar_title__2ZzRA\",\"content\":\"Sidebar_content__2jxh1\",\"itemWrapper\":\"Sidebar_itemWrapper__3Ilo2\",\"avatar\":\"Sidebar_avatar__3Kxw5\",\"nameAndStatus\":\"Sidebar_nameAndStatus__2--Io\",\"name\":\"Sidebar_name__27jxJ\",\"status\":\"Sidebar_status__35ESR\",\"action\":\"Sidebar_action__1aBxM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__rKeBu\",\"logoAndDescription\":\"Header_logoAndDescription__36SJL\",\"main_logo\":\"Header_main_logo__227Ld\",\"title_description\":\"Header_title_description__3Sd-q\",\"logo\":\"Header_logo__Z7xS8\",\"loginStatus\":\"Header_loginStatus__27OBc\",\"loginAndAvatar\":\"Header_loginAndAvatar__OJ0Lj\",\"notifications\":\"Header_notifications__12Nfz\",\"logoutButton\":\"Header_logoutButton__1jl7V\",\"avatar\":\"Header_avatar__1X7_3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"InputTextSecondary_inputWrapper__1a2qx\",\"superInput\":\"InputTextSecondary_superInput__Zu0Nu\",\"errorInput\":\"InputTextSecondary_errorInput__1xeu8\",\"forStatus\":\"InputTextSecondary_forStatus__4bGnP\",\"error\":\"InputTextSecondary_error__2RFww\",\"enter\":\"InputTextSecondary_enter__3Xqxf\",\"enterActive\":\"InputTextSecondary_enterActive__dy5nv\",\"exit\":\"InputTextSecondary_exit__2c9h9\",\"exitActive\":\"InputTextSecondary_exitActive__1D7BC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1o3_i\",\"dialogsContainer\":\"Dialogs_dialogsContainer__3woBK\",\"dialogs_items\":\"Dialogs_dialogs_items__1CN3_\",\"full\":\"Dialogs_full__37bPf\",\"messagesBlock\":\"Dialogs_messagesBlock___yNFN\",\"messagesHeader\":\"Dialogs_messagesHeader__2LXn6\",\"messages\":\"Dialogs_messages__174fl\",\"meMessages\":\"Dialogs_meMessages__2Nq9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editableSpanWrapper\":\"EditableSpan_editableSpanWrapper__2aU5i\",\"inputWrapper\":\"EditableSpan_inputWrapper__1gsDR\",\"spanWrapper\":\"EditableSpan_spanWrapper__2gUP9\",\"editSpan\":\"EditableSpan_editSpan__28RB9\",\"buttonsBlock\":\"EditableSpan_buttonsBlock__2aT0j\",\"editPen\":\"EditableSpan_editPen__3Yu2p\",\"enter\":\"EditableSpan_enter__19kUA\",\"enterActive\":\"EditableSpan_enterActive__3y2hR\",\"exit\":\"EditableSpan_exit__28CC8\",\"exitActive\":\"EditableSpan_exitActive__27QF9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textAreaWrapper\":\"TextareaSecondary_textAreaWrapper__1dM9_\",\"superTextarea\":\"TextareaSecondary_superTextarea__12Pnq\",\"errorTextarea\":\"TextareaSecondary_errorTextarea__12iES\",\"error\":\"TextareaSecondary_error__1txAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CustomNavLink_item__1zZWj\",\"icon\":\"CustomNavLink_icon__2_Amr\",\"active\":\"CustomNavLink_active__1Tg-p\",\"users\":\"CustomNavLink_users__1mOYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2L0-V\",\"contactAvatar\":\"Dialog_contactAvatar__2NdvE\",\"online\":\"Dialog_online__2fIAr\",\"dialogActive\":\"Dialog_dialogActive__2hnMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__2dad-\",\"avaBlock\":\"Post_avaBlock__1eypn\",\"messageBlock\":\"Post_messageBlock__q4MKJ\",\"likesBlock\":\"Post_likesBlock__W2PfY\",\"removePost\":\"Post_removePost__ZIsFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__26PMU\",\"checkboxIcon\":\"Checkbox_checkboxIcon__euaY-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"User_userWrapper__HCUEE\",\"avatar\":\"User_avatar__3jo1S\",\"followed\":\"User_followed__suzg7\",\"fullName\":\"User_fullName__dcBJC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperBgc\":\"Avatar_wrapperBgc__2mTTQ\",\"innerBgc\":\"Avatar_innerBgc__fKEKR\",\"borderImg\":\"Avatar_borderImg__2ca4w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UnderConstruction_container__3E9Tv\",\"logo\":\"UnderConstruction_logo__3iBsD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"writeMessage\":\"AddMessageForm_writeMessage__3YRVp\",\"writeAndSendMessage\":\"AddMessageForm_writeAndSendMessage__1TFJk\",\"sendMessage\":\"AddMessageForm_sendMessage__1zEOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersWrapper\":\"Users_usersWrapper__2NpI5\",\"usersBlock\":\"Users_usersBlock__wcdhv\",\"paginatorBlock\":\"Users_paginatorBlock__24N13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"AddPostForm_formWrapper__2AMmq\",\"writePost\":\"AddPostForm_writePost__3JhZH\",\"addPostButton\":\"AddPostForm_addPostButton__3Jvum\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderBlock\":\"Preloader_preloaderBlock__3EBOq\",\"preloaderIcon\":\"Preloader_preloaderIcon__QSMsa\",\"rotate-center\":\"Preloader_rotate-center__1wFP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2qXpH\",\"postsAndSidebar\":\"Profile_postsAndSidebar__joW8I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__14xNj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__egdZh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__3tLx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectControl\":\"Select_selectControl__242qU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperLogin\":\"Login_wrapperLogin__2E7ef\"};","export enum DIALOGS_ACTIONS_TYPES {\r\n    ADD_MESSAGE = 'social/dialogs/ADD-ADD_MESSAGE',\r\n    ADD_DIALOG = 'social/dialogs/ADD-ADD_DIALOG',\r\n\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    /**\r\n     * Name of contact/friend\r\n     */\r\n    name: string\r\n    /**\r\n     * Image of contact/friend\r\n     */\r\n    image: string | null\r\n    /**\r\n     * Optional background color of component\r\n     */\r\n    background?: string\r\n    /**\r\n     * Optional color text of component\r\n     */\r\n    color?: string\r\n    isOnline: boolean\r\n    userId: number\r\n};\r\nexport type MessageType = {\r\n    id: number\r\n    userId: number\r\n    name: string\r\n    message: string\r\n    image: string | null\r\n    time: string\r\n};\r\nexport type InitialStateDialogsType = typeof initialState\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            userId: 184,\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-2.jpg',\r\n            isOnline: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Dmitry',\r\n            userId: 185,\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-3.jpg',\r\n            isOnline: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Aleksey',\r\n            userId: 186,\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-2.jpg',\r\n            isOnline: false,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Ivan',\r\n            userId: 187,\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-7.jpg',\r\n            isOnline: true,\r\n        },\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            userId: 184,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. In, rem!',\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-2.jpg',\r\n            time: '12:03'\r\n        },\r\n\r\n        {id: 2, userId: 20392, name: 'Me', message: 'Lorem ipsum dolor !', image: null, time: '12:10'},\r\n        {\r\n            id: 3,\r\n            name: 'Dmitry',\r\n            userId: 185,\r\n            message: 'Lorem ipsum dolor sit amet',\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-3.jpg',\r\n            time: '13:01'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Ivan',\r\n            userId: 187,\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-7.jpg',\r\n            time: '13:08'\r\n        },\r\n        {\r\n            id: 5,\r\n            userId: 20392,\r\n            name: 'Me',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: null,\r\n            time: '13:49'\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Ivan',\r\n            userId: 187,\r\n            message: 'Lorem ipsum dolor !',\r\n            image: 'http://demo.foxthemes.net/instellohtml/assets/images/avatars/avatar-7.jpg',\r\n            time: '14:05'\r\n        },\r\n        {id: 7, userId: 20392, name: 'Me', message: 'Lorem ipsum dolor', image: null, time: '14:08'},\r\n        {\r\n            id: 8,\r\n            name: 'Me',\r\n            userId: 20392,\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit dolor sit amet, consectetur.',\r\n            image: null,\r\n            time: '14:10'\r\n        },\r\n\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: DialogsActionType): InitialStateDialogsType => {\r\n    switch (action.type) {\r\n        case DIALOGS_ACTIONS_TYPES.ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: state.messagesData.length + 1,\r\n                userId: 20392,\r\n                name: 'Me',\r\n                message: action.payload.newMessageText,\r\n                image: null,\r\n                time: new Date().toLocaleTimeString().slice(0, 5)\r\n            };\r\n            return {...state, messagesData: [...state.messagesData, newMessage]}\r\n        case DIALOGS_ACTIONS_TYPES.ADD_DIALOG:\r\n            const isDialog = state.dialogsData.find(d => d.userId === action.payload.userId)\r\n            if (!isDialog) {\r\n                const newDialog: DialogType = {\r\n                    id: state.dialogsData.length + 1,\r\n                    userId: action.payload.userId,\r\n                    isOnline: true,\r\n                    image: action.payload.image,\r\n                    name: action.payload.name,\r\n                }\r\n                return {\r\n                    ...state, dialogsData: [...state.dialogsData, newDialog]\r\n                }\r\n            } else return state\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport type DialogsActionType =\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof addDialog>\r\nexport const addMessage = (newMessageText: string) => ({\r\n    type: DIALOGS_ACTIONS_TYPES.ADD_MESSAGE,\r\n    payload: {newMessageText}\r\n} as const);\r\nexport const addDialog = (name: string, userId: number, image: string) => ({\r\n    type: DIALOGS_ACTIONS_TYPES.ADD_DIALOG,\r\n    payload: {name, userId, image}\r\n} as const);","import styleModule from \"./CustomNavLink.module.css\";\r\nimport React, {memo} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {NavLinkItem} from \"../Navbar\";\r\n\r\nexport const CustomNavLink = memo(({path, title, iconTitle}: NavLinkItem) => {\r\n    const resultClassName = title === 'Users' ?\r\n        `${styleModule.item} ${styleModule.users}` :\r\n        styleModule.item\r\n    return (\r\n        <div className={resultClassName}>\r\n            <NavLink to={path}\r\n                     className={nav => nav.isActive ? styleModule.active : ''}>\r\n                <FontAwesomeIcon icon={JSON.parse(iconTitle)} className={styleModule.icon}/>{title}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport style from './Button.module.css'\r\nimport styled from \"styled-components\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick?: () => void\r\n    backgroundHover?: string\r\n    background?: string\r\n    colorHover?: string\r\n    disabled?: boolean\r\n    type?: \"button\" | \"submit\" | \"reset\" | undefined\r\n}\r\n\r\n\r\nexport const Button = React.memo(({\r\n                                      name,\r\n                                      onClick,\r\n                                      disabled,\r\n                                      type, ...props\r\n                                  }: ButtonPropsType) => {\r\n    const ButtonSetting = styled.button`\r\n& {\r\ncolor: ${props.colorHover ? props.colorHover : '#ffffff'};\r\nbackground-color:${props.background ? props.background : '#EC4899'}\r\n}\r\n&:hover {\r\nbackground-color: ${props.backgroundHover ? props.backgroundHover : '#DB2777'}\r\n}\r\n`;\r\n\r\n    const onClickButton = () => {\r\n        onClick && onClick()\r\n    };\r\n\r\n    return (\r\n        <ButtonSetting onClick={onClickButton}\r\n                       className={style.button}\r\n                       disabled={disabled}\r\n                       type={type}>\r\n            {name}\r\n        </ButtonSetting>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/user-solid.fc0f33b2.svg\";","import styleModule from './Avatar.module.css'\r\nimport userLogo from '../../../assets/user-solid.svg'\r\nimport {memo} from 'react';\r\n\r\n\r\ntype AvatarType = {\r\n    photo: string | null | undefined\r\n    style?: Object\r\n}\r\n\r\n\r\nexport const Avatar = memo(({photo, style}: AvatarType) => {\r\n    return (\r\n        <div style={style} className={styleModule.wrapperBgc}>\r\n            <div className={styleModule.innerBgc}>\r\n                <div className={styleModule.borderImg}>\r\n                    <img src={photo ? photo : userLogo} alt=\"Avatar\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const UserLogo = memo(() => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n            <path\r\n                d=\"M224 256c70.7 0 128-57.31 128-128s-57.3-128-128-128C153.3 0 96 57.31 96 128S153.3 256 224 256zM274.7 304H173.3C77.61 304 0 381.6 0 477.3c0 19.14 15.52 34.67 34.66 34.67h378.7C432.5 512 448 496.5 448 477.3C448 381.6 370.4 304 274.7 304z\"/>\r\n        </svg>\r\n    )\r\n})","import React, {useState} from \"react\";\nimport './Navbar.module.css';\nimport styleModule from './Navbar.module.css';\nimport {\n    faCommentDots,\n    faHeadphonesAlt,\n    faNewspaper,\n    faSlidersH,\n    faUserAlt,\n    faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {connect, useSelector} from \"react-redux\";\nimport {CustomNavLink} from \"./NavLink/CustomNavLink\";\nimport {Button} from \"../generic/Button/Button\";\nimport {NavLink, useNavigate} from 'react-router-dom';\nimport {Avatar} from '../generic/Avatar/Avatar';\n\n\nexport type NavLinkItem = {\n    title: string\n    path: string\n    iconTitle: string\n    withAuthRedirect: boolean\n}\n\n\nexport const NavbarContainer = React.memo((props: MapStateToPropsType) => {\n    const navigate = useNavigate();\n    const navLinksArr: NavLinkItem[] = [\n        {title: 'Profile', path: '/profile/*', iconTitle: JSON.stringify(faUserAlt), withAuthRedirect: true,},\n        {title: 'Messages', path: '/dialogs', iconTitle: JSON.stringify(faCommentDots), withAuthRedirect: true,},\n        {title: 'News', path: '/news', iconTitle: JSON.stringify(faNewspaper), withAuthRedirect: false,},\n        {title: 'Music', path: '/music', iconTitle: JSON.stringify(faHeadphonesAlt), withAuthRedirect: false,},\n        {title: 'Users', path: '/users', iconTitle: JSON.stringify(faUsers), withAuthRedirect: false,},\n        {title: 'Settings', path: '/settings', iconTitle: JSON.stringify(faSlidersH), withAuthRedirect: true,},\n    ]\n    const [navLinks, setNavLinks] = useState<NavLinkItem[]>(navLinksArr)\n\n    let resultNavLinks = navLinks\n    if (!props.isAuth) {\n        resultNavLinks = navLinks.filter(nav => !nav.withAuthRedirect)\n    }\n    const avatar = useSelector((state: AppStateType) => state.auth.avatar);\n    const name = useSelector((state: AppStateType) => state.auth.fullName);\n    const postsCount = useSelector((state: AppStateType) => state.profilePage.postsData.length);\n    const followers = useSelector((state: AppStateType) => state.profilePage.followers.length);\n\n    const customNavLinks = resultNavLinks.map(navLink => {\n        return (\n            <CustomNavLink key={navLink.title} {...navLink}/>\n        )\n\n    })\n    return (\n        <nav className={styleModule.nav}>\n            <div className={styleModule.meInfoBlock}>\n                <div className={styleModule.avatar}>\n                    <NavLink to={'/profile/'}>\n                        <Avatar photo={avatar}/>\n                    </NavLink>\n                </div>\n                <h3>{name}</h3>\n                <div className={styleModule.statistic}>\n                    <div className={styleModule.postsCount}>\n                        <h4>Post</h4>\n                        {postsCount}\n                    </div>\n                    <div className={styleModule.followersCount}>\n                        <h4>Followers</h4>\n                        {followers}\n                    </div>\n                </div>\n            </div>\n            <div className={styleModule.links}>\n                {customNavLinks}\n            </div>\n            {!props.isAuth && <div className={styleModule.buttonBlock}>\n                <Button name={'Login'} onClick={() => navigate('/login')}/>\n            </div>}\n        </nav>\n    )\n})\n\nconst mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nexport const Navbar = connect(mapStateToProps)(NavbarContainer)\n","import styleModule from './UnderConstruction.module.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport React, {memo} from 'react';\r\nimport {faPaintRoller} from '@fortawesome/free-solid-svg-icons/faPaintRoller';\r\n\r\nexport const UnderConstruction = memo(() => {\r\n    return (\r\n        <div className={styleModule.container}>\r\n            <FontAwesomeIcon icon={faPaintRoller} className={styleModule.logo}/>\r\n            <div className={styleModule.description}>\r\n                <h1>Page</h1>\r\n                <h1>under</h1>\r\n                <h1>construction</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {memo} from \"react\";\nimport styleModule from './Music.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport const Music = memo((props: any) => {\n    return (\n        <div className={styleModule.musicWrapper}>\n            <UnderConstruction/>\n        </div>\n    );\n})\n\n\n\n","import React, {memo} from \"react\";\nimport styleModule from './News.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport const News = memo((props: any) => {\n    return (\n        <div className={styleModule.newsWrapper}>\n            <UnderConstruction/>\n        </div>\n    );\n})\n\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport s from './InputTextSecondary.module.css'\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport style from '../EditableSpan/EditableSpan.module.css';\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    customStyle?: string\r\n    field?: any\r\n    form?: any\r\n    meta?: any\r\n    name?: string\r\n}\r\n\r\nconst InputTextSecondary: React.FC<InputTextPropsType> = memo((\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, name, title,\r\n        customStyle, field, form, meta,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    };\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    };\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\r\n    const finalInputClassName = `${error || form?.errors[field.name] ? `${s.errorInput} ${s.superInput}` : s.superInput} ${className ? s[className] : className}`;\r\n    return (\r\n        <div className={customStyle ? `${customStyle} ${s.inputWrapper}` : s.inputWrapper}>\r\n            <input name={name}\r\n                   type={type}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={finalInputClassName}\r\n                   {...field}\r\n                   {...restProps}\r\n            />\r\n            <CSSTransition in={error || form?.errors[field.name] && form?.touched[field.name]}\r\n                           timeout={300}\r\n                           classNames={s}\r\n                           unmountOnExit\r\n                           mountOnEnter>\r\n                <div className={finalSpanClassName}>{form?.errors[field.name]}</div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default InputTextSecondary\r\n","import React, {\r\n    ChangeEvent,\r\n    DetailedHTMLProps,\r\n    InputHTMLAttributes,\r\n    KeyboardEvent,\r\n    memo,\r\n    TextareaHTMLAttributes\r\n} from 'react'\r\nimport s from './TextareaSecondary.module.scss'\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultTextAreaPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    customStyle?: string\r\n}\r\n\r\nexport const TextareaSecondary: React.FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, name, title,\r\n        customStyle,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    };\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    };\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\r\n    const finalInputClassName = `${error ? `${s.errorTextarea} ${s.superTextarea}` : s.superTextarea} ${className}`;\r\n\r\n    return (\r\n        <div className={customStyle ? `${customStyle} ${s.textAreaWrapper}` : s.textAreaWrapper}>\r\n            <textarea name={name}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={finalInputClassName}\r\n                   {...restProps}\r\n            />\r\n            {error && <div className={finalSpanClassName}>{error}</div>}\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, memo} from 'react'\r\nimport s from './Checkbox.module.scss'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    };\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <>\r\n            <div className={s.checkbox}>\r\n                <input type=\"checkbox\"\r\n                       onChange={onChangeCallback}\r\n                       className={finalInputClassName}\r\n                       {...restProps}\r\n                       id=\"chekcbox1\"/>\r\n                <label htmlFor=\"chekcbox1\">\r\n                    <span className={s.checkboxIcon}></span>\r\n                    {children && <span className={s.spanClassName}>{children}</span>}</label>\r\n            </div>\r\n        </>\r\n    )\r\n});","import React, {memo, useEffect} from \"react\";\nimport styleModule from './Settings.module.scss';\nimport {NavLink, Route, Routes, useNavigate} from 'react-router-dom';\nimport InputTextSecondary from '../generic/InputTextSecondary/InputTextSecondary';\nimport {TextareaSecondary} from '../generic/TextareaSecondary/TextareaSecondary';\nimport {Checkbox} from '../generic/Checkbox/Checkbox';\nimport {useFormik} from 'formik';\nimport {Button} from '../generic/Button/Button';\nimport {useSelector} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\n\nexport const Settings = memo((props: any) => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        navigate('/settings/profile')\n    }, [])\n    return (\n        <div className={styleModule.settingsWrapper}>\n            <div className={styleModule.title}>\n                Account Setting\n            </div>\n            <div className={styleModule.links}>\n                <NavLink to={'/settings/profile'}\n\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Profile\n                </NavLink>\n                <NavLink to={'/settings/contacts'}\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Contacts\n                </NavLink>\n            </div>\n            <Routes>\n                <Route path={'profile'} element={<ProfileSettingsForm/>}/>\n                <Route path={'contacts'} element={<ContactsSettingsForm/>}/>\n            </Routes>\n        </div>\n    );\n})\n\nexport const ProfileSettingsForm = memo(() => {\n    const fullName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName)\n    const aboutMe = useSelector((state: AppStateType) => state.profilePage.profile?.aboutMe)\n    const lookingForAJob = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJob)\n    const lookingForAJobDescription = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJobDescription)\n    const formik = useFormik({\n        initialValues: {\n            fullName: fullName,\n            aboutMe: aboutMe,\n            lookingForAJob: lookingForAJob,\n            lookingForAJobDescription: lookingForAJobDescription,\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n    return (\n        <div className={styleModule.settingsFormWrapper}>\n            <form onSubmit={formik.handleSubmit}>\n                <div className={styleModule.field}>\n                    <p className={styleModule.fieldTitle}>\n                        Full name\n                    </p>\n                    <InputTextSecondary placeholder={'Your name...'}\n                                        {...formik.getFieldProps('fullName')}/>\n                </div>\n                <div className={styleModule.field}>\n                    <p className={styleModule.fieldTitle}>\n                        About me\n                    </p>\n                    <TextareaSecondary placeholder={'A few words about myself...'}\n                                       {...formik.getFieldProps('aboutMe')}/>\n                </div>\n                <div className={`${styleModule.field} ${styleModule.checkbox}`}>\n                    <p className={styleModule.fieldTitle}>\n                        Looking for a job\n                    </p>\n                    <Checkbox {...formik.getFieldProps('lookingForAJob')}\n                              checked={formik.values.lookingForAJob}>\n                        Looking for a job\n                    </Checkbox>\n                </div>\n                <div className={styleModule.field}>\n                    <p className={styleModule.fieldTitle}>\n                        Job description\n                    </p>\n                    <TextareaSecondary placeholder={'Description of the job you are looking for...'}\n                                       {...formik.getFieldProps('lookingForAJobDescription')}\n                                       disabled={!formik.values.lookingForAJob}\n                                       className={styleModule.optionalField}/>\n                </div>\n                <Button type={'submit'} name={'Save'}/>\n            </form>\n        </div>\n    )\n})\n\n\nexport const ContactsSettingsForm = memo(() => {\n    const contacts = useSelector((state: AppStateType) => state.profilePage.profile?.contacts)\n    const contactsTitles = contacts && Object.keys(contacts);\n    const formik = useFormik({\n        initialValues: {\n            ...contacts\n        },\n        onSubmit: values => {\n            debugger\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n    return (\n        <div className={styleModule.settingsFormWrapper}>\n            <form onSubmit={formik.handleSubmit}>\n                {contactsTitles && contactsTitles.map(key => {\n                        return (\n                            <div className={styleModule.field}\n                                 key={key}>\n                                <p className={styleModule.fieldTitle}>\n                                    {`${key[0].toUpperCase()}${key.slice(1)}`}\n                                </p>\n                                <InputTextSecondary placeholder={`${key}...`}\n                                                    {...formik.getFieldProps(key)}/>\n                            </div>\n                        )\n                    }\n                )}\n                <Button type={'submit'} name={'Save'}/>\n            </form>\n        </div>\n\n    )\n})\n\n\n","import axios, {AxiosResponse} from 'axios'\r\nimport {UserType} from \"../redux/redusers/usersReducer/usersReducer\";\r\nimport {ProfileType} from \"../redux/redusers/profileReducer/profileReducer\";\r\n\r\n//types------------------------------------------types\r\n//↓\r\n//USERS---\r\ntype GetUsersDataType = {\r\n    error: string | null\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\nexport type PostFollowDataType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: object\r\n    fieldsErrors: Array<any>\r\n}\r\nexport type DeleteFollowDataType = PostFollowDataType\r\n\r\n//PROFILE---\r\ntype GetProfileDataType = ProfileType\r\ntype UpdateStatusDataType = {\r\n    data: {}\r\n    fieldsErrors: any[]\r\n    messages: string[]\r\n    resultCode: RESPONSE_RESULT_CODES\r\n}\r\n\r\n//AUTH---\r\nexport type AuthUserDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: AuthUserDataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: RESPONSE_RESULT_CODES\r\n}\r\nexport type LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    },\r\n    messages: string[],\r\n    fieldsErrors: any[],\r\n    resultCode: RESPONSE_RESULT_CODES\r\n}\r\nexport type LogoutResponseType = {\r\n    \"data\": {},\r\n    \"messages\": string[],\r\n    \"fieldsErrors\": any[],\r\n    \"resultCode\": RESPONSE_RESULT_CODES\r\n}\r\n\r\nexport enum RESPONSE_RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n    needCaptcha = 10\r\n\r\n}\r\n\r\n//↑\r\n//types------------------------------------------types\r\n\r\nconst instance_1 = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageSize: number, currentPage: number) {\r\n        return instance_1.get<GetUsersDataType>(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    becomeFollower(userId: number) {\r\n        return instance_1.post<PostFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    stopBeingFollower(userId: number) {\r\n        return instance_1.delete<DeleteFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string | number) {\r\n        return instance_1.get<GetProfileDataType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance_1.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance_1.put<UpdateStatusDataType>(`/profile/status`, {status})\r\n            .then(response => {\r\n                return response\r\n            })\r\n    }\r\n}\r\n\r\nexport let authMeAPI = {\r\n    getAuthorizationInfo() {\r\n        return instance_1.get<GetAuthUserDataType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance_1.post<any, AxiosResponse<LoginResponseType>, { email: string, password: string, rememberMe: boolean }>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe\r\n        })\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance_1.delete<any, AxiosResponse<LogoutResponseType>>(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n","import React from \"react\";\nimport styleModule from './Dialog.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {DialogType} from \"../../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport styled from \"styled-components\";\nimport {UserLogo} from '../../generic/Avatar/Avatar';\n\nexport type DialogPropsType = DialogType &\n    {\n        setActiveDialogId?: (dialogId: number) => void\n        forDialogTitle?: boolean\n    }\n\nexport const Dialog = React.memo(({\n                                      id,\n                                      name,\n                                      image,\n                                      background,\n                                      color,\n                                      userId,\n                                      setActiveDialogId,\n                                      forDialogTitle, ...props\n                                  }: DialogPropsType) => {\n    const DialogWrapper = styled.div`\n    & {\n    background: ${background ? background : '#FFFFFF'};\n    }\n    & a {\n    color: ${color ? color : '#333333'};\n    }\n    \n    `;\n    const onActiveDialogHandler = (dialog: any) => {\n        if (dialog.isActive) {\n            setActiveDialogId && setActiveDialogId(userId)\n            return styleModule.dialogActive\n        } else {\n            return ''\n        }\n\n    }\n    const finalAvatarClass = props.isOnline ?\n        `${styleModule.contactAvatar} ${styleModule.online}` :\n        styleModule.contactAvatar\n    const validName = name?.length > 12 && !forDialogTitle ? `${name.slice(0, 12)}...` : name;\n    return (\n        <NavLink className={onActiveDialogHandler}\n                 to={`/dialogs/${id}`}>\n            <DialogWrapper className={styleModule.dialog}>\n                <div className={finalAvatarClass}>\n                    {image ? <img src={image} alt={'message avatar'}/> :\n                        <UserLogo/>}\n                </div>\n                <span>{validName}</span>\n            </DialogWrapper>\n        </NavLink>\n    )\n})\n\n","import React from \"react\";\nimport styleModule from './Message.module.css';\nimport styled from \"styled-components\";\nimport {UserLogo} from '../../generic/Avatar/Avatar';\n\nexport type MessagePropsType = {\n    id: number,\n    /**\n     * Name of the interlocutor\n     */\n    userId: number\n    name: string,\n    /**\n     * Text of message\n     */\n    message: string,\n    /**\n     * Image of the interlocutor\n     */\n    image: string | null,\n    /**\n     * Time of sending message\n     */\n    time: string\n    background: string\n    color: string\n    meBackground: string\n    meColor: string\n    myUserId: null | number\n    myAvatar: null | string\n}\n\nexport const Message = React.memo(({\n                                       id,\n                                       userId,\n                                       name,\n                                       message,\n                                       image,\n                                       time,\n                                       color,\n                                       background,\n                                       meBackground,\n                                       meColor,\n                                       myUserId,\n                                       myAvatar,\n                                       ...props\n                                   }: MessagePropsType) => {\n    const MessageBlock = styled.div`\n    & {\n    background: ${userId === myUserId ? meBackground : background};\n    color: ${userId === myUserId ? meColor : color}\n    }\n    &:before {\n    background-color:  ${userId === myUserId ? meBackground : background};\n    }\n    `;\n    let resultAvatar = userId === myUserId && myAvatar ? <img src={myAvatar}/> :\n        userId === myUserId && !myAvatar ? <UserLogo/> :\n            image ? <img src={image}/> : <UserLogo/>\n\n\n    // if the message is mine, then one style, if not, then another\n    const messageWrapperStyle = userId === myUserId ?\n        `${styleModule.messageWrapper} ${styleModule.meMessageWrapper}` :\n        styleModule.messageWrapper\n    const messageBlockStyle = userId === myUserId\n        ?\n        `${styleModule.messageBlock} ${styleModule.meMessageBlock}` :\n        styleModule.messageBlock\n    return (\n        <div className={messageWrapperStyle}>\n            <div className={styleModule.avatar}>\n                {resultAvatar}\n            </div>\n            <MessageBlock className={messageBlockStyle}>\n                <div className={styleModule.name}>\n                    {name}\n                </div>\n                <div className={styleModule.message}>\n                    {message}\n                </div>\n                <div className={styleModule.time}>\n                    {time}\n                </div>\n            </MessageBlock>\n        </div>\n    )\n})\n\n","import React, {ChangeEvent, KeyboardEvent, LegacyRef} from \"react\";\r\nimport style from './Textarea.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    textareaValue?: string\r\n    setTextareaValue?: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    onAddWithEnter?: (e: KeyboardEvent<HTMLTextAreaElement>) => void\r\n    reference?: LegacyRef<HTMLTextAreaElement>\r\n    placeholder?: string\r\n    background?: string\r\n    color?: string\r\n    field?: any\r\n    form?: any\r\n    meta?: any\r\n}\r\n\r\nexport const Textarea = React.memo(({\r\n                                        textareaValue,\r\n                                        setTextareaValue,\r\n                                        reference,\r\n                                        placeholder,\r\n                                        onAddWithEnter,\r\n                                        background,\r\n                                        color,\r\n                                        field,\r\n                                        form,\r\n                                        meta,\r\n                                        ...restProps\r\n                                    }: TextareaPropsType) => {\r\n    const styles = {\r\n        background: background,\r\n        color: color\r\n    };\r\n    return (\r\n        <textarea placeholder={placeholder}\r\n                  className={style.textarea}\r\n                  onChange={setTextareaValue}\r\n                  onKeyPress={onAddWithEnter}\r\n                  value={textareaValue}\r\n                  ref={reference}\r\n                  style={styles}\r\n                  {...field}\r\n        />\r\n    )\r\n})","import React, {FormEvent, KeyboardEvent, memo} from \"react\";\nimport styleModule from './AddMessageForm.module.css';\nimport {Button} from \"../../generic/Button/Button\";\nimport {Field, Form, Formik, FormikState} from \"formik\";\nimport {Textarea} from '../../generic/Textarea/Textarea';\n\ntype AddPostFormValuesType = {\n    newMessageText: string\n}\n\ntype AddMessageFormPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\ntype OnSubmitParamsType = {\n    setSubmitting: (isSubmitting: boolean) => void\n    resetForm: (nextState?: Partial<FormikState<{ newMessageText: string; }>> | undefined) => void\n}\n\nexport const AddMessageForm = memo(({addMessage}: AddMessageFormPropsType) => {\n\n    const onSubmitHandler = (values: AddPostFormValuesType, {setSubmitting, resetForm}: OnSubmitParamsType) => {\n        values.newMessageText.trim() && addMessage(values.newMessageText);\n        setSubmitting(false)\n        resetForm()\n    }\n    const onAddMessageWithEnter = (e: KeyboardEvent<HTMLFormElement>,\n                                   handleSubmit: (e?: FormEvent<HTMLFormElement> | undefined) => void) => {\n        if (!e.shiftKey && e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit()\n        }\n    };\n\n    return (\n        <Formik\n            initialValues={{newMessageText: '',}}\n            onSubmit={onSubmitHandler}>\n            {({isSubmitting, handleSubmit}) => (\n                <Form className={styleModule.writeAndSendMessage}\n                      onSubmit={handleSubmit}\n                      onKeyPress={(e) => onAddMessageWithEnter(e, handleSubmit)}>\n                    <div className={styleModule.writeMessage}>\n                        <Field name=\"newMessageText\" component={TextAreaField}/>\n                    </div>\n                    <div className={styleModule.sendMessage}>\n                        <Button name={'Send'}\n                                type={'submit'}\n                                disabled={isSubmitting}\n                                background={'#2563EB'}\n                                backgroundHover={'#1F4DAA'}/>\n                    </div>\n                </Form>\n\n\n            )}\n        </Formik>\n    );\n})\n\n\nconst TextAreaField = memo((props: any) => {\n    return (\n        <Textarea {...props}\n                  placeholder={'Enter your message'}\n                  background={'#ffffff'}\n                  color={'#60575A'}/>\n    )\n})\n\n\n\n\n\n","import React, {useState} from \"react\";\nimport {Dialog} from \"./Dialog/Dialog\";\nimport {Message} from \"./Mesage/Message\";\nimport styleModule from './Dialogs.module.css';\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {AddMessageForm} from '../forms/AddMessageForm/AddMessageForm';\nimport {useParams} from 'react-router-dom';\n\n\nconst MESSAGE_STYLE = {\n    background: '#F3F4F6',\n    color: '#374151',\n    meBackground: '#2563EB',\n    meColor: '#FFF5FA',\n};\nconst DIALOG_STYLE = {\n    background: 'inherit',\n    color: '#000000'\n};\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n    const [activeDialogId, setActiveDialogId] = useState(0);\n    const activeDialog = props.dialogsPage.dialogsData.filter(d => d.userId === activeDialogId)[0]\n    const messagesByUser = props.dialogsPage.messagesData.filter(m => {\n        return m.userId === activeDialogId ||  m.userId === props.myUserId\n    });\n    const params = useParams<'*'>()\n    return (\n        <div className={styleModule.dialogs}>\n            <div className={styleModule.dialogsContainer}>\n                <div className={params['*'] ?\n                    styleModule.dialogs_items :\n                    `${styleModule.dialogs_items} ${styleModule.full}`}>\n                    {props.dialogsPage.dialogsData.map(dialog => <Dialog key={dialog.id}\n                                                                         background={DIALOG_STYLE.background}\n                                                                         color={DIALOG_STYLE.color}\n                                                                         setActiveDialogId={setActiveDialogId}\n\n                                                                         {...dialog}/>)}\n                </div>\n                {params['*'] &&\n                <>\n                    <div className={styleModule.messagesBlock}>\n                        <div className={styleModule.messagesHeader}>\n                            <Dialog forDialogTitle={true} {...activeDialog}/>\n                        </div>\n                        <div className={styleModule.messages}>\n                            {messagesByUser.map(message => <Message key={message.id}\n                                                                    background={MESSAGE_STYLE.background}\n                                                                    color={MESSAGE_STYLE.color}\n                                                                    meBackground={MESSAGE_STYLE.meBackground}\n                                                                    meColor={MESSAGE_STYLE.meColor}\n                                                                    myUserId={props.myUserId}\n                                                                    myAvatar={props.avatar}\n                                                                    {...message}/>)}\n                        </div>\n                        <AddMessageForm addMessage={props.addMessage}/>\n\n                    </div>\n                </>\n                }\n            </div>\n        </div>\n    );\n})\n\n","import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\n\r\nconst mapStateToPropsAuth = (state:AppStateType):WithAuthRedirectComponentType => ({\r\n    isAuth:state.auth.isAuth\r\n})\r\ntype WithAuthRedirectComponentType = {\r\n    isAuth:boolean\r\n}\r\n\r\nexport const withAuthRedirect = (WrappedComponent: typeof React.Component | React.FC) => {\r\n\r\n    const WithAuthRedirectComponent = (props:WithAuthRedirectComponentType) => {\r\n        if(!props.isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return (\r\n            <WrappedComponent {...props}/>\r\n        )\r\n    }\r\n    return connect(mapStateToPropsAuth)(WithAuthRedirectComponent)\r\n}","import {AppStateType} from \"../redux-store\";\r\nexport const getAuthUserIDSelector = (state: AppStateType):null | number => {\r\n    return state.auth.id\r\n}\r\nexport const getIsAuthSelector = (state: AppStateType):boolean => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getEmailSelector = (state: AppStateType):null | string => {\r\n    return state.auth.email\r\n}\r\nexport const getLoginSelector = (state: AppStateType):null | string => {\r\n    return state.auth.login\r\n}\r\nexport const getAvatarSelector = (state: AppStateType):null | string => {\r\n    return state.auth.avatar\r\n}\r\nexport const getFullNameSelector = (state: AppStateType):null | string => {\r\n    return state.auth.fullName\r\n}","import React, {ComponentType} from \"react\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {addMessage, InitialStateDialogsType,} from \"../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {getAuthUserIDSelector, getAvatarSelector, getIsAuthSelector} from '../../redux/selectors/authSelectors';\n\nexport type MapStateToPropsType = {\n    dialogsPage: InitialStateDialogsType\n    isAuth: boolean\n    myUserId: number | null\n    avatar: string | null\n}\n\nexport type MapDispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: getIsAuthSelector(state),\n        myUserId: getAuthUserIDSelector(state),\n        avatar: getAvatarSelector(state),\n    }\n}\n\nexport const DialogsContainer = compose<ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {addMessage} as MapDispatchToPropsType),\n)(Dialogs)\n\n\n","import React from \"react\";\nimport styleModule from \"./User.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../redux/redusers/usersReducer/usersReducer\";\nimport {Avatar} from '../../generic/Avatar/Avatar';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faUserMinus} from '@fortawesome/free-solid-svg-icons/faUserMinus';\nimport {faUserPlus} from '@fortawesome/free-solid-svg-icons/faUserPlus';\n\n\ntype UserPropsType = {\n    /**\n     * Callbock that add someone user in followers\n     */\n    becomeFollower: (userID: number) => void\n    /**\n     * Callbock that remove someone user from followers\n     */\n    stopBeingFollower: (userID: number) => void\n    followingInProcessUsersId: number[]\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n    background?: string\n    color?: string\n} & UserType\n\nexport const User = React.memo((props: UserPropsType) => {\n\n    //is follow button disabled?\n    const isFollowingButtonDisabled = props.followingInProcessUsersId.includes(props.id)\n\n    return (\n        <div className={styleModule.userWrapper}>\n            <div className={styleModule.avatar}>\n                <NavLink to={`/profile/${props.id}`}>\n                    <Avatar style={{width: '90px', height: '90px'}} photo={props.photos.small}/>\n                </NavLink>\n                <div className={styleModule.followed}>\n                    {props.followed ?\n                        <button disabled={isFollowingButtonDisabled}\n                                onClick={() => props.stopBeingFollower(props.id)}>\n                            <FontAwesomeIcon icon={faUserMinus}/>\n                        </button> :\n                        <button disabled={isFollowingButtonDisabled}\n                                onClick={() => props.becomeFollower(props.id)}>\n                            <FontAwesomeIcon icon={faUserPlus}/>\n                        </button>\n                    }\n                </div>\n            </div>\n            <p className={styleModule.fullName}>\n                {props.name}\n            </p>\n        </div>\n    )\n})\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent, memo} from 'react'\r\nimport style from './Select.module.scss'\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst Select: React.FC<SuperSelectPropsType> = memo((\r\n    {\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions: any[] = options ? options.map(o => <option value={o} key={o}>{o}</option>) : []; // map options with key\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n                <select className={style.selectControl} value={value} onChange={onChangeCallback} {...restProps}>\r\n                    {mappedOptions}\r\n                </select>\r\n    )\r\n})\r\n\r\nexport default Select\r\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport styleModule from './Paginator.module.scss';\r\nimport Select from '../Select/Select';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faAngleLeft} from '@fortawesome/free-solid-svg-icons/faAngleLeft';\r\nimport {faAngleRight} from '@fortawesome/free-solid-svg-icons/faAngleRight';\r\n\r\n\r\nexport type PaginatorPropsType = {\r\n    portionSize: number\r\n    currentPage: number\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    onChangePage: (pageNumber: number) => void\r\n    onChangePageSize?: (pageSize: number) => void\r\n}\r\n\r\nexport const Paginator = React.memo(({portionSize = 12, ...props}: PaginatorPropsType) => {\r\n\r\n\r\n    const {pageCount, pages} = useMemo(() => {\r\n        let pages: Array<number> = [];\r\n        let pageCount: number;\r\n        pageCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            pages.push(i)\r\n        }\r\n        return {pageCount, pages}\r\n\r\n\r\n    }, [props.totalItemsCount, props.pageSize]);\r\n\r\n    const itemsCounts = [10, 20, 30, 40, 50, 100];\r\n\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const portionCount: number = Math.ceil(pageCount / portionSize);\r\n    let leftPortionPageNumber: number = useMemo(() => {\r\n        return portionSize * (portionNumber - 1) + 1\r\n    }, [portionSize,\r\n        portionNumber])\r\n    const rightPortionPageNumber: number = useMemo(() => {\r\n        return portionSize * portionNumber;\r\n    }, [portionSize, portionNumber]);\r\n\r\n    useEffect(() => {\r\n        if (props.currentPage > portionSize * portionNumber) {\r\n            const currentPortionNumber = Math.floor(props.currentPage / portionSize +1)\r\n            setPortionNumber(currentPortionNumber)\r\n        }\r\n    }, [props.currentPage])\r\n    return (\r\n        <div className={styleModule.paginator}>\r\n            {portionNumber > 1 && <span className={styleModule.firstPage} onClick={() => {\r\n                setPortionNumber(1)\r\n            }}>{\"First\"}</span>}\r\n            {portionNumber > 1 && <span className={styleModule.pagesToBack} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faAngleLeft}/>\r\n            </span>}\r\n            {portionNumber > 1 && <span className={styleModule.threeDots}>{\"...\"}</span>}\r\n\r\n            {pages.filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n                .map(page => <span key={page}\r\n                                   className={props.currentPage === page ? `${styleModule.pageNumber} ${styleModule.selectedPageNumber}` : styleModule.pageNumber}\r\n                                   onClick={() => {\r\n                                       props.onChangePage(page)\r\n                                   }}>{page}</span>\r\n                )}\r\n\r\n            {portionNumber < portionCount && <span className={styleModule.threeDots}>{\"...\"}</span>}\r\n            {portionNumber < portionCount && <span className={styleModule.pagesToForward} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>\r\n                <FontAwesomeIcon icon={faAngleRight}/>\r\n            </span>}\r\n            {portionNumber < portionCount && <span className={styleModule.lastPage} onClick={() => {\r\n                setPortionNumber(portionNumber = portionCount)\r\n            }}>{\"Last\"}</span>}\r\n            <div className={styleModule.pageCountSettings}>\r\n                Show\r\n                <span className={styleModule.select}>\r\n                <Select options={itemsCounts}\r\n                        value={props.pageSize}\r\n                        onChangeOption={props.onChangePageSize}/>\r\n                </span>\r\n                items per page\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React from \"react\";\nimport styleModule from './Preloader.module.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\ntype PreloaderPropsType = {\n    size: string\n    color: string\n}\n\n\nexport const Preloader = ({size, color}: PreloaderPropsType) => {\n    return (\n        <div className={styleModule.preloaderBlock}>\n            <FontAwesomeIcon style={{fontSize: size, color: color}} className={styleModule.preloaderIcon}\n                             icon={faSpinner}/>\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './Users.module.css';\nimport {User} from \"./User/User\";\nimport {Paginator} from \"../generic/Paginator/Paginator\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {UsersApiContainerPropsType} from \"./UsersContainer\";\n\n\ntype UsersPropsType = UsersApiContainerPropsType & {\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Users = React.memo((props: UsersPropsType) => {\n    const {\n        users,\n        becomeFollower,\n        stopBeingFollower,\n        usersTotalCount,\n        pageSize,\n        currentPage,\n        onChangePage,\n        isFetching,\n        followingInProcessUsersId,\n        toggleFollowingInProcess,\n    } = props\n\n    let userElements = users.map(user => <User key={user.id}\n                                               {...user}\n                                               becomeFollower={becomeFollower}\n                                               stopBeingFollower={stopBeingFollower}\n                                               followingInProcessUsersId={followingInProcessUsersId}\n                                               toggleFollowingInProcess={toggleFollowingInProcess}/>);\n    return (\n        <div className={styleModule.usersWrapper}>\n            {isFetching ? <Preloader size={'30px'} color={'#5B48E3'}/> :\n                <div className={styleModule.usersBlock}>\n                    {userElements}\n                </div>}\n            <div className={styleModule.paginatorBlock}>\n                <Paginator portionSize={5}\n                           currentPage={currentPage}\n                           pageSize={pageSize}\n                           totalItemsCount={usersTotalCount}\n                           onChangePage={onChangePage}/>\n            </div>\n        </div>\n    )\n})\n\n\n\n","import {profileAPI, RESPONSE_RESULT_CODES, usersAPI} from \"../../../api/api\";\r\nimport {AppThunk} from \"../../redux-store\";\r\nimport {UserType} from '../usersReducer/usersReducer';\r\n\r\nexport enum PROFILE_ACTIONS_TYPES {\r\n    ADD_POST = 'social/profile/ADD-POST',\r\n    REMOVE_POST = \"social/profile/REMOVE_POST\",\r\n    LIKE_POST = 'social/profile/LIKE_POST',\r\n    SET_PROFILE = 'social/profile/SET_PROFILE',\r\n    SET_STATUS = 'social/profile/SET_STATUS',\r\n    SET_FOLLOWERS = 'social/profile/SET_FOLLOWERS',\r\n    DELETE_FOLLOWER = 'social/profile/DELETE_FOLLOWER',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    name: string | null\r\n    message: string\r\n    likes: {\r\n        icon: string\r\n        likeCount: number\r\n    }\r\n    isLike: boolean\r\n    image: string | null\r\n    background?: string\r\n    color?: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null,\r\n}\r\nexport type PhotosType = {\r\n    small: string | null,\r\n    large: string | null,\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type InitialStateProfileType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deleniti, eum.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Mariya',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur cumque harum illo inventore maiores minus mollitia, quaerat quis rem voluptatibus.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: null\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ivan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis est, et labore laborum nemo nisi.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 87,\r\n            },\r\n            isLike: true,\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album'\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    followers: [] as UserType[]\r\n};\r\n\r\nexport const profileReducer = (state: InitialStateProfileType = initialState, action: ProfileActionType): InitialStateProfileType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTIONS_TYPES.ADD_POST:\r\n            const newPost = {\r\n                id: state.postsData.length + 1,\r\n                name: action.payload.fullName,\r\n                message: action.payload.newPostText,\r\n                likes: {\r\n                    icon: '❤',\r\n                    likeCount: 0,\r\n                },\r\n                isLike: false,\r\n                image: action.payload.avatar\r\n            };\r\n            return {...state, postsData: [newPost, ...state.postsData]}\r\n        case PROFILE_ACTIONS_TYPES.SET_PROFILE:\r\n        case PROFILE_ACTIONS_TYPES.SET_STATUS:\r\n            return {...state, ...action.payload}\r\n        case PROFILE_ACTIONS_TYPES.REMOVE_POST:\r\n            return (\r\n                {...state, postsData: state.postsData.filter(p => p.id !== action.payload.id)}\r\n            );\r\n        case PROFILE_ACTIONS_TYPES.LIKE_POST:\r\n            return (\r\n                {\r\n                    ...state, postsData: state.postsData.map(p => p.id === action.payload.id ?\r\n                        {\r\n                            ...p, isLike: !p.isLike, likes:\r\n                                {...p.likes, likeCount: p.isLike ? p.likes.likeCount - 1 : p.likes.likeCount + 1}\r\n                        } : p)\r\n                }\r\n            )\r\n        case PROFILE_ACTIONS_TYPES.SET_FOLLOWERS:\r\n            const followers = action.payload.followers.filter(user => user.followed)\r\n            return {\r\n                ...state, followers: followers\r\n            }\r\n        case PROFILE_ACTIONS_TYPES.DELETE_FOLLOWER:\r\n            return {\r\n                ...state, followers: state.followers.filter(f => f.id !== action.payload.followerId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport type ProfileActionType =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof removePost> |\r\n    ReturnType<typeof likePost> |\r\n    ReturnType<typeof setProfile> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof setFollowers> |\r\n    ReturnType<typeof deleteFollower>\r\n\r\n//A C T I O N S   C R E A T O R S\r\nexport const addPost = (newPostText: string, fullName: string | null, avatar: string | null) => ({\r\n    type: PROFILE_ACTIONS_TYPES.ADD_POST,\r\n    payload: {newPostText, fullName, avatar}\r\n} as const);\r\nexport const removePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.REMOVE_POST, payload: {id}} as const);\r\nexport const likePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.LIKE_POST, payload: {id}} as const);\r\nexport const setProfile = (profile: ProfileType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_PROFILE,\r\n    payload: {profile}\r\n} as const);\r\nexport const setStatus = (status: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_STATUS,\r\n    payload: {status}\r\n} as const);\r\nexport const setFollowers = (followers: UserType[]) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_FOLLOWERS, payload: {followers}\r\n} as const);\r\nexport const deleteFollower = (followerId: number) => ({\r\n    type: PROFILE_ACTIONS_TYPES.DELETE_FOLLOWER, payload: {followerId}\r\n} as const);\r\n\r\n//T H U N K S\r\nexport const getProfile = (userId: number): AppThunk => (dispatch, getState) => {\r\n    profileAPI.getProfile(userId)\r\n        .then(data => {\r\n            dispatch(setProfile(data))\r\n        })\r\n}\r\nexport const getStatus = (userId: number): AppThunk => dispatch => {\r\n    profileAPI.getStatus(userId)\r\n        .then(data => {\r\n            dispatch(setStatus(data))\r\n        })\r\n}\r\nexport const updateStatus = (status: string): AppThunk => dispatch => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if (response.data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}\r\nexport const getFollowers = (): AppThunk => (dispatch, getState) => {\r\n    usersAPI.getUsers(100, 1)\r\n        .then(data => {\r\n            const currentPage = Math.ceil(data.totalCount / 100)\r\n            return usersAPI.getUsers(100, currentPage)\r\n        })\r\n        .then(data => {\r\n            dispatch(setFollowers(data.items))\r\n        })\r\n}\r\n\r\n\r\n","import {AppThunk} from \"../../redux-store\";\r\nimport {RESPONSE_RESULT_CODES, usersAPI} from \"../../../api/api\";\r\nimport {deleteFollower} from '../profileReducer/profileReducer';\r\n\r\nexport enum USERS_ACTIONS_TYPES {\r\n    FOLLOW = 'social/users/FOLLOW',\r\n    UNFOLLOW = 'social/users/UNFOLLOW',\r\n    SET_USERS = 'social/users/SET_USERS',\r\n    SET_CURRENT_PAGE = 'social/users/SET_CURRENT_PAGE',\r\n    SET_USERS_TOTAL_COUNT = 'social/users/SET_USERS_TOTAL_COUNT',\r\n    SET_IS_FETCHING_VALUE = 'social/users/SET_IS_FETCHING_VALUE',\r\n    TOGGLE_FOLLOWING_IN_PROCESS = 'social/users/TOGGLE_FOLLOWING_IN_PROCESS',\r\n\r\n}\r\n\r\nexport type UserPhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nexport type UserType = {\r\n    /**\r\n     * User name\r\n     */\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    /**\r\n     * User photos\r\n     */\r\n    photos: UserPhotoType\r\n    /**\r\n     * User status\r\n     */\r\n    status: null | string,\r\n    /**\r\n     * Value that indicates if you are following this user\r\n     */\r\n    followed: boolean\r\n}\r\n\r\nexport type InitialStateUsersType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    usersTotalCount: 0,\r\n    pageSize: 24,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProcessUsersId: [] as Array<number>\r\n}\r\n\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: UsersActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case USERS_ACTIONS_TYPES.SET_USERS:\r\n            return {\r\n                ...state, users: action.payload.users\r\n            }\r\n        case USERS_ACTIONS_TYPES.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: true} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: false} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n        case USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT:\r\n        case USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS:\r\n            return {\r\n                ...state, followingInProcessUsersId: action.payload.followingInProcess ?\r\n                    [...state.followingInProcessUsersId, action.payload.userId] :\r\n                    state.followingInProcessUsersId.filter(id => id !== action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setUsersTotalCount> |\r\n    ReturnType<typeof setIsFetchingValue> |\r\n    ReturnType<typeof toggleFollowingInProcess>\r\n\r\n//A C T I O N S  C R E A T O R S\r\nexport const follow = (userID: number) => ({type: USERS_ACTIONS_TYPES.FOLLOW, payload: {userID}} as const)\r\nexport const unfollow = (userID: number) => ({type: USERS_ACTIONS_TYPES.UNFOLLOW, payload: {userID}} as const)\r\nexport const setUsers = (users: UserType[]) => ({type: USERS_ACTIONS_TYPES.SET_USERS, payload: {users}} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {currentPage}\r\n} as const)\r\nexport const setUsersTotalCount = (usersTotalCount: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT,\r\n    payload: {usersTotalCount}\r\n} as const)\r\nexport const setIsFetchingValue = (isFetching: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE, payload: {isFetching}\r\n} as const)\r\nexport const toggleFollowingInProcess = (userId: number, followingInProcess: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS,\r\n    payload: {userId, followingInProcess}\r\n} as const)\r\n\r\n//T H U N K S\r\n\r\nexport const getUsers = (pageSize: number, currentPage: number): AppThunk => dispatch => {\r\n    dispatch(setIsFetchingValue(true))\r\n    usersAPI.getUsers(pageSize, currentPage)\r\n        .then(data => {\r\n            dispatch(setIsFetchingValue(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setUsersTotalCount(data.totalCount))\r\n        })\r\n}\r\nexport const repeatGetUsers = (pageSize: number, pageNumber: number): AppThunk => dispatch => {\r\n    dispatch(setCurrentPage(pageNumber))\r\n    dispatch(setIsFetchingValue(true))\r\n    usersAPI.getUsers(pageSize, pageNumber).then(data => {\r\n        dispatch(setIsFetchingValue(false))\r\n        dispatch(setUsers(data.items))\r\n    })\r\n}\r\nexport const becomeFollower = (id: number): AppThunk => dispatch => {\r\n    dispatch(toggleFollowingInProcess(id, true))\r\n    usersAPI.becomeFollower(id).then(data => {\r\n        if (data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n            dispatch(follow(id))\r\n        }\r\n        dispatch(toggleFollowingInProcess(id, false))\r\n    })\r\n}\r\n\r\nexport const stopBeingFollower = (id: number): AppThunk => dispatch => {\r\n    dispatch(toggleFollowingInProcess(id, true))\r\n    usersAPI.stopBeingFollower(id).then(data => {\r\n        if (data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n            dispatch(unfollow(id))\r\n            dispatch(deleteFollower(id))\r\n        }\r\n        dispatch(toggleFollowingInProcess(id, false))\r\n    })\r\n}\r\n\r\n","//hoc for getting params\r\nimport React from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component | React.FC) => {\r\n    const ComponentWithRouter = (props: object) => {\r\n        const params = useParams<'*'>() //... <= profile/*\r\n        const navigate = useNavigate();\r\n        return (\r\n            <WrappedComponent {...props} params={params} navigate={navigate}/>\r\n        )\r\n    }\r\n    return ComponentWithRouter\r\n}","import {authMeAPI, AuthUserDataType, profileAPI, RESPONSE_RESULT_CODES} from \"../../../api/api\";\r\nimport {AppThunk, GetStateType} from \"../../redux-store\";\r\nimport {getFollowers, ProfileType, setProfile} from '../profileReducer/profileReducer';\r\n\r\n\r\nexport enum AUTH_ACTIONS_TYPES {\r\n    SET_AUTH_USER_DATA = 'social/auth/SET_AUTH_USER_DATA',\r\n    SET_FULL_NAME_AND_AVATAR = 'social/auth/SET_FULL_NAME_AND_AVATAR',\r\n}\r\n\r\nexport type InitialStateAuthType = typeof initialState\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    fullName: null as null | string,\r\n    avatar: null as null | string\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA:\r\n        case AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AuthActionType =\r\n    ReturnType<typeof setAuthUserData> |\r\n    ReturnType<typeof setFullNameAndAvatar>\r\n\r\n// A C T I O N S\r\n\r\nexport const setAuthUserData = ({id, email, login}: AuthUserDataType, isAuth: boolean) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n})\r\nexport const setFullNameAndAvatar = (fullName: string, avatar: string | null) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR,\r\n    payload: {fullName, avatar}\r\n})\r\n\r\n// T H U N K S\r\n\r\nexport const getAuthorizationInfo = (): AppThunk => (dispatch, getState: GetStateType) => {\r\n    let id;\r\n    return authMeAPI.getAuthorizationInfo()\r\n        .then(data => {\r\n            if (data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n                dispatch(setAuthUserData(data.data, true))\r\n            }\r\n        })\r\n        .then(() => {\r\n            id = getState().auth.id\r\n            if (id) {\r\n                return profileAPI.getProfile(id)\r\n            }\r\n        })\r\n        .then(data => {\r\n            const fullName = data?.fullName\r\n            const avatar = data?.photos.small\r\n            dispatch(setFullNameAndAvatar(fullName as string, avatar as string))\r\n            dispatch(setProfile(data as ProfileType))\r\n        })\r\n        .then(() => {\r\n            dispatch(getFollowers())\r\n        })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, setStatus: (status?: any) => void): AppThunk => dispatch => {\r\n    authMeAPI.login(email, password, rememberMe)\r\n        .then(data => {\r\n            if (data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n                dispatch(getAuthorizationInfo())\r\n            } else {\r\n                const message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n                setStatus(message)\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport const logout = (): AppThunk => dispatch => {\r\n    authMeAPI.logout()\r\n        .then(data => {\r\n            if (data.resultCode === RESPONSE_RESULT_CODES.success) {\r\n                dispatch(setAuthUserData({id: null, email: null, login: null}, false))\r\n            }\r\n        })\r\n}","import {AppStateType} from \"../redux-store\";\r\nimport {UserType} from '../redusers/usersReducer/usersReducer';\r\nimport {createSelector} from 'reselect';\r\n\r\nexport const getUsersSelector = (state: AppStateType): UserType[] => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsersDiffSelector = createSelector(getUsersSelector, (users:UserType[])=>{\r\n    return users.filter(user=> user.followed)\r\n})\r\nexport const getUsersTotalCountSelector = (state: AppStateType): number => {\r\n    return state.usersPage.usersTotalCount\r\n}\r\nexport const getPageSizeSelector = (state: AppStateType): number => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPageSelector = (state: AppStateType): number => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetchingSelector = (state: AppStateType): boolean => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProcessUsersIdSelector = (state: AppStateType): number[] => {\r\n    return state.usersPage.followingInProcessUsersId\r\n}","import {connect} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    becomeFollower,\n    getUsers,\n    repeatGetUsers,\n    stopBeingFollower,\n    toggleFollowingInProcess,\n    UserType\n} from \"../../redux/redusers/usersReducer/usersReducer\";\nimport React from \"react\";\nimport {\n    getCurrentPageSelector,\n    getFollowingInProcessUsersIdSelector,\n    getIsFetchingSelector,\n    getPageSizeSelector,\n    getUsersSelector,\n    getUsersTotalCountSelector\n} from '../../redux/selectors/usersSelectors';\n\n\nclass UsersApiContainer extends React.PureComponent<UsersApiContainerPropsType> {\n\n    componentDidMount(): void {\n        const {currentPage, pageSize, getUsers} = this.props\n        //get request for getting users (with thunk)\n        getUsers(pageSize, currentPage)\n\n    }\n\n    // action for pressing on page number\n    onChangePage = (pageNumber: number) => {\n        const {pageSize, repeatGetUsers,} = this.props\n        repeatGetUsers(pageSize, pageNumber)\n    }\n\n    render() {\n        return (\n            <Users {...this.props}\n                   onChangePage={this.onChangePage}\n            />\n        )\n    }\n}\n\n//functionality for redux\n\ntype MapStateToPropsType = {\n    users: UserType[],\n    usersTotalCount: number,\n    pageSize: number,\n    currentPage: number\n    isFetching: boolean\n    followingInProcessUsersId: number[]\n}\ntype MapDispatchToPropsType = {\n    becomeFollower: (userID: number) => void\n    stopBeingFollower: (userID: number) => void\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n    getUsers: (pageSize: number, currentPage: number) => void\n    repeatGetUsers: (pageSize: number, pageNumber: number) => void\n}\n\nexport type UsersApiContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        users: getUsersSelector(state),\n        usersTotalCount: getUsersTotalCountSelector(state),\n        pageSize: getPageSizeSelector(state),\n        currentPage: getCurrentPageSelector(state),\n        isFetching: getIsFetchingSelector(state),\n        followingInProcessUsersId: getFollowingInProcessUsersIdSelector(state),\n    }\n}\n\nexport const UsersContainer = connect(mapStateToProps, {\n    becomeFollower,\n    stopBeingFollower,\n    toggleFollowingInProcess,\n    getUsers,\n    repeatGetUsers,\n} as MapDispatchToPropsType)(UsersApiContainer)","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport s from './InputText.module.css'\r\nimport {CSSTransition} from 'react-transition-group';\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    customStyle?: string\r\n    field?: any\r\n    form?: any\r\n    meta?: any\r\n    name?: string\r\n}\r\n\r\nconst InputText: React.FC<InputTextPropsType> = memo((\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, name, title,\r\n        customStyle, field, form, meta,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    };\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    };\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\r\n    const finalInputClassName = `${error || form?.errors[field.name] ? `${s.errorInput} ${s.superInput}` : s.superInput} ${className ? s[className] : className}`;\r\n    return (\r\n        <div className={customStyle ? `${customStyle} ${s.inputWrapper}` : s.inputWrapper}>\r\n            <input name={name}\r\n                   type={type}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={finalInputClassName}\r\n                   {...field}\r\n                   {...restProps}\r\n            />\r\n            <CSSTransition in={error || form?.errors[field.name] && form?.touched[field.name]}\r\n                           timeout={300}\r\n                           classNames={s}\r\n                           unmountOnExit\r\n                           mountOnEnter>\r\n                <div className={finalSpanClassName}>{form?.errors[field.name]}</div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default InputText\r\n","import React, {DetailedHTMLProps, HTMLAttributes, InputHTMLAttributes} from 'react'\r\nimport style from './EditableSpan.module.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport InputText from \"../InputText/InputText\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\n\r\ntype EditableSpanType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    spanProps?: DefaultSpanPropsType\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n}\r\n\r\nclass EditableSpan extends React.Component<EditableSpanType> {\r\n    state: StateType = {\r\n        editMode: false\r\n    }\r\n    onEnterCallback = () => {\r\n        const {onEnter} = this.props\r\n        this.setState({\r\n            editMode: false\r\n        } as StateType);\r\n        onEnter && onEnter()\r\n    };\r\n    onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        const {onBlur} = this.props\r\n        this.setState({\r\n            editMode: false\r\n        } as StateType);\r\n        onBlur && onBlur(e)\r\n    };\r\n    onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const {onDoubleClick} = this.props.spanProps || {}\r\n        this.setState({\r\n            editMode: true\r\n        } as StateType);\r\n        onDoubleClick && onDoubleClick(e)\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            autoFocus,\r\n            onBlur,\r\n            onEnter,\r\n            spanProps,\r\n            ...restProps\r\n        } = this.props;\r\n        const {children, className, ...restSpanProps} = spanProps || {};\r\n        const spanClassName = `${style.editSpan} ${className}`;\r\n\r\n        return (\r\n            <div className={style.editableSpanWrapper}>\r\n                <CSSTransition in={this.state.editMode}\r\n                               timeout={400}\r\n                               classNames={style}\r\n                               unmountOnExit\r\n                               mountOnEnter>\r\n                    <div className={style.inputWrapper}>\r\n                        <InputText\r\n                            className={'forStatus'}\r\n                            autoFocus\r\n                            onBlur={this.onBlurCallback}\r\n                            onEnter={this.onEnterCallback}\r\n                            onDoubleClick={this.onDoubleClickCallBack}\r\n                            error={restProps.error}\r\n                            customStyle={style.inputStyle}\r\n                            {...restProps}/>\r\n                    </div>\r\n                </CSSTransition>\r\n                <CSSTransition in={!this.state.editMode}\r\n                               timeout={500}\r\n                               classNames={style}\r\n                               unmountOnExit\r\n                               mountOnEnter>\r\n                    <div className={style.spanWrapper}>\r\n                    <span onDoubleClick={this.onDoubleClickCallBack}\r\n                          className={spanClassName}\r\n                          {...restSpanProps}>\r\n                        {children || restProps.value}\r\n                        <FontAwesomeIcon className={style.editPen} icon={faPencilAlt}/>\r\n                    </span>\r\n                    </div>\r\n                </CSSTransition>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditableSpan\r\n","import React, {memo, useEffect, useState} from \"react\";\nimport styleModule from './ProfileStatusHooks.module.css';\nimport EditableSpan from \"../../generic/EditableSpan/EditableSpan\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusHooks = memo(({status, updateStatus}: ProfileStatusPropsType) => {\n    const [localStatus, setLocalStatus] = useState(status);\n    const onBlurEnterCallback = () => {\n        updateStatus(localStatus)\n    }\n    useEffect(() => {\n        setLocalStatus(status)\n    }, [status])\n    return (\n        <div className={styleModule.profileStatus}>\n            <EditableSpan\n                value={localStatus}\n                onChangeText={setLocalStatus}\n                spanProps={{children: status ? undefined : 'enter status...'}}\n                onBlur={onBlurEnterCallback}\n                onEnter={onBlurEnterCallback}/>\n        </div>\n    )\n});\n\n","import React from \"react\";\nimport styleModule from './ProfileInfo.module.css';\nimport {ProfileAPIContainerPropsType} from \"../ProfileContainer\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {Avatar} from '../../generic/Avatar/Avatar';\nimport userAvatar from '../../../assets/user-solid.svg'\nimport {Button} from '../../generic/Button/Button';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {addDialog} from '../../../redux/redusers/dialogsReducer/dialogsReducer';\nimport {ProfileStatusHooks} from '../ProfileStatusHooks/ProfileStatusHooks';\n\ntype ProfileInfoPropsType = ProfileAPIContainerPropsType\n\nexport const ProfileInfo = React.memo(({\n                                           profile,\n                                           status,\n                                           updateStatus,\n                                       }: ProfileInfoPropsType) => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const myUserId = useSelector((state: AppStateType) => state.auth.id);\n    const newDialogId = useSelector((state: AppStateType) => state.dialogsPage.dialogsData.length + 1);\n    const params = useParams();\n    const isMyProfile = params['*'] === myUserId?.toString() || params['*'] === '*' || !params['*'];\n    const onSendMessageHandler = () => {\n        dispatch(addDialog(profile?.fullName as string, profile?.userId as number, profile?.photos.small as string))\n        navigate(`/dialogs/${newDialogId}`)\n    }\n    return (\n        <div className={styleModule.profileInfo}>\n            <div className={styleModule.avatar}>\n                <Avatar photo={profile?.photos.large || userAvatar}\n                        style={{width: '200px', height: '200px'}}/>\n            </div>\n            <div className={styleModule.description}>\n                <div className={styleModule.fullName}>{profile?.fullName}</div>\n                <div className={styleModule.status}>\n                    <span className={styleModule.title}>Status:</span>\n                    <div className={styleModule.statusContent}>\n                        {isMyProfile ? <ProfileStatusHooks status={status} updateStatus={updateStatus}/> :\n                            <span className={styleModule.withoutEdit}>{status}</span>\n                        }\n                    </div>\n                </div>\n\n                <div className={styleModule.aboutMe}>\n                    <span className={styleModule.title}>About me:</span> {profile?.aboutMe}\n                </div>\n                <div className={styleModule.lookingForAJob}>\n                    <div className={styleModule.statusJob}>\n                        <span className={styleModule.title}>Open to work:</span>\n                        <div className={styleModule.logo}>{profile?.lookingForAJob ?\n                            <FontAwesomeIcon icon={faCheck} className={styleModule.iconYes}/> :\n                            <FontAwesomeIcon icon={faTimes} className={styleModule.iconNot}/>}\n                        </div>\n                    </div>\n                    <div className={styleModule.descriptionJob}>\n                            <span\n                                className={styleModule.title}>Job description:</span> {profile?.lookingForAJobDescription}\n                    </div>\n                </div>\n                {!isMyProfile && <div className={styleModule.buttonsBlock}>\n                    <Button name={'Send message'}\n                            onClick={onSendMessageHandler}/>\n                </div>}\n            </div>\n        </div>\n    )\n});\n\n","import React from \"react\";\nimport styleModule from './Post.module.css'\nimport ava_post from '../../../../usersAvatars/user.png'\nimport {PostType} from \"../../../../redux/redusers/profileReducer/profileReducer\";\nimport styled from \"styled-components\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Avatar} from '../../../generic/Avatar/Avatar';\n\n\ntype PostPropsType = PostType &\n    {\n        removePost: (id: number) => void\n        likePost: (id: number) => void\n    };\n\nexport const Post = React.memo(({\n                                    id,\n                                    name,\n                                    message,\n                                    likes,\n                                    isLike,\n                                    image,\n                                    background,\n                                    color,\n                                    removePost,\n                                    likePost,\n                                    ...props\n                                }: PostPropsType) => {\n    const PostWrapper = styled.div`\n     & {\n        background: ${background ? background : '#ffffff'};\n        color:  ${color ? color : '#0F0F0F'};\n    }\n    `;\n    const LikesDiv = styled.div`\n    color: ${isLike ? '#BE185D' : '#666666'};\n    fontWeight:${isLike ? 'bold' : 'normal'};\n    `\n\n    const onCrossClick = (id: number) => {\n        removePost(id);\n    };\n    const onLikeClick = (id: number) => {\n        likePost(id)\n    }\n\n    return (\n        <PostWrapper className={styleModule.postWrapper}>\n            <div className={styleModule.avaBlock}>\n                <Avatar style={{width:'50px', height:'50px'}} photo={image}/>\n\n                <span>{name}</span>\n                <FontAwesomeIcon icon={faTimes} className={styleModule.removePost} onClick={() => onCrossClick(id)}/>\n            </div>\n            <div className={styleModule.messageBlock}>\n                {message}\n            </div>\n            <LikesDiv>\n                <span onClick={() => onLikeClick(id)}\n                      className={styleModule.likesBlock}>\n                    {`${likes.icon} ${likes.likeCount}`}\n                </span>\n            </LikesDiv>\n        </PostWrapper>\n\n    );\n});\n\n","import React, {FormEvent, KeyboardEvent, memo} from \"react\";\nimport styleModule from './AddPostForm.module.css';\nimport {Button} from \"../../generic/Button/Button\";\nimport {Field, Form, Formik, FormikState} from \"formik\";\nimport {Textarea} from '../../generic/Textarea/Textarea';\n\ntype AddPostFormValuesType = {\n    newPostText: string\n}\n\ntype AddPostFormPropsType = {\n    addPost: (newPostText: string, fullName: string | null, avatar: string | null) => void\n    myUserId: number | null\n    avatar: string | null\n    fullName: string | null\n}\n\ntype OnSubmitParamsType = {\n    setSubmitting: (isSubmitting: boolean) => void\n    resetForm: (nextState?: Partial<FormikState<{ newPostText: string; }>> | undefined) => void\n}\n\nexport const AddPostForm = memo(({addPost, avatar, fullName, myUserId}: AddPostFormPropsType) => {\n\n    const onSubmitHandler = (values: AddPostFormValuesType, {setSubmitting, resetForm}: OnSubmitParamsType) => {\n        values.newPostText.trim() && addPost(values.newPostText, fullName, avatar);\n        setSubmitting(false)\n        resetForm()\n    }\n    const onAddPostWithEnter = (e: KeyboardEvent<HTMLFormElement>,\n                                handleSubmit: (e?: FormEvent<HTMLFormElement> | undefined) => void) => {\n        if (!e.shiftKey && e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit()\n        }\n    };\n\n    return (\n        <Formik\n            initialValues={{newPostText: '',}}\n            onSubmit={onSubmitHandler}\n        >\n            {({isSubmitting, handleSubmit}) => (\n                <Form className={styleModule.formWrapper}\n                      onSubmit={handleSubmit}\n                      onKeyPress={(e) => onAddPostWithEnter(e, handleSubmit)}>\n                    <div className={styleModule.writePost}>\n                        <Field name=\"newPostText\" component={TextAreaField}/>\n                    </div>\n                    <div className={styleModule.addPostButton}>\n                        <Button type={'submit'}\n                                name={'Add post'}\n                                disabled={isSubmitting}/>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n})\n\n\nconst TextAreaField = memo((props: any) => {\n    return (\n        <Textarea {...props}\n                  placeholder={'Here you can leave your post'}\n                  background={'#ffffff'}\n                  color={'#60575A'}/>\n    )\n})\n\n\n\n","import React from \"react\";\nimport styleModule from './MyPosts.module.css'\nimport {Post} from \"./Posts/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {AddPostForm} from '../../forms/AddPostForm/AddPostForm';\nimport {useParams} from 'react-router-dom';\n\n\nexport const BUTTON_STYLE = {\n    BACKGROUND_HOVER: '#ffbf47',\n    BACKGROUND: '#ffe1a9',\n    COLOR_HOVER: '#ffffff'\n};\nexport const POST_STYLE = {\n    background: '#ffffff',\n    color: '#666666'\n};\n\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    const params = useParams();\n    const isMyProfile = params['*'] === props.myUserId?.toString() || params['*'] === '*' || !params['*'];\n\n    return (\n        <div className={styleModule.myPosts}>\n            <p>My posts</p>\n            <AddPostForm addPost={props.addPost}\n                         fullName={props.fullName}\n                         avatar={props.avatar}\n                         myUserId={props.myUserId}\n            />\n            {isMyProfile && <div className={styleModule.posts}>\n                {props.postsData.map(post =>\n                    <Post\n                        key={post.id}\n                        background={POST_STYLE.background}\n                        color={POST_STYLE.color}\n                        removePost={props.removePost}\n                        likePost={props.likePost}\n                        {...post}/>\n                )}\n            </div>\n            }\n        </div>\n    );\n})\n","import {AppStateType} from \"../redux-store\";\r\nimport {PostType, ProfileType} from '../redusers/profileReducer/profileReducer';\r\n\r\nexport const getProfileSelector = (state: AppStateType): ProfileType | null => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getPostsDataSelector = (state: AppStateType): Array<PostType> => {\r\n    return state.profilePage.postsData\r\n}\r\nexport const getStatusSelector = (state: AppStateType): string => {\r\n    return state.profilePage.status\r\n}\r\n","import React from \"react\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPost, likePost, PostType, removePost} from \"../../../redux/redusers/profileReducer/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {getPostsDataSelector} from '../../../redux/selectors/profileSelectors';\nimport {getAuthUserIDSelector, getAvatarSelector, getFullNameSelector} from '../../../redux/selectors/authSelectors';\n\n\nexport type MapStateToPropsType = {\n    postsData: PostType[]\n    myUserId:number | null\n    avatar:string | null\n    fullName: string | null\n}\n\nexport type MapDispatchToPropsType = {\n    addPost: (newPostText: string, fullName: string | null, avatar: string | null) => void\n    removePost: (id: number) => void\n    likePost: (id: number) => void\n}\n\nexport type MyPostsPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    { params: { ['*']: string } }\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        postsData: getPostsDataSelector(state),\n        myUserId: getAuthUserIDSelector(state),\n        fullName: getFullNameSelector(state),\n        avatar: getAvatarSelector(state)\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, {\n    addPost,\n    removePost,\n    likePost,\n} as MapDispatchToPropsType)(MyPosts);\n","import style from './Sidebar.module.scss'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {UserLogo} from '../generic/Avatar/Avatar';\r\nimport {memo, useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {stopBeingFollower} from '../../redux/redusers/usersReducer/usersReducer';\r\n\r\nexport const SideBar = memo(() => {\r\n    const [random, setRandom] = useState(Math.random())\r\n    const followers = useSelector((state: AppStateType) => state.profilePage.followers);\r\n    const randomFollowers = Math.floor(random * (followers.length - 4 + 1));\r\n    const finalFollowers = followers.slice(randomFollowers, randomFollowers + 4)\r\n    return (\r\n        <div className={style.sidebarWrapper}>\r\n            <div className={style.title}>\r\n                Followers\r\n                <span onClick={() => setRandom(Math.random())}>Refresh</span>\r\n            </div>\r\n            <div className={style.content}>\r\n                {finalFollowers.map(follower => <FollowerItem key={follower.id}\r\n                                                              name={follower.name}\r\n                                                              avatar={follower.photos.small}\r\n                                                              status={follower.status}\r\n                                                              id={follower.id}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FollowerItemType = {\r\n    name: string\r\n    avatar: string | null\r\n    status: string | null\r\n    id: number\r\n}\r\nconst FollowerItem = memo(({\r\n                          name,\r\n                          avatar,\r\n                          status,\r\n                          id\r\n                      }: FollowerItemType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={style.itemWrapper}>\r\n            <div className={style.avatar}>\r\n                <NavLink to={`/profile/${id}`}>\r\n                    {avatar ? <img src={avatar} alt=\"Avatar\"/> : <UserLogo/>}\r\n                </NavLink>\r\n            </div>\r\n            <div className={style.nameAndStatus}>\r\n                <span className={style.name}>{name}</span>\r\n                <span className={style.status}>{status}</span>\r\n            </div>\r\n            <div className={style.action}>\r\n                <button onClick={()=>dispatch(stopBeingFollower(id))}>\r\n                    Unfollow\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\nimport styleModule from './Profile.module.css';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileAPIContainerPropsType} from \"./ProfileContainer\";\nimport {SideBar} from '../Sidebar/Sidebar';\nimport {useSelector} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\n\ntype ProfilePropsType = ProfileAPIContainerPropsType\n\nexport const Profile = React.memo((props: ProfilePropsType) => {\n    const followers = useSelector((state: AppStateType) => state.profilePage.followers);\n    return (\n        <div className={styleModule.content}>\n            <ProfileInfo {...props}/>\n            <div className={styleModule.postsAndSidebar}>\n                <MyPostsContainer params={props.params}/>\n                {!!followers.length && <SideBar/>}\n            </div>\n        </div>\n    );\n})\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getProfile, getStatus, ProfileType, updateStatus} from \"../../redux/redusers/profileReducer/profileReducer\";\nimport {Profile} from \"./Profile\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {withRouter} from \"../../hoc/withRouter\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {PATH} from '../../App';\nimport {getProfileSelector, getStatusSelector} from '../../redux/selectors/profileSelectors';\nimport {getAuthUserIDSelector, getIsAuthSelector} from '../../redux/selectors/authSelectors';\n\n\nclass ProfileAPIContainer extends React.Component<ProfileAPIContainerPropsType> {\n\n    refreshProfile = () => {\n        const {getProfile, getStatus, params, navigate, ...restProps} = this.props\n        let userId = params[\"*\"]\n        if (!userId || userId === '*') {\n            if (restProps.userId) {\n                userId = restProps.userId.toString()\n            } else {\n                navigate(PATH.LOGIN)\n            }\n        }\n        getProfile(Number(userId))\n        getStatus(Number(userId))\n    }\n\n    componentDidMount(): void {\n        this.refreshProfile()\n    }\n\n    //getting own profile after switching from someone profile to your own\n    componentDidUpdate(prevProps: Readonly<ProfileAPIContainerPropsType>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (prevProps.params !== this.props.params) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return this.props.profile ? (\n                <Profile {...this.props}/>) :\n            (<Preloader size={'30px'} color={'#EC4899'}/>\n            )\n    }\n}\n\nexport type ProfileAPIContainerPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    {\n        params: {\n            ['*']: string,\n        }\n        navigate: (path: string) => void\n    } //... <= profile/*... => type for props\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    isAuth: boolean\n    status: string\n    userId: number | null\n}\ntype MapDispatchToPropsType = {\n    getProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: getProfileSelector(state),\n    isAuth: getIsAuthSelector(state),\n    status: getStatusSelector(state),\n    userId: getAuthUserIDSelector(state)\n})\n\n\nexport const ProfileContainer = withAuthRedirect(connect(mapStateToProps, {\n    getProfile,\n    getStatus,\n    updateStatus\n} as MapDispatchToPropsType)(withRouter(ProfileAPIContainer)))\n\n\n","export default __webpack_public_path__ + \"static/media/user.cb380ae4.png\";","import React from \"react\";\r\nimport styleModule from './Header.module.css';\r\nimport styled from \"styled-components\";\r\nimport {NavLink, useNavigate} from \"react-router-dom\";\r\nimport {HeaderAPIContainerPropsType} from \"./HeaderContainer\";\r\nimport logo_avatar from '../../usersAvatars/user.png'\r\nimport {PATH} from '../../App';\r\nimport {Button} from '../generic/Button/Button';\r\n\r\nexport type HeaderPropsType = {\r\n    title: string\r\n    description?: string\r\n    background: string\r\n    color: string\r\n    logo?: any\r\n} & HeaderAPIContainerPropsType\r\n\r\n\r\nexport const Header = React.memo((props: HeaderPropsType) => {\r\n    const navigate = useNavigate()\r\n    const {\r\n        title,\r\n        description,\r\n        background,\r\n        color,\r\n        logo,\r\n        avatar,\r\n        fullName,\r\n        auth,\r\n    } = props\r\n    const Header = styled.header`\r\n    & {\r\n    background: ${background}\r\n    `;\r\n    const TitleDescription = styled.div`\r\n    & p {\r\n    color: ${color}\r\n    }\r\n    `;\r\n    return (\r\n        <Header className={styleModule.header}>\r\n            <div className={styleModule.logoAndDescription}>\r\n                <div className={styleModule.logo}>\r\n                </div>\r\n                <TitleDescription className={styleModule.title_description}>\r\n                    <p>{title}</p>\r\n                    <p>{description}</p>\r\n                </TitleDescription>\r\n            </div>\r\n            <div className={styleModule.loginStatus}>\r\n\r\n                {auth.isAuth ?\r\n                    <div className={styleModule.loginAndAvatar}>\r\n                        <div className={styleModule.avatar}\r\n                             onClick={() => {\r\n                                 navigate(PATH.PROFILE)\r\n                             }}>\r\n                            <img src={avatar ? avatar : logo_avatar}/>\r\n                        </div>\r\n                        <div className={styleModule.notifications}\r\n                             onClick={() => navigate('/dialogs/')}>\r\n                            <NotificationsLogo/>\r\n                        </div>\r\n                        <div className={styleModule.logoutButton}>\r\n                            <Button name={'Logout'} onClick={props.logout}/>\r\n                        </div>\r\n                    </div> :\r\n                    <NavLink to={'/login'}>\r\n                        LOGIN\r\n                    </NavLink>}\r\n            </div>\r\n        </Header>\r\n    );\r\n})\r\n\r\nconst NotificationsLogo = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n            <path\r\n                d=\"M256 32V49.88C328.5 61.39 384 124.2 384 200V233.4C384 278.8 399.5 322.9 427.8 358.4L442.7 377C448.5 384.2 449.6 394.1 445.6 402.4C441.6 410.7 433.2 416 424 416H24C14.77 416 6.365 410.7 2.369 402.4C-1.628 394.1-.504 384.2 5.26 377L20.17 358.4C48.54 322.9 64 278.8 64 233.4V200C64 124.2 119.5 61.39 192 49.88V32C192 14.33 206.3 0 224 0C241.7 0 256 14.33 256 32V32zM216 96C158.6 96 112 142.6 112 200V233.4C112 281.3 98.12 328 72.31 368H375.7C349.9 328 336 281.3 336 233.4V200C336 142.6 289.4 96 232 96H216zM288 448C288 464.1 281.3 481.3 269.3 493.3C257.3 505.3 240.1 512 224 512C207 512 190.7 505.3 178.7 493.3C166.7 481.3 160 464.1 160 448H288z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\n","export const requiredField = (value:string):string | null => {\r\n    return !value.length ? 'This field is required' : null\r\n}\r\nexport const maxLength = (maxLength:number) => (value:string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} characters!` : null\r\n}\r\nexport const composeValidators = (...validators:Function[]) => (value:string) =>\r\n    validators.reduce((error, validator) => error || validator(value), undefined);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Header} from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {InitialStateAuthType, logout} from \"../../redux/redusers/auth/authReducer\";\r\nimport {HEADER_STYLE} from \"../../App\";\r\nimport {getAvatarSelector, getFullNameSelector} from '../../redux/selectors/authSelectors';\r\n\r\nexport type DataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: DataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n\r\nclass HeaderAPIContainer extends React.Component<HeaderAPIContainerPropsType> {\r\n    render = () => {\r\n        return (\r\n            <Header title={'Linkspace'}\r\n                    description={'Connecting Network'}\r\n                    background={HEADER_STYLE.background}\r\n                    color={HEADER_STYLE.color}\r\n                    logo={HEADER_STYLE.logo}\r\n                    {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport type HeaderAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    auth: InitialStateAuthType\r\n    fullName: string | null\r\n    avatar: string | null | undefined\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth,\r\n        fullName: getFullNameSelector(state),\r\n        avatar: getAvatarSelector(state),\r\n    }\r\n};\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {\r\n    logout\r\n} as MapDispatchToPropsType)(HeaderAPIContainer)\r\n\r\n\r\n\r\n","import React, {FormEvent, KeyboardEvent, memo, useEffect} from \"react\";\nimport styleModule from './LoginForm.module.css';\nimport {Button} from \"../../generic/Button/Button\";\nimport {Checkbox} from \"../../generic/Checkbox/Checkbox\";\nimport {Field, Form, Formik} from \"formik\";\nimport {composeValidators, maxLength, requiredField} from '../../../utils/validators';\nimport {LoginWithApiPropsType} from '../../Login/Login';\nimport s from '../../generic/InputText/InputText.module.css';\nimport {CSSTransition} from 'react-transition-group';\nimport InputTextSecondary from '../../generic/InputTextSecondary/InputTextSecondary';\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\ntype OnSubmitParamsType = {\n    setSubmitting: (isSubmitting: boolean) => void\n    setStatus: (status?: any) => void\n}\n\ntype LoginFormPropsType = LoginWithApiPropsType\n\nconst maxLength30 = maxLength(30)\n\nexport const  LoginForm = memo(({login}: LoginFormPropsType) => {\n\n    const onSubmitGHandler = (values: LoginFormValuesType, {setSubmitting, setStatus}: OnSubmitParamsType) => {\n        const {email, password, rememberMe} = values;\n        login(email, password, rememberMe, setStatus)\n        setSubmitting(false)\n    }\n    const onAddMessageWithEnter = (e: KeyboardEvent<HTMLFormElement>,\n                                   handleSubmit: (e?: FormEvent<HTMLFormElement> | undefined) => void) => {\n        if (!e.shiftKey && e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit()\n        }\n    };\n    return (\n        <div className={styleModule.wrapperLoginForm}>\n            <Formik\n                initialValues={{email: '', password: '', rememberMe: true}}\n                onSubmit={onSubmitGHandler}>\n                {({isSubmitting, handleSubmit, status}) => (\n                    <Form className={styleModule.formWrapper}\n                          onSubmit={handleSubmit}\n                          onKeyPress={(e) => onAddMessageWithEnter(e, handleSubmit)}>\n                        <CSSTransition in={status}\n                                       timeout={300}\n                                       classNames={s}\n                                       unmountOnExit\n                                       mountOnEnter>\n                            <div className={styleModule.formErrorBlock}>{status}</div>\n                        </CSSTransition>\n                        <div className={styleModule.title}>Log in</div>\n                        <div className={styleModule.formElement}>\n                            <Field type=\"email\"\n                                   name=\"email\"\n                                   component={InputTextSecondary}\n                                   placeholder={'Login'}\n                                   validate={composeValidators(requiredField, maxLength30)}/>\n\n                        </div>\n                        <div className={styleModule.formElement}>\n                            <Field type=\"password\"\n                                   name=\"password\"\n                                   component={InputTextSecondary}\n                                   placeholder={'Password'}\n                                   validate={composeValidators(requiredField, maxLength30)}/>\n                        </div>\n                        <div className={`${styleModule.formElement} ${styleModule.checkMark}`}>\n                            <Field type=\"checkbox\"\n                                   name=\"rememberMe\"\n                                   component={CheckBoxField}/>\n                        </div>\n                        <div className={`${styleModule.formElement} ${styleModule.submitButton}`}>\n                            <Button name={'Login'}\n                                    disabled={isSubmitting}/>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <span>© Copyright 2022 By Linkspace</span>\n        </div>\n    );\n})\n\nconst CheckBoxField = memo((props: any) => {\n    return (\n        <Checkbox {...props} id={\"remember_me\"}\n                  bgColor={'#68ACBA'}>\n            Remember Me\n        </Checkbox>\n    )\n})\n\n\n\n\n\n\n","import React from \"react\";\nimport styleModule from './Login.module.css';\nimport {LoginForm} from \"../forms/LoginForm/LoginForm\";\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {login} from '../../redux/redusers/auth/authReducer';\nimport {Navigate} from 'react-router-dom';\n\nexport type LoginWithApiPropsType =\n    MapStateToPropsType &\n    MapDispatchToProps\n\nexport function LoginWithApi(props: LoginWithApiPropsType) {\n    if (props.isAuth) {\n\n        return <Navigate to={'/profile'}/>\n    }\n    return (\n        <div className={styleModule.wrapperLogin}>\n            <LoginForm {...props}/>\n        </div>\n    );\n}\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\ntype MapDispatchToProps = {\n    login: (email: string, password: string, rememberMe: boolean, setStatus: (status?: any) => void) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const Login = connect(mapStateToProps, {login} as MapDispatchToProps)(LoginWithApi)\n\n\n\n","import {AppThunk} from '../../redux-store';\r\nimport {getAuthorizationInfo} from '../auth/authReducer';\r\nimport {getFollowers} from '../profileReducer/profileReducer';\r\n\r\nexport enum APP_ACTIONS_TYPES {\r\n    SET_APP_INITIALIZE_VALUE = 'social/app/SET_APP_INITIALIZE_VALUE'\r\n}\r\n\r\nexport type InitialStateAppType = typeof initialState\r\n\r\nexport const initialState = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateAppType = initialState, action: AppActionType): InitialStateAppType => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS_TYPES.SET_APP_INITIALIZE_VALUE:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type AppActionType =\r\n    | ReturnType<typeof setAppInitializeValue>\r\n\r\n// A C T I O N S\r\nexport const setAppInitializeValue = (initialized: boolean) => ({\r\n    type: APP_ACTIONS_TYPES.SET_APP_INITIALIZE_VALUE,\r\n    payload: {initialized}\r\n} as const)\r\n\r\n//T H U N K S\r\nexport const initializeApp = (): AppThunk => dispatch => {\r\n    const promise_1 = dispatch(getAuthorizationInfo())\r\n    Promise.all([promise_1])\r\n        .then(() => {\r\n            dispatch(setAppInitializeValue(true))\r\n        })\r\n}","import {AppStateType} from '../redux-store';\r\n\r\nexport const getInitializedSelector = (state: AppStateType): boolean => {\r\n    return state.app.initialized\r\n}","import React from 'react';\nimport './App.css';\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Music} from \"./components/Music/Music\";\nimport {News} from \"./components/News/News\";\nimport {ContactsSettingsForm, ProfileSettingsForm, Settings} from \"./components/Settings/Settings\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {connect} from 'react-redux';\nimport {AppStateType} from './redux/redux-store';\nimport {initializeApp} from './redux/redusers/app/appReducer';\nimport {Preloader} from './components/generic/Preloader/Preloader';\nimport {getInitializedSelector} from './redux/selectors/appSelectors';\nimport {faGlobe} from '@fortawesome/free-solid-svg-icons/faGlobe';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {getIsAuthSelector} from './redux/selectors/authSelectors';\n\n\nexport type PATHType = {\n    PROFILE: string\n    DIALOGS: string\n    MUSIC: string\n    NEWS: string\n    USERS: string\n    SETTINGS: string\n    LOGIN: string\n}\nexport const PATH: PATHType = {\n    PROFILE: '/profile/*',\n    DIALOGS: '/dialogs/*',\n    MUSIC: '/music',\n    NEWS: '/news',\n    USERS: '/users',\n    SETTINGS: '/settings/*',\n    LOGIN: '/login',\n};\n\nexport const HEADER_STYLE = {\n    background: '#ffffff',\n    color: '#3B3E43',\n    logo: <FontAwesomeIcon icon={faGlobe}/>\n};\n\nclass App extends React.Component<AppAPIContainerPropsType> {\n    componentDidMount(): void {\n        const {initializeApp} = this.props\n        initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return (\n                <div style={{height: '100vh'}}>\n                    <Preloader size={'30px'} color={'#EC4899'}/>\n                </div>\n            )\n        }\n        return (\n            <>\n                {this.props.isAuth ?\n                    <div className=\"app_wrapper\">\n                        <HeaderContainer/>\n                        <Navbar/>\n                        <div className=\"app_wrapper_content\">\n                            <Routes>\n                                <Route path='/' element={<Navigate to={PATH.PROFILE}/>}/>\n                                <Route path={PATH.PROFILE} element={<ProfileContainer/>}/>\n                                <Route path={PATH.DIALOGS} element={<DialogsContainer/>}/>\n                                <Route path={PATH.MUSIC} element={<Music/>}/>\n                                <Route path={PATH.NEWS} element={<News/>}/>\n                                <Route path={PATH.USERS} element={<UsersContainer/>}/>\n                                <Route path={PATH.SETTINGS} element={<Settings/>}/>\n                                <Route path={PATH.LOGIN} element={<Login/>}/>\n                            </Routes>\n                        </div>\n                    </div> : <Login/>\n                }\n\n            </>\n        )\n    }\n}\n\nexport type AppAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\n\ntype MapStateToPropsType = {\n    initialized: boolean\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        initialized: getInitializedSelector(state),\n        isAuth: getIsAuthSelector(state)\n    }\n};\n\nexport default connect(mapStateToProps, {initializeApp} as MapDispatchToPropsType)(App);\n","import {ProfileActionType, profileReducer} from \"./redusers/profileReducer/profileReducer\";\r\nimport {DialogsActionType, dialogsReducer} from \"./redusers/dialogsReducer/dialogsReducer\";\r\nimport {UsersActionType, usersReducer} from \"./redusers/usersReducer/usersReducer\";\r\nimport {AuthActionType, authReducer} from \"./redusers/auth/authReducer\";\r\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {AppActionType, appReducer} from './redusers/app/appReducer';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        app: appReducer\r\n    }\r\n);\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType =\r\n    UsersActionType |\r\n    ProfileActionType |\r\n    DialogsActionType |\r\n    AuthActionType |\r\n    AppActionType\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type GetStateType = typeof store.getState\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}