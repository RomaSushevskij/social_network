{"version":3,"sources":["components/CommonChat/CommonChat.module.scss","redux/selectors/chatSelectors.ts","components/CommonChat/CommonChat.tsx"],"names":["module","exports","selectMessages","state","commonChat","messages","selectChatStatus","chatStatus","CommonChat","memo","dispatch","useDispatch","messageBottom","useRef","navigate","useNavigate","myUserId","useAppSelector","getAuthUserIDSelector","avatar","getAvatarSelector","useState","isAutoScroll","setIsAutoScroll","scrollBehaviorType","setScrollBehaviorType","useEffect","startMessagesListening","stopMessagesListening","current","scrollIntoView","behavior","onSendMessageButtonClick","useCallback","message","sendMessage","onUserAvatarClick","userId","path","className","styleModule","commonChatWrapper","onScroll","e","currentTarget","scrollHeight","scrollTop","clientHeight","Math","abs","map","index","Message","color","MESSAGE_STYLE","background","meColor","meBackground","myAvatar","onUserClick","id","ref","AddMessageForm","addMessage","isSubmitDisabled","SnackBar","type","SNACK_BAR_TYPES","ERROR"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,kBAAoB,sCAAsC,SAAW,+B,sJCE1EC,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,WAAWC,UAEfC,EAAmB,SAACH,GAC7B,OAAOA,EAAMC,WAAWG,Y,eCWtBC,EAAiBC,gBAAK,WACxB,IAAMC,EAAWC,cACXC,EAAgBC,iBAAuB,MACvCC,EAAWC,cAEXC,EAAWC,YAAeC,KAC1BC,EAASF,YAAeG,KACxBf,EAAWY,YAAef,GAC1BK,EAAaU,YAAeX,GAElC,EAAwCe,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoDF,mBAAyB,QAA7E,mBAAOG,EAAP,KAA2BC,EAA3B,KAEAC,qBAAU,WAGN,OAFAhB,EAASiB,eAEF,WACHjB,EAASkB,kBAEd,IAEHF,qBAAU,WACa,IAAD,EAAdJ,IACA,UAAAV,EAAciB,eAAd,SAAuBC,eAAe,CAACC,SAAUP,OAEtD,CAACnB,IAEJ,IAAM2B,EAA2BC,uBAAY,SAACC,GAC1CxB,EAASyB,YAAYD,MACtB,CAACxB,IAEE0B,EAAoBH,uBAAY,SAACI,GACnC,IAAMC,EAAI,mBAAeD,GACzBvB,EAASwB,KACV,CAACxB,IAYJ,OACI,sBAAKyB,UAAWC,IAAYC,kBAA5B,UACI,sBAAKF,UAAWC,IAAYnC,SAAUqC,SAZrB,SAACC,GACtB,MAAgDA,EAAEC,cAA3CC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,aAChC,GAAIC,KAAKC,IAAKJ,EAAeC,EAAaC,IAAiBA,EAAe,EAGtE,OAFCzB,GAAgBC,GAAgB,QACjCE,EAAsB,UAG1BH,GAAgBC,GAAgB,IAK5B,UACKlB,EAAS6C,KAAI,SAAChB,EAASiB,GAAV,OAAoB,cAACC,EAAA,EAAD,aACSC,MAAOC,IAAcD,MACrBE,WAAYD,IAAcC,WAC1BC,QAASF,IAAcE,QACvBC,aAAcH,IAAcG,aAC5BzC,SAAUA,EACV0C,SAAUvC,EACVwC,YAAavB,GACTF,GARCA,EAAQ0B,OASxD,qBAAKC,IAAKjD,OAEd,cAACkD,EAAA,EAAD,CAAgBC,WAAY/B,EACZgC,iBAAiC,UAAfzD,IAClB,UAAfA,GACG,cAAC0D,EAAA,EAAD,CAAU/B,QAAS,4CAA6CgC,KAAMC,IAAgBC,cAKvF5D","file":"static/js/5.34ca7778.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonChatWrapper\":\"CommonChat_commonChatWrapper__1nFOD\",\"messages\":\"CommonChat_messages__3kvBg\"};","import {AppStateType} from \"../redux-store\";\nimport {ChatMessageType, ChatStatusType} from \"../redusers/chatReducer/types\";\n\nexport const selectMessages = (state: AppStateType): ChatMessageType [] => {\n    return state.commonChat.messages;\n};\nexport const selectChatStatus = (state: AppStateType): ChatStatusType => {\n    return state.commonChat.chatStatus;\n};","import React, {FC, memo, useCallback, useEffect, useRef, useState} from \"react\";\nimport styleModule from \"./CommonChat.module.scss\";\nimport {AddMessageForm} from \"../forms/AddMessageForm/AddMessageForm\";\nimport {Message} from \"../Dialogs/Mesage/Message\";\nimport {MESSAGE_STYLE} from \"../Dialogs/Dialogs\";\nimport {useAppSelector} from \"../../redux/hooks\";\nimport {getAuthUserIDSelector, getAvatarSelector} from \"../../redux/selectors/authSelectors\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    sendMessage,\n    startMessagesListening,\n    stopMessagesListening\n} from \"../../redux/redusers/chatReducer/chat-reducer\";\nimport {selectChatStatus, selectMessages} from \"../../redux/selectors/chatSelectors\";\nimport {SNACK_BAR_TYPES, SnackBar} from \"../generic/SnackBar/SnackBar\";\n\n\nconst CommonChat: FC = memo(() => {\n    const dispatch = useDispatch();\n    const messageBottom = useRef<HTMLDivElement>(null);\n    const navigate = useNavigate();\n\n    const myUserId = useAppSelector(getAuthUserIDSelector);\n    const avatar = useAppSelector(getAvatarSelector);\n    const messages = useAppSelector(selectMessages);\n    const chatStatus = useAppSelector(selectChatStatus);\n\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\n    const [scrollBehaviorType, setScrollBehaviorType] = useState<ScrollBehavior>('auto');\n\n    useEffect(() => {\n        dispatch(startMessagesListening());\n\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messageBottom.current?.scrollIntoView({behavior: scrollBehaviorType})\n        }\n    }, [messages])\n\n    const onSendMessageButtonClick = useCallback((message: string) => {\n        dispatch(sendMessage(message));\n    }, [dispatch]);\n\n    const onUserAvatarClick = useCallback((userId: number) => {\n        const path = `/profile/${userId}`\n        navigate(path);\n    }, [navigate]);\n\n    const onMessagesScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const {scrollHeight, scrollTop, clientHeight} = e.currentTarget;\n        if (Math.abs((scrollHeight - scrollTop) - clientHeight) <= clientHeight / 2) {\n            !isAutoScroll && setIsAutoScroll(true);\n            setScrollBehaviorType('smooth');\n            return\n        }\n        isAutoScroll && setIsAutoScroll(false)\n    };\n\n    return (\n        <div className={styleModule.commonChatWrapper}>\n            <div className={styleModule.messages} onScroll={onMessagesScroll}>\n                {messages.map((message, index) => <Message key={message.id}\n                                                           color={MESSAGE_STYLE.color}\n                                                           background={MESSAGE_STYLE.background}\n                                                           meColor={MESSAGE_STYLE.meColor}\n                                                           meBackground={MESSAGE_STYLE.meBackground}\n                                                           myUserId={myUserId}\n                                                           myAvatar={avatar}\n                                                           onUserClick={onUserAvatarClick}\n                                                           {...message}/>)}\n                <div ref={messageBottom}/>\n            </div>\n            <AddMessageForm addMessage={onSendMessageButtonClick}\n                            isSubmitDisabled={chatStatus !== 'ready'}/>\n            {chatStatus === 'error' &&\n                <SnackBar message={'Some error occurred. Please refresh page.'} type={SNACK_BAR_TYPES.ERROR}/>}\n        </div>\n    )\n});\n\nexport default CommonChat;"],"sourceRoot":""}