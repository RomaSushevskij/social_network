{"version":3,"sources":["components/Dialogs/Mesage/Message.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/generic/Paginator/Paginator.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Users/User/User.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Users/Users.module.css","components/generic/Preloader/Preloader.module.css","components/Navbar/Navbar.module.css","components/generic/UnderConstruction/UnderConstruction.module.css","components/generic/Button/Button.module.css","components/generic/Textarea/Textarea.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.tsx","underConstruction.png","components/generic/UnderConstruction/UnderConstruction.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","main-logo.png","api/api.ts","redux/redusers/dialogsReducer/dialogsReducer.ts","usersAvatars/user.png","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Mesage/Message.tsx","components/generic/Button/Button.tsx","components/generic/Textarea/Textarea.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/redusers/usersReducer/usersReducer.ts","components/Users/User/User.tsx","components/generic/Paginator/Paginator.tsx","components/generic/Preloader/Preloader.tsx","components/Users/Users.tsx","redux/redusers/profileReducer/profileReducer.ts","components/Users/UsersContainer.tsx","hoc/withRouter.tsx","redux/redusers/auth/authReducer.ts","top-wallpaper.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","React","memo","className","styleModule","nav","item","to","profile","isActive","active","icon","faUserAlt","dialogs","faCommentDots","news","faNewspaper","music","faHeadphonesAlt","users","faUsers","settings","faSlidersH","UnderConstruction","container","src","logo","alt","Music","props","News","Settings","FOLLOW_UNFOLLOW_RESULT_CODES","AUTH_ME_RESULT_CODES","initialState","dialogsData","id","name","image","messagesData","message","time","newMessageText","Dialog","background","color","DialogWrapper","styled","div","ContactAvatar","dialog","contactAvatar","userLogo","dialogActive","Message","meBackground","meColor","MessageBlock","Avatar","messageWrapperStyle","messageWrapper","meMessageWrapper","messageBlockStyle","messageBlock","meMessageBlock","avatar","messageAva","Button","onClick","disabled","ButtonWithBefore","button","backgroundHover","colorHover","style","Textarea","textareaValue","setTextareaValue","reference","placeholder","onAddWithEnter","styles","textarea","onChange","onKeyPress","value","ref","Post","likes","isLike","removePost","likePost","PostWrapper","LikesDiv","postWrapper","avaBlock","ava_post","faTimes","onCrossClick","onLikeClick","likesBlock","likeCount","BUTTON_STYLE","POST_STYLE","MyPosts","myPosts","writePost","e","updateNewPostText","currentTarget","newPostText","shiftKey","key","preventDefault","trim","addPost","addPostButton","posts","postsData","map","post","MESSAGE_STYLE","DIALOG_STYLE","Dialogs","heading","dialogs_items","dialogsPage","messagesBlock","messages","writeAndSendMessage","writeMessage","updateNewMessageText","addMessageWithEnter","sendMessage","addMessage","DialogsContainer","connect","state","dispatch","type","payload","updateNewMessageTextAC","USERS_ACTIONS_TYPES","instance_1","axios","create","baseURL","withCredentials","headers","usersAPI","pageSize","currentPage","get","then","response","data","userId","delete","profileAPI","authMeAPI","User","UserWrapper","Img","img","isFollowingButtonDisabled","followingInProcessUsersId","includes","userWrapper","photos","small","userPhotoDefault","fullName","status","followed","toggleFollowingInProcess","resultCode","success","stopBeingFollower","becomeFollower","Paginator","portionSize","useMemo","pageCount","Math","ceil","totalItemsCount","pages","i","push","useState","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","firstPage","pagesToBack","threeDots","filter","page","selectedPage","onChangePage","pagesToForward","lastPage","Preloader","size","preloaderBlock","fontSize","preloaderIcon","faSpinner","Users","usersTotalCount","isFetching","userElements","user","usersWrapper","usersBlock","PROFILE_ACTIONS_TYPES","UsersApiContainer","pageNumber","setUsers","setIsFetchingValue","setCurrentPage","items","this","setUsersTotalCount","length","totalCount","nextProps","nextState","Component","UsersContainer","usersPage","userID","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","SET_IS_FETCHING_VALUE","followingInProcess","TOGGLE_FOLLOWING_IN_PROCESS","WrappedComponent","AUTH_ACTIONS_TYPES","ProfileInfo","profileInfo","top_wallpaper","avatarAndFullName","large","logo_avatar","description","wrapper_description","aboutMe","lookingForAJob","statusJob","faCheck","iconYes","iconNot","descriptionJob","lookingForAJobDescription","MyPostsContainer","profilePage","ADD_POST","UPDATE_NEW_POST_TEXT","REMOVE_POST","LIKE_POST","Profile","content","params","ProfileAPIContainer","refreshProfile","setProfile","prevProps","prevState","snapshot","ProfileContainer","SET_PROFILE","useParams","Header","title","auth","header","TitleDescription","logoAndDescription","main_logo","title_description","loginStatus","isAuth","loginAndAvatar","loginValue","email","login","HeaderAPIContainer","render","HEADER_STYLE","setAuthUserData","setFullNameAndAvatar","HeaderContainer","SET_AUTH_USER_DATA","SET_FULL_NAME_AND_AVATAR","PATH","App","path","element","rootReducer","combineReducers","action","newPost","p","newMessage","Date","toLocaleTimeString","slice","store","createStore","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2aa951c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrapper\":\"Message_messageWrapper__2v9vO\",\"meMessageWrapper\":\"Message_meMessageWrapper__1MAX1\",\"messageBlock\":\"Message_messageBlock__3LBDi\",\"meMessageBlock\":\"Message_meMessageBlock__1x_NA\",\"name\":\"Message_name__3Gp6r\",\"message\":\"Message_message__9Gaxr\",\"time\":\"Message_time__2pDBU\",\"avatar\":\"Message_avatar__1V7_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__rKeBu\",\"logoAndDescription\":\"Header_logoAndDescription__36SJL\",\"main_logo\":\"Header_main_logo__227Ld\",\"title_description\":\"Header_title_description__3Sd-q\",\"logo\":\"Header_logo__Z7xS8\",\"loginStatus\":\"Header_loginStatus__27OBc\",\"loginAndAvatar\":\"Header_loginAndAvatar__OJ0Lj\",\"loginValue\":\"Header_loginValue__35gNe\",\"logoutButton\":\"Header_logoutButton__1jl7V\",\"avatar\":\"Header_avatar__1X7_3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1o3_i\",\"heading\":\"Dialogs_heading__2LCaS\",\"dialogs_items\":\"Dialogs_dialogs_items__1CN3_\",\"messagesBlock\":\"Dialogs_messagesBlock___yNFN\",\"messages\":\"Dialogs_messages__174fl\",\"meMessages\":\"Dialogs_meMessages__2Nq9R\",\"writeMessage\":\"Dialogs_writeMessage__2da3A\",\"writeAndSendMessage\":\"Dialogs_writeAndSendMessage__3VXCn\",\"sendMessage\":\"Dialogs_sendMessage__2OMjS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2Taf7\",\"pagesToBack\":\"Paginator_pagesToBack__2y2Mx\",\"pagesToForward\":\"Paginator_pagesToForward__3ky62\",\"firstPage\":\"Paginator_firstPage__2QU6j\",\"lastPage\":\"Paginator_lastPage__gXtZR\",\"selectedPage\":\"Paginator_selectedPage__JE0qS\",\"threeDots\":\"Paginator_threeDots__13XX3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__2dad-\",\"avaBlock\":\"Post_avaBlock__1eypn\",\"messageBlock\":\"Post_messageBlock__q4MKJ\",\"likesBlock\":\"Post_likesBlock__W2PfY\",\"removePost\":\"Post_removePost__ZIsFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"User_userWrapper__HCUEE\",\"avatar\":\"User_avatar__3jo1S\",\"status\":\"User_status__oyUvl\",\"fullName\":\"User_fullName__dcBJC\",\"followed\":\"User_followed__suzg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__14xNj\",\"addPostButton\":\"MyPosts_addPostButton__3kHYc\",\"writePost\":\"MyPosts_writePost__rmb23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2L0-V\",\"contactAvatar\":\"Dialog_contactAvatar__2NdvE\",\"dialogActive\":\"Dialog_dialogActive__2hnMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersBlock\":\"Users_usersBlock__wcdhv\",\"usersWrapper\":\"Users_usersWrapper__2NpI5\",\"buttonBlock\":\"Users_buttonBlock__3E4rQ\",\"selectedPage\":\"Users_selectedPage__2Qq8Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderBlock\":\"Preloader_preloaderBlock__3EBOq\",\"preloaderIcon\":\"Preloader_preloaderIcon__QSMsa\",\"rotate-center\":\"Preloader_rotate-center__1wFP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2lBSZ\",\"item\":\"Navbar_item__Ozyip\",\"icon\":\"Navbar_icon__2lJWr\",\"active\":\"Navbar_active__34byn\",\"settings\":\"Navbar_settings__2WR45\",\"users\":\"Navbar_users__rOSsB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UnderConstruction_container__3E9Tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__egdZh\",\"rotate-center\":\"Button_rotate-center__1PBd9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__3tLx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__7ylqO\",\"avatarAndFullName\":\"ProfileInfo_avatarAndFullName__5j74l\",\"image\":\"ProfileInfo_image__19lBH\",\"fullName\":\"ProfileInfo_fullName__15UDG\",\"top_wallpaper\":\"ProfileInfo_top_wallpaper__1_yd0\",\"description\":\"ProfileInfo_description__3f-6U\",\"aboutMe\":\"ProfileInfo_aboutMe__AeW_S\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__h-vFk\",\"statusJob\":\"ProfileInfo_statusJob__2KhXS\",\"heading\":\"ProfileInfo_heading__1KCBL\",\"iconYes\":\"ProfileInfo_iconYes__3682c\",\"iconNot\":\"ProfileInfo_iconNot__1bYWv\",\"descriptionJob\":\"ProfileInfo_descriptionJob__omSRg\"};","import React from \"react\";\nimport './Navbar.module.css';\nimport styleModule from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCommentDots,\n    faHeadphonesAlt,\n    faNewspaper,\n    faSlidersH,\n    faUserAlt,\n    faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const Navbar = React.memo(() => {\n    return (\n        <>\n            <nav className={styleModule.nav}>\n                <div className={styleModule.item}>\n                    <NavLink to={'/profile'}\n                             className={profile => profile.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faUserAlt} className={styleModule.icon}/> Profile\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/dialogs'}\n                             className={dialogs => dialogs.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faCommentDots} className={styleModule.icon}/> Messages\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/news'} className={news => news.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faNewspaper} className={styleModule.icon}/> News\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/music'} className={music => music.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faHeadphonesAlt} className={styleModule.icon}/> Music\n                    </NavLink>\n                </div>\n                <div className={`${styleModule.item} ${styleModule.users}`}>\n                    <NavLink to={'/users'} className={users => users.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faUsers} className={styleModule.icon}/> Users\n                    </NavLink>\n                </div>\n                <div className={`${styleModule.item} ${styleModule.settings}`}>\n                    <NavLink to={'/settings'}\n                             className={settings => settings.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faSlidersH} className={styleModule.icon}/> Settings\n                    </NavLink>\n                </div>\n\n            </nav>\n        </>\n    )\n})\n","export default __webpack_public_path__ + \"static/media/underConstruction.9d99f69c.png\";","import logo from './../../../underConstruction.png'\r\nimport styleModule from './UnderConstruction.module.css'\r\nexport const UnderConstruction = () => {\r\n    return (\r\n        <div className={styleModule.container}>\r\n            <img src={logo} alt=\"Under Construction\"/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport styleModule from './Music.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport function Music(props:any) {\n    return (\n        <div>\n           <UnderConstruction/>\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './News.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport function News(props:any) {\n    return (\n        <div>\n            <UnderConstruction/>\n        </div>\n    );\n}\n\n","import React from \"react\";\nimport styleModule from './Settings.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport function Settings() {\n    return (\n        <div>\n            <UnderConstruction/>\n        </div>\n    );\n}\n\n","export default __webpack_public_path__ + \"static/media/main-logo.8de3ea88.png\";","import axios from 'axios'\r\nimport {UserType} from \"../redux/redusers/usersReducer/usersReducer\";\r\nimport {ProfileType} from \"../redux/redusers/profileReducer/profileReducer\";\r\n\r\n//types------------------------------------------types\r\n//↓\r\n//USERS---\r\ntype GetUsersDataType = {\r\n    error: string | null\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\nexport type PostFollowDataType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: object\r\n    fieldsErrors: Array<any>\r\n}\r\nexport type DeleteFollowDataType = PostFollowDataType\r\nexport enum FOLLOW_UNFOLLOW_RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n}\r\n\r\n//PROFILE---\r\ntype GetProfileDataType = ProfileType\r\n\r\n//AUTH---\r\nexport type AuthUserDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: AuthUserDataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\nexport enum AUTH_ME_RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n}\r\n\r\n//↑\r\n//types------------------------------------------types\r\n\r\nconst instance_1 = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageSize: number, currentPage: number) {\r\n        return instance_1.get<GetUsersDataType>(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    becomeFollower(userId: number) {\r\n        return instance_1.post<PostFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    stopBeingFollower(userId: number) {\r\n        return instance_1.delete<DeleteFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string | number) {\r\n        return instance_1.get<GetProfileDataType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\nexport let authMeAPI = {\r\n    getAuthorizationInfo() {\r\n        return instance_1.get<GetAuthUserDataType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n","export type DialogType = {\r\n    id: number\r\n    /**\r\n     * Name of contact/friend\r\n     */\r\n    name: string\r\n    /**\r\n     * Image of contact/friend\r\n     */\r\n    image: string | null\r\n    /**\r\n     * Optional background color of component\r\n     */\r\n    background?: string\r\n    /**\r\n     * Optional color text of component\r\n     */\r\n    color?: string\r\n};\r\nexport type MessageType = {\r\n    id: number,\r\n    name: string,\r\n    message: string,\r\n    image: string | null,\r\n    time: string\r\n};\r\nexport type InitialStateDialogsType = typeof initialState\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album'\r\n        },\r\n        {id: 2, name: 'Dmitry', image: null},\r\n        {\r\n            id: 3,\r\n            name: 'Aleksey',\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album'\r\n        },\r\n        {id: 4, name: 'Ivan', image: null},\r\n        {id: 5, name: 'Mother', image: null}\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. In, rem!',\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album',\r\n            time: '12:03'\r\n        },\r\n\r\n        {id: 20392, name: 'Me', message: 'Lorem ipsum dolor !', image: null, time: '12:10'},\r\n        {id: 2, name: 'Dmitry', message: 'Lorem ipsum dolor sit amet', image: null, time: '13:01'},\r\n        {\r\n            id: 3,\r\n            name: 'Ivan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album',\r\n            time: '13:08'\r\n        },\r\n        {\r\n            id: 20392,\r\n            name: 'Me',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: null,\r\n            time: '13:49'\r\n        },\r\n        {id: 4, name: 'Mother', message: 'Lorem ipsum dolor !', image: null, time: '14:05'},\r\n        {id: 20392, name: 'Me', message: 'Lorem ipsum dolor', image: null, time: '14:08'},\r\n        {\r\n            id: 20392,\r\n            name: 'Me',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit dolor sit amet, consectetur.',\r\n            image: null,\r\n            time: '14:10'\r\n        },\r\n        {id: 4, name: 'Mother', message: 'Lorem  consectetur adipisicin ipsum dolor !', image: null, time: '14:23'},\r\n    ] as Array<MessageType>,\r\n    newMessageText: ''\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: ActionType): InitialStateDialogsType => {\r\n    switch (action.type) {\r\n        case \"social/dialogs/ADD-MESSAGE\":\r\n            const newMessage: MessageType = {\r\n                id: 20392,\r\n                name: 'Me',\r\n                message: state.newMessageText,\r\n                image: null,\r\n                time: new Date().toLocaleTimeString().slice(0, 5)\r\n            };\r\n            return {...state, messagesData: [...state.messagesData, newMessage], newMessageText: ''}\r\n        case \"social/dialogs/UPDATE-NEW-MESSAGE-TEXT\":\r\n            return {...state, newMessageText: action.payload.newMessageText}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionType =\r\n    ReturnType<typeof addMessageAC> |\r\n    ReturnType<typeof updateNewMessageTextAC>\r\n\r\nexport const addMessageAC = () => ({type: 'social/dialogs/ADD-MESSAGE'} as const);\r\nexport const updateNewMessageTextAC = (newMessageText: string) => ({\r\n    type: 'social/dialogs/UPDATE-NEW-MESSAGE-TEXT',\r\n    payload: {newMessageText}\r\n} as const);","export default __webpack_public_path__ + \"static/media/user.cb380ae4.png\";","import React from \"react\";\nimport styleModule from './Dialog.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport userLogo from '../../../usersAvatars/user.png'\nimport {DialogType} from \"../../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport styled from \"styled-components\";\n\nexport type DialogPropsType = DialogType\n\nexport const Dialog = React.memo(({\n                           id,\n                           name,\n                           image,\n                           background,\n                           color, ...props\n                       }: DialogPropsType) => {\n    const DialogWrapper = styled.div`\n    & {\n    background: ${background ? background : '#FF6347'};\n    }\n    & a {\n    color: ${color ? color : '#ffffff'};\n    }\n    \n    `;\n    const ContactAvatar = styled.div`\n    & img {\n    border: 1px solid ${color ? color : '#ffffff'};\n    }\n    `\n    return (\n        <DialogWrapper className={styleModule.dialog}>\n            <ContactAvatar className={styleModule.contactAvatar}>\n                <img src={image ? image : userLogo} alt={'message avatar'}/>\n            </ContactAvatar>\n            <NavLink className={dialog => dialog.isActive ? styleModule.dialogActive : ''} to={`/dialogs/${id}`}>{name}</NavLink>\n        </DialogWrapper>\n    )\n})\n\n","import React, {useEffect} from \"react\";\nimport styleModule from './Message.module.css';\nimport messageAva from '../../../usersAvatars/user.png'\nimport styled from \"styled-components\";\n\nexport type MessagePropsType = {\n    id: number,\n    /**\n     * Name of the interlocutor\n     */\n    name: string,\n    /**\n     * Text of message\n     */\n    message: string,\n    /**\n     * Image of the interlocutor\n     */\n    image: string | null,\n    /**\n     * Time of sending message\n     */\n    time: string\n    background: string\n    color: string\n    meBackground: string\n    meColor: string\n}\n\nexport const Message = React.memo(({\n                                       id,\n                                       name,\n                                       message,\n                                       image,\n                                       time,\n                                       color,\n                                       background,\n                                       meBackground,\n                                       meColor,\n                                       ...props\n                                   }: MessagePropsType) => {\n    const MessageBlock = styled.div`\n    & {\n    background: ${id === 20392 ? meBackground : background};\n    color: ${id === 20392 ? meColor : color}\n    }\n    &:before {\n    background: radial-gradient(circle at top left, transparent 50%, ${id === 20392 ? meBackground : background} 50%);\n    }\n    `;\n    const Avatar = styled.div`\n    & {\n    border-color: ${background}\n    }\n    `;\n\n    // if the message is mine, then one style, if not, then another\n    const messageWrapperStyle = id === 20392 ?\n        `${styleModule.messageWrapper} ${styleModule.meMessageWrapper}` :\n        styleModule.messageWrapper\n    const messageBlockStyle = id === 20392\n        ?\n        `${styleModule.messageBlock} ${styleModule.meMessageBlock}` :\n        styleModule.messageBlock\n    return (\n        <div className={messageWrapperStyle}>\n            <MessageBlock className={messageBlockStyle}>\n                <div className={styleModule.name}>\n                    {name}\n                </div>\n                <div className={styleModule.message}>\n                    {message}\n                </div>\n                <div className={styleModule.time}>\n                    {time}\n                </div>\n            </MessageBlock>\n            <Avatar className={styleModule.avatar}>\n                <img src={image ? image : messageAva}/>\n            </Avatar>\n\n        </div>\n    )\n})\n\n","import React from \"react\";\r\nimport style from './Button.module.css'\r\nimport styled from \"styled-components\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    backgroundHover?: string\r\n    background?: string\r\n    colorHover?: string\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const Button = React.memo(({name, onClick, disabled, ...props}: ButtonPropsType) => {\r\n    const ButtonWithBefore = styled.button`\r\n& {\r\nborder-color: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\ncolor: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\nbackground-color:${props.background ? props.background : '#ffe1a9'}\r\n}\r\n&:before {\r\nbackground: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\n}\r\n&:hover {\r\ncolor: ${props.colorHover ? props.colorHover : '#ffffff'}\r\n}\r\n`;\r\n\r\n    const onClickButton = () => {\r\n        onClick()\r\n    };\r\n\r\n    return (\r\n        <ButtonWithBefore onClick={onClickButton}\r\n                          className={style.button}\r\n                          disabled={disabled}>\r\n            {name}\r\n        </ButtonWithBefore>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, LegacyRef} from \"react\";\r\nimport style from './Textarea.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    textareaValue: string\r\n    setTextareaValue: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    onAddWithEnter?: (e: KeyboardEvent<HTMLTextAreaElement>) => void\r\n    reference?: LegacyRef<HTMLTextAreaElement>\r\n    placeholder: string\r\n    background: string\r\n    color: string\r\n}\r\n\r\nexport const Textarea = React.memo(({\r\n                             textareaValue,\r\n                             setTextareaValue,\r\n                             reference,\r\n                             placeholder,\r\n                             onAddWithEnter,\r\n                             background,\r\n                             color,\r\n                             ...restProps\r\n                         }: TextareaPropsType) => {\r\n    const styles = {\r\n        background: background,\r\n        color: color\r\n    };\r\n    return (\r\n        <textarea placeholder={placeholder}\r\n                  className={style.textarea}\r\n                  onChange={setTextareaValue}\r\n                  onKeyPress={onAddWithEnter}\r\n                  value={textareaValue}\r\n                  ref={reference}\r\n                  style={styles}\r\n        />\r\n    )\r\n})","import React from \"react\";\nimport styleModule from './Post.module.css'\nimport ava_post from '../../../../usersAvatars/user.png'\nimport {PostType} from \"../../../../redux/redusers/profileReducer/profileReducer\";\nimport styled from \"styled-components\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\ntype PostPropsType = PostType &\n    {\n        removePost: (id: number) => void\n        likePost: (id: number) => void\n    };\n\nexport const Post = React.memo(({\n                                    id,\n                                    name,\n                                    message,\n                                    likes,\n                                    isLike,\n                                    image,\n                                    background,\n                                    color,\n                                    removePost,\n                                    likePost,\n                                    ...props\n                                }: PostPropsType) => {\n    const PostWrapper = styled.div`\n     & {\n        background: ${background ? background : '#FF6347'};\n        color:  ${color ? color : '#ffffff'};\n    }\n    `;\n    const LikesDiv = styled.div`\n    color: ${isLike ? '#ffbf47' : '#ffffff'};\n    `\n\n    const onCrossClick = (id: number) => {\n        removePost(id);\n    };\n    const onLikeClick = (id: number) => {\n        likePost(id)\n    }\n\n    return (\n        <PostWrapper className={styleModule.postWrapper}>\n            <div className={styleModule.avaBlock}>\n                <img src={image ? image : ava_post} alt=\"ava_post\"/>\n                <span>{name}</span>\n                <FontAwesomeIcon icon={faTimes} className={styleModule.removePost} onClick={() => onCrossClick(id)}/>\n            </div>\n            <div className={styleModule.messageBlock}>\n                {message}\n            </div>\n            <LikesDiv>\n                <span onClick={() => onLikeClick(id)}\n                      className={styleModule.likesBlock}>\n                    {`${likes.icon} ${likes.likeCount}`}\n                </span>\n            </LikesDiv>\n        </PostWrapper>\n\n    );\n});\n\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport styleModule from './MyPosts.module.css'\nimport {Post} from \"./Posts/Post\";\nimport {Button} from \"../../generic/Button/Button\";\nimport {Textarea} from \"../../generic/Textarea/Textarea\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\n\n\nexport const BUTTON_STYLE = {\n    BACKGROUND_HOVER: '#ffbf47',\n    BACKGROUND: '#ffe1a9',\n    COLOR_HOVER: '#ffffff'\n};\nexport const POST_STYLE = {\n    background: 'inherit',\n    color: '#ffffff'\n};\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    const onAddPostButton = () => {\n        props.newPostText.trim() && props.addPost(props.newPostText);\n    };\n    const onAddPostWithEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (!e.shiftKey && e.key === 'Enter') {\n            e.preventDefault();\n            props.newPostText.trim() && props.addPost(props.newPostText)\n        }\n    };\n    const onUpdatePostText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewPostText(e.currentTarget.value);\n    };\n\n\n    return (\n        <div className={styleModule.myPosts}>\n            <p>My posts</p>\n            <div>\n                <div className={styleModule.writePost}>\n                    <Textarea setTextareaValue={onUpdatePostText}\n                              textareaValue={props.newPostText}\n                              onAddWithEnter={onAddPostWithEnter}\n                              placeholder={'Here you can leave your post'}\n                              background={'#ffffff'}\n                              color={'#60575A'}/>\n                </div>\n                <div className={styleModule.addPostButton}>\n                    <Button name={'Add post'}\n                            onClick={onAddPostButton}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}/>\n                </div>\n            </div>\n            <div className={styleModule.posts}>\n                {props.postsData.map(post =>\n                    <Post\n                        key={post.id}\n                        background={POST_STYLE.background}\n                        color={POST_STYLE.color}\n                        removePost={props.removePost}\n                        likePost={props.likePost}\n                        {...post}/>\n                )}\n            </div>\n        </div>\n    );\n})\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport {Dialog} from \"./Dialog/Dialog\";\nimport {Message} from \"./Mesage/Message\";\nimport styleModule from './Dialogs.module.css';\nimport {Button} from \"../generic/Button/Button\";\nimport {Textarea} from \"../generic/Textarea/Textarea\";\nimport {BUTTON_STYLE} from \"../Profile/MyPosts/MyPosts\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\n\n\nconst MESSAGE_STYLE = {\n    background: '#e8e8e8',\n    color: '#757575',\n    meBackground:'#FFE1A9',\n    meColor:'#757575',\n};\nconst DIALOG_STYLE = {\n    background: 'inherit',\n    color: '#ffffff'\n};\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n\n\n    const onAddMessageButton = () => {\n        props.addMessage(props.dialogsPage.newMessageText);\n    };\n    const onAddMessageWithEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        props.addMessageWithEnter(e, props.dialogsPage.newMessageText)\n    };\n    const onUpdateNewMessageText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewMessageText(e.currentTarget.value)\n    };\n\n    return (\n        <div className={styleModule.dialogs}>\n            <div className={styleModule.heading}>\n                DIALOGS\n            </div>\n            <div className={styleModule.dialogs_items}>\n                {props.dialogsPage.dialogsData.map(dialog => <Dialog key={dialog.id}\n                                                                     background={DIALOG_STYLE.background}\n                                                                     color={DIALOG_STYLE.color}\n                                                                     {...dialog}/>)}\n            </div>\n            <div className={styleModule.messagesBlock}>\n                <div className={styleModule.messages}>\n                    {props.dialogsPage.messagesData.map(message => <Message key={message.id}\n                                                                            background={MESSAGE_STYLE.background}\n                                                                            color={MESSAGE_STYLE.color}\n                                                                            meBackground={MESSAGE_STYLE.meBackground}\n                                                                            meColor={MESSAGE_STYLE.meColor}\n                                                                            {...message}/>)}\n                </div>\n                <div className={styleModule.writeAndSendMessage}>\n                    <div className={styleModule.writeMessage}>\n                        <Textarea textareaValue={props.dialogsPage.newMessageText}\n                                  setTextareaValue={onUpdateNewMessageText}\n                                  onAddWithEnter={onAddMessageWithEnter}\n                                  placeholder={'Enter your message'}\n                                  background={'#ffffff'}\n                                  color={'#60575A'}/>\n\n                    </div>\n                    <div className={styleModule.sendMessage}>\n                        <Button name={'Send'}\n                                onClick={onAddMessageButton}\n                                backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                                background={BUTTON_STYLE.BACKGROUND}\n                                colorHover={BUTTON_STYLE.COLOR_HOVER}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n})\n\n","import React, {KeyboardEvent} from \"react\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    addMessageAC,\n    InitialStateDialogsType,\n    updateNewMessageTextAC\n} from \"../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\n\nexport type MapStateToPropsType = {\n    dialogsPage: InitialStateDialogsType\n}\n\nexport type MapDispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n    addMessageWithEnter: (e: KeyboardEvent<HTMLTextAreaElement>, newMessageText: string) => void\n    updateNewMessageText: (newMessageText: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newMessageText: string) => {\n            newMessageText.trim() && dispatch(addMessageAC())\n        },\n        addMessageWithEnter: (e: KeyboardEvent<HTMLTextAreaElement>, newMessageText: string) => {\n            if (!e.shiftKey && e.key === 'Enter') {\n                e.preventDefault()\n                newMessageText.trim() && dispatch(addMessageAC())\n            }\n        },\n        updateNewMessageText: (newMessageText: string) => {\n            dispatch(updateNewMessageTextAC(newMessageText));\n        }\n    }\n}\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\n","export enum USERS_ACTIONS_TYPES {\r\n    FOLLOW = 'social/users/FOLLOW',\r\n    UNFOLLOW = 'social/users/UNFOLLOW',\r\n    SET_USERS = 'social/users/SET_USERS',\r\n    SET_CURRENT_PAGE = 'social/users/SET_CURRENT_PAGE',\r\n    SET_USERS_TOTAL_COUNT = 'social/users/SET_USERS_TOTAL_COUNT',\r\n    SET_IS_FETCHING_VALUE = 'social/users/SET_IS_FETCHING_VALUE',\r\n    TOGGLE_FOLLOWING_IN_PROCESS = 'social/users/TOGGLE_FOLLOWING_IN_PROCESS',\r\n\r\n}\r\n\r\nexport type UserPhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nexport type UserType = {\r\n    /**\r\n     * User name\r\n     */\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    /**\r\n     * User photos\r\n     */\r\n    photos: UserPhotoType\r\n    /**\r\n     * User status\r\n     */\r\n    status: null | string,\r\n    /**\r\n     * Value that indicates if you are following this user\r\n     */\r\n    followed: boolean\r\n}\r\n\r\nexport type InitialStateUsersType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    usersTotalCount: 0,\r\n    pageSize: 12,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProcessUsersId: [] as Array<number>\r\n}\r\n\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case USERS_ACTIONS_TYPES.SET_USERS:\r\n            return {\r\n                ...state, users: action.payload.users\r\n            }\r\n        case USERS_ACTIONS_TYPES.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: true} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: false} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n        case USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT:\r\n        case USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS:\r\n            return {\r\n                ...state, followingInProcessUsersId: action.payload.followingInProcess ?\r\n                    [...state.followingInProcessUsersId, action.payload.userId] :\r\n                    state.followingInProcessUsersId.filter(id => id !== action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof becomeFollower> |\r\n    ReturnType<typeof stopBeingFollower> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setUsersTotalCount> |\r\n    ReturnType<typeof setIsFetchingValue> |\r\n    ReturnType<typeof toggleFollowingInProcess>\r\n\r\n\r\nexport const becomeFollower = (userID: number) => ({type: USERS_ACTIONS_TYPES.FOLLOW, payload: {userID}} as const)\r\nexport const stopBeingFollower = (userID: number) => ({type: USERS_ACTIONS_TYPES.UNFOLLOW, payload: {userID}} as const)\r\nexport const setUsers = (users: UserType[]) => ({type: USERS_ACTIONS_TYPES.SET_USERS, payload: {users}} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {currentPage}\r\n} as const)\r\nexport const setUsersTotalCount = (usersTotalCount: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT,\r\n    payload: {usersTotalCount}\r\n} as const)\r\nexport const setIsFetchingValue = (isFetching: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE, payload: {isFetching}\r\n} as const)\r\nexport const toggleFollowingInProcess = (userId: number, followingInProcess: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS,\r\n    payload: {userId, followingInProcess}\r\n} as const)","import React from \"react\";\nimport styleModule from \"./User.module.css\";\nimport userPhotoDefault from \"./../../../usersAvatars/user.png\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../redux/redusers/usersReducer/usersReducer\";\nimport {Button} from \"../../generic/Button/Button\";\nimport {BUTTON_STYLE} from \"../../Profile/MyPosts/MyPosts\";\nimport styled from \"styled-components\";\nimport {FOLLOW_UNFOLLOW_RESULT_CODES, usersAPI} from \"../../../api/api\";\n\n\ntype UserPropsType = {\n    /**\n     * Callbock that add someone user in followers\n     */\n    becomeFollower: (userID: number) => void\n    /**\n     * Callbock that remove someone user from followers\n     */\n    stopBeingFollower: (userID: number) => void\n    followingInProcessUsersId: number[]\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n    background?: string\n    color?: string\n} & UserType\n\nexport const User = React.memo((props: UserPropsType) => {\n    const UserWrapper = styled.div`\n    & {\n    background: ${props.background ? props.background : 'tomato'};\n    color: ${props.color ? props.color : 'white'}\n    }\n    `\n    const Img = styled.img`\n    & {\n    border-color: ${props.color ? props.color : 'white'}\n    }\n    `\n    let onFollowClick = () => {\n        props.toggleFollowingInProcess(props.id, true)\n        usersAPI.becomeFollower(props.id).then(data => {\n            if (data.resultCode === FOLLOW_UNFOLLOW_RESULT_CODES.success) {\n                props.becomeFollower(props.id)\n            }\n            props.toggleFollowingInProcess(props.id, false)\n        })\n    };\n    let onUnfollowClick = () => {\n        props.toggleFollowingInProcess(props.id, true)\n        usersAPI.stopBeingFollower(props.id).then(data => {\n            if (data.resultCode === FOLLOW_UNFOLLOW_RESULT_CODES.success) {\n                props.stopBeingFollower(props.id)\n            }\n            props.toggleFollowingInProcess(props.id, false)\n        })\n\n    };\n    //is follow button disabled?\n    const isFollowingButtonDisabled = props.followingInProcessUsersId.includes(props.id)\n    return (\n        <UserWrapper className={styleModule.userWrapper}>\n            <div className={styleModule.avatar}>\n                <NavLink to={`/profile/${props.id}`}>\n                    <Img src={props.photos.small !== null ? props.photos.small : userPhotoDefault} alt=\"\"/>\n                </NavLink>\n            </div>\n            <div className={styleModule.fullName}>\n                {props.name}\n            </div>\n            <div className={styleModule.status}>\n                <span>{props.status}</span>\n            </div>\n            <div className={styleModule.followed}>\n                {props.followed ?\n                    <Button name={'Unfollow'}\n                            onClick={onUnfollowClick}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}\n                            disabled={isFollowingButtonDisabled}/> :\n                    <Button name={'Follow'}\n                            onClick={onFollowClick}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}\n                            disabled={isFollowingButtonDisabled}/>\n                }\n            </div>\n        </UserWrapper>\n    )\n})\n","import React, {useMemo, useState} from \"react\";\nimport styleModule from './Paginator.module.css';\n\nexport type PaginatorPropsType = {\n    portionSize: number\n    currentPage: number\n    pageSize: number\n    totalItemsCount: number\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Paginator = React.memo(({portionSize = 12, ...props}: PaginatorPropsType) => {\n\n    const {pageCount, pages}: { pageCount: number, pages: Array<number> } = useMemo(() => {\n        const pageCount = Math.ceil(props.totalItemsCount / props.pageSize)\n        let pages: Array<number> = [];\n        for (let i = 1; i <= pageCount; i++) {\n            pages.push(i)\n        }\n        return {pageCount, pages}\n    }, [props.totalItemsCount, props.pageSize])\n\n\n    let [portionNumber, setPortionNumber] = useState<number>(1);\n    const portionCount: number = Math.ceil(pageCount / portionSize);\n\n    const leftPortionPageNumber: number = useMemo(() => {\n        return portionSize * (portionNumber - 1) + 1\n    }, [portionSize,\n        portionNumber])\n    const rightPortionPageNumber: number = useMemo(() => {\n        return portionSize * portionNumber;\n    }, [portionSize, portionNumber])\n    return (\n        <div className={styleModule.paginator}>\n            {portionNumber > 1 && <button className={styleModule.firstPage} onClick={() => {\n                setPortionNumber(1)\n            }}>{\"First\"}</button>}\n            {portionNumber > 1 && <button className={styleModule.pagesToBack} onClick={() => {\n                setPortionNumber(portionNumber - 1)\n            }}>{\"Prev\"}</button>}\n            {portionNumber > 1 && <span className={styleModule.threeDots}>{\". . .\"}</span>}\n\n            {pages.filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\n                .map(page => <span key={page} className={props.currentPage === page ? styleModule.selectedPage : ''}\n                                   onClick={() => {\n                                       props.onChangePage(page)\n                                   }}>{page}</span>\n                )}\n\n            {portionNumber < portionCount && <span className={styleModule.threeDots}>{\". . .\"}</span>}\n            {portionNumber < portionCount && <button className={styleModule.pagesToForward} onClick={() => {\n                setPortionNumber(portionNumber + 1)\n            }}>{\"Next\"}</button>}\n            {portionNumber < portionCount && <button className={styleModule.lastPage} onClick={() => {\n                setPortionNumber(portionNumber = portionCount)\n            }}>{\"Last\"}</button>}\n        </div>\n    );\n});\n","import React from \"react\";\nimport styleModule from './Preloader.module.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\ntype PreloaderPropsType = {\n    size: string\n    color: string\n}\n\n\nexport const Preloader = ({size, color}: PreloaderPropsType) => {\n    return (\n        <div className={styleModule.preloaderBlock}>\n            <FontAwesomeIcon style={{fontSize: size, color: color}} className={styleModule.preloaderIcon}\n                             icon={faSpinner}/>\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './Users.module.css';\nimport {User} from \"./User/User\";\nimport {Paginator} from \"../generic/Paginator/Paginator\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {UsersApiContainerPropsType} from \"./UsersContainer\";\n\n\ntype UsersPropsType = UsersApiContainerPropsType & {\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Users = React.memo((props: UsersPropsType) => {\n\n    const {\n        users,\n        becomeFollower,\n        stopBeingFollower,\n        usersTotalCount,\n        pageSize,\n        currentPage,\n        onChangePage,\n        isFetching,\n        followingInProcessUsersId,\n        toggleFollowingInProcess,\n    } = props\n\n    let userElements = users.map(user => <User {...user}\n                                               becomeFollower={becomeFollower}\n                                               stopBeingFollower={stopBeingFollower}\n                                               followingInProcessUsersId={followingInProcessUsersId}\n                                               toggleFollowingInProcess={toggleFollowingInProcess}/>);\n    return (\n        <div className={styleModule.usersWrapper}>\n            <div>\n                <Paginator portionSize={10}\n                           currentPage={currentPage}\n                           pageSize={pageSize}\n                           totalItemsCount={usersTotalCount}\n                           onChangePage={onChangePage}/>\n            </div>\n            {isFetching ? <Preloader size={'100px'} color={'#ffffff'}/> :\n                <div className={styleModule.usersBlock}>\n                    {userElements}\n                </div>}\n\n        </div>\n    )\n})\n\n\n\n","export enum PROFILE_ACTIONS_TYPES {\r\n    ADD_POST = 'social/profile/ADD-POST',\r\n    UPDATE_NEW_POST_TEXT = 'social/profile/UPDATE_NEW_POST_TEXT',\r\n    REMOVE_POST = \"social/profile/REMOVE_POST\",\r\n    LIKE_POST = 'social/profile/LIKE_POST',\r\n    SET_PROFILE = 'social/profile/SET_PROFILE',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    name: string\r\n    message: string\r\n    likes: {\r\n        icon: string\r\n        likeCount: number\r\n    }\r\n    isLike: boolean\r\n    image: string | null\r\n    background?: string\r\n    color?: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null,\r\n}\r\nexport type PhotosType = {\r\n    small: string | null,\r\n    large: string | null,\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type InitialStateProfileType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deleniti, eum.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Mariya',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur cumque harum illo inventore maiores minus mollitia, quaerat quis rem voluptatibus.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: null\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ivan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis est, et labore laborum nemo nisi.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 87,\r\n            },\r\n            isLike: true,\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album'\r\n        }\r\n    ] as Array<PostType>,\r\n    newPostText: '',\r\n    profile: null as ProfileType | null,\r\n};\r\n\r\nexport const profileReducer = (state: InitialStateProfileType = initialState, action: ActionType): InitialStateProfileType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTIONS_TYPES.ADD_POST:\r\n            const newPost = {\r\n                id: state.postsData.length + 1,\r\n                name: 'Someone',\r\n                message: state.newPostText,\r\n                likes: {\r\n                    icon: '❤',\r\n                    likeCount: 0,\r\n                },\r\n                isLike: false,\r\n                image: null\r\n            };\r\n            return {...state, postsData: [newPost, ...state.postsData], newPostText: ''}\r\n        case PROFILE_ACTIONS_TYPES.UPDATE_NEW_POST_TEXT:\r\n        case PROFILE_ACTIONS_TYPES.SET_PROFILE:\r\n            return {...state, ...action.payload}\r\n        case PROFILE_ACTIONS_TYPES.REMOVE_POST:\r\n            return (\r\n                {...state, postsData: state.postsData.filter(p => p.id !== action.payload.id)}\r\n            );\r\n        case PROFILE_ACTIONS_TYPES.LIKE_POST:\r\n            return (\r\n                {\r\n                    ...state, postsData: state.postsData.map(p => p.id === action.payload.id ?\r\n                        {\r\n                            ...p, isLike: !p.isLike, likes:\r\n                                {...p.likes, likeCount: p.isLike ? p.likes.likeCount - 1 : p.likes.likeCount + 1}\r\n                        } : p)\r\n                }\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionType =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof updateNewPostText> |\r\n    ReturnType<typeof removePost> |\r\n    ReturnType<typeof likePost> |\r\n    ReturnType<typeof setProfile>\r\n\r\n\r\n\r\nexport const addPost = () => ({type: PROFILE_ACTIONS_TYPES.ADD_POST} as const);\r\nexport const updateNewPostText = (newPostText: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.UPDATE_NEW_POST_TEXT,\r\n    payload: {newPostText}\r\n} as const);\r\nexport const removePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.REMOVE_POST, payload: {id}} as const);\r\nexport const likePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.LIKE_POST, payload: {id}} as const);\r\nexport const setProfile = (profile:ProfileType) => ({type: PROFILE_ACTIONS_TYPES.SET_PROFILE, payload: {profile}} as const);","import {connect} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    becomeFollower,\n    setCurrentPage,\n    setIsFetchingValue,\n    setUsers,\n    setUsersTotalCount,\n    stopBeingFollower, toggleFollowingInProcess,\n    UserType\n} from \"../../redux/redusers/usersReducer/usersReducer\";\nimport React from \"react\";\nimport {usersAPI} from \"../../api/api\";\n\n\nclass UsersApiContainer extends React.Component<UsersApiContainerPropsType> {\n\n    componentDidMount(): void {\n        const {currentPage, pageSize, users, setUsers, setUsersTotalCount, setIsFetchingValue} = this.props\n        //get request for getting users\n        if (!users.length) {\n            setIsFetchingValue(true)\n            usersAPI.getUsers(pageSize, currentPage).then(data => {\n                setIsFetchingValue(false)\n                setUsers(data.items)\n                setUsersTotalCount(data.totalCount)\n            })\n        }\n    }\n\n    //optimization of unnecessary rendering. Alternative of React.memo\n    shouldComponentUpdate(nextProps: Readonly<UsersApiContainerPropsType>, nextState: Readonly<{}>): boolean {\n        return nextProps !== this.props || nextState !== this.state\n    }\n\n    // action for pressing on page number\n    onChangePage = (pageNumber: number) => {\n        const {pageSize, setUsers, setIsFetchingValue} = this.props\n        this.props.setCurrentPage(pageNumber)\n        setIsFetchingValue(true)\n        usersAPI.getUsers(pageSize, pageNumber).then(data => {\n            setIsFetchingValue(false)\n            setUsers(data.items)\n        })\n    }\n\n    render() {\n        return (\n            <Users {...this.props}\n                   onChangePage={this.onChangePage}\n            />\n        )\n    }\n}\n\n//functionality for redux\n\ntype MapStateToPropsType = {\n    users: UserType[],\n    usersTotalCount: number,\n    pageSize: number,\n    currentPage: number\n    isFetching: boolean\n    followingInProcessUsersId: number[]\n}\ntype MapDispatchToPropsType = {\n    becomeFollower: (userID: number) => void\n    stopBeingFollower: (userID: number) => void\n    setUsers: (users: UserType[]) => void\n    setCurrentPage: (page: number) => void\n    setUsersTotalCount: (usersTotalCount: number) => void\n    setIsFetchingValue: (isFetching: boolean) => void\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n}\n\nexport type UsersApiContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        usersTotalCount: state.usersPage.usersTotalCount,\n        pageSize: state.usersPage.pageSize,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProcessUsersId: state.usersPage.followingInProcessUsersId,\n    }\n}\n\nexport const UsersContainer = connect(mapStateToProps, {\n    becomeFollower,\n    stopBeingFollower,\n    setUsers,\n    setCurrentPage,\n    setUsersTotalCount,\n    setIsFetchingValue,\n    toggleFollowingInProcess,\n} as MapDispatchToPropsType)(UsersApiContainer)","//hoc for getting params\r\nimport React from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => {\r\n    const ComponentWithRouter = (props: object) => {\r\n        const params = useParams<'*'>() //... <= profile/*\r\n        return (\r\n            <WrappedComponent {...props} params={params}/>\r\n        )\r\n    }\r\n    return ComponentWithRouter\r\n}","import {AuthUserDataType} from \"../../../api/api\";\r\n\r\n\r\nexport enum AUTH_ACTIONS_TYPES {\r\n    SET_AUTH_USER_DATA = 'social/auth/SET_AUTH_USER_DATA',\r\n    SET_FULL_NAME_AND_AVATAR = 'social/auth/SET_FULL_NAME_AND_AVATAR',\r\n}\r\n\r\nexport type InitialStateAuthType = typeof initialState\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    fullName: null as null | string,\r\n    avatar: null as null | string\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA:\r\n        case AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR:\r\n            return {\r\n                ...state, isAuth: true, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType =\r\n    ReturnType<typeof setAuthUserData>|\r\n    ReturnType<typeof setFullNameAndAvatar>\r\n\r\n\r\nexport const setAuthUserData = ({id, email, login}: AuthUserDataType) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA,\r\n    payload: {id, email, login}\r\n})\r\nexport const setFullNameAndAvatar = (fullName: string, avatar: string | null) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR,\r\n    payload: {fullName, avatar}\r\n})","export default __webpack_public_path__ + \"static/media/top-wallpaper.47d6d9d7.jpg\";","import React from \"react\";\nimport styleModule from './ProfileInfo.module.css';\nimport top_wallpaper from \"../../../top-wallpaper.jpg\";\nimport logo_avatar from '../../../usersAvatars/user.png';\nimport {ProfileAPIContainerPropsType} from \"../ProfileContainer\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\n\ntype ProfileInfoPropsType = ProfileAPIContainerPropsType\n\nexport const ProfileInfo = React.memo(({profile}: ProfileInfoPropsType) => {\n\n    return (\n        <div className={styleModule.profileInfo}>\n            <div className={styleModule.top_wallpaper}>\n                <img src={top_wallpaper} alt=\"top_wallpaper\"/>\n            </div>\n            <div className={styleModule.avatarAndFullName}>\n                <div className={styleModule.image}>\n                    <img src={profile?.photos.large || logo_avatar}/>\n                </div>\n                <div className={styleModule.fullName}>{profile?.fullName}</div>\n\n                {/*кнопка изменения фото*/}\n                {/*{isOwner &&\n                <div className={styleModule.editMainPhoto}>\n                    <input onChange={onChangeAvatarPhoto} type=\"file\"/>\n                    <label>\n                        <svg height=\"20\" viewBox=\"0 0 512 512\">\n                            <path\n                                d=\"M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z\"></path>\n                        </svg>\n                    </label>\n                </div>}*/}\n\n            </div>\n            <div className={styleModule.description}>\n\n                {/*{!editProfileMode &&*/}\n\n                <div className={styleModule.wrapper_description}>\n\n\n                    {/*<ProfileStatus status={status} updateStatus={updateStatus}/>*/}\n\n                    <div className={styleModule.aboutMe}>{profile?.aboutMe}</div>\n\n                    <div className={styleModule.lookingForAJob}>\n                        <div className={styleModule.statusJob}>\n                            <div className={styleModule.heading}>OPEN TO WORK:</div>\n                            <div className={styleModule.logo}>{profile?.lookingForAJob ?\n                                <FontAwesomeIcon icon={faCheck} className={styleModule.iconYes}/> :\n                                <FontAwesomeIcon icon={faTimes} className={styleModule.iconNot}/>}\n                            </div>\n                        </div>\n                        <div className={styleModule.descriptionJob}>{profile?.lookingForAJobDescription}</div>\n                    </div>\n\n\n                    {/*{isOwner &&\n                    <div className={styleModule.toEditMode}>\n                        <button onClick={activateEditMode}>\n                            <svg viewBox=\"0 0 469 469\">\n                                <path d=\"M438.931,30.403c-40.4-40.5-106.1-40.5-146.5,0l-268.6,268.5c-2.1,2.1-3.4,4.8-3.8,7.7l-19.9,147.4\n\t\tc-0.6,4.2,0.9,8.4,3.8,11.3c2.5,2.5,6,4,9.5,4c0.6,0,1.2,0,1.8-0.1l88.8-12c7.4-1,12.6-7.8,11.6-15.2c-1-7.4-7.8-12.6-15.2-11.6\n\t\tl-71.2,9.6l13.9-102.8l108.2,108.2c2.5,2.5,6,4,9.5,4s7-1.4,9.5-4l268.6-268.5c19.6-19.6,30.4-45.6,30.4-73.3\n\t\tS458.531,49.903,438.931,30.403z M297.631,63.403l45.1,45.1l-245.1,245.1l-45.1-45.1L297.631,63.403z M160.931,416.803l-44.1-44.1\n\t\tl245.1-245.1l44.1,44.1L160.931,416.803z M424.831,152.403l-107.9-107.9c13.7-11.3,30.8-17.5,48.8-17.5c20.5,0,39.7,8,54.2,22.4\n\t\ts22.4,33.7,22.4,54.2C442.331,121.703,436.131,138.703,424.831,152.403z\"/>\n                            </svg>\n                        </button>\n                    </div>\n                    }*/}\n\n                </div>\n\n                {/*}*/}\n\n                {/*{editProfileMode && <EditProfileForm onSubmit={onSubmit} profile={profile}\n                                                     updateProfileDescription={updateProfileDescription}/>}\n\n                <Contacts profile={profile} updateProfileDescription={updateProfileDescription} />*/}\n            </div>\n        </div>\n    )\n});\n\n","import React from \"react\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {\n    addPost,\n    likePost,\n    PostType,\n    removePost,\n    updateNewPostText\n} from \"../../../redux/redusers/profileReducer/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nexport type MapStateToPropsType = {\n    postsData: PostType[]\n    newPostText: string\n}\n\nexport type MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n    updateNewPostText: (newPostText: string) => void\n    removePost: (id: number) => void\n    likePost: (id: number) => void\n}\n\nexport type MyPostsPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    {params: {['*']:string}}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        postsData: state.profilePage.postsData,\n        newPostText: state.profilePage.newPostText,\n\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, {\n    addPost,\n    updateNewPostText,\n    removePost,\n    likePost,\n} as MapDispatchToPropsType)(MyPosts);\n","import React from \"react\";\nimport styleModule from './Profile.module.css';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileAPIContainerPropsType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = ProfileAPIContainerPropsType\n\nexport const Profile = React.memo((props:ProfilePropsType) => {\n    return (\n        <div className={styleModule.content}>\n            <ProfileInfo {...props}/>\n            <MyPostsContainer params={props.params}/>\n        </div>\n    );\n})\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {ProfileType, setProfile} from \"../../redux/redusers/profileReducer/profileReducer\";\nimport {Profile} from \"./Profile\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {withRouter} from \"../../hoc/withRouter\";\nimport {profileAPI} from \"../../api/api\";\n\n\nclass ProfileAPIContainer extends React.Component<ProfileAPIContainerPropsType> {\n\n    refreshProfile = () => {\n        const {setProfile, params} = this.props\n        let userId = params[\"*\"]\n        if (!userId || userId === '*') {\n            userId = '20392'\n        }\n        profileAPI.getProfile(userId)\n            .then(data => {\n                setProfile(data)\n            })\n    }\n\n    componentDidMount(): void {\n        this.refreshProfile()\n    }\n\n    //getting own profile after switching from someone profile to your own\n    componentDidUpdate(prevProps: Readonly<ProfileAPIContainerPropsType>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (prevProps.params !== this.props.params) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n\n        return this.props.profile ? (\n                <Profile {...this.props}/>) :\n            (<Preloader size={'100px'} color={'#ffffff'}/>\n            )\n    }\n}\n\nexport type ProfileAPIContainerPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    { params: { ['*']: string } } //... <= profile/*... => type for props\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n}\ntype MapDispatchToPropsType = {\n    setProfile: (profile: ProfileType) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile\n})\n\n\nexport const ProfileContainer = connect(mapStateToProps, {setProfile} as MapDispatchToPropsType)(withRouter(ProfileAPIContainer))\n\n\n","import React from \"react\";\r\nimport styleModule from './Header.module.css';\r\nimport styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {HeaderAPIContainerPropsType} from \"./HeaderContainer\";\r\nimport logo_avatar from '../../usersAvatars/user.png'\r\n\r\nexport type HeaderPropsType = {\r\n    title: string\r\n    description?: string\r\n    background: string\r\n    color: string\r\n    logo?: string\r\n} & HeaderAPIContainerPropsType\r\n\r\n\r\nexport const Header = React.memo((props: HeaderPropsType) => {\r\n    const {\r\n        title,\r\n        description,\r\n        background,\r\n        color,\r\n        logo,\r\n        avatar,\r\n        fullName,\r\n        auth,\r\n    } = props\r\n    const Header = styled.header`\r\n    & {\r\n    background: ${background}\r\n    `;\r\n    const TitleDescription = styled.div`\r\n    & p {\r\n    color: ${color}\r\n    }\r\n    `;\r\n    return (\r\n        <Header className={styleModule.header}>\r\n            <div className={styleModule.logoAndDescription}>\r\n                <div className={styleModule.logo}>\r\n                    <img src={logo} className={styleModule.main_logo}/>\r\n                </div>\r\n                <TitleDescription className={styleModule.title_description}>\r\n                    <p>{title}</p>\r\n                    <p>{description}</p>\r\n                </TitleDescription>\r\n            </div>\r\n            <div className={styleModule.loginStatus}>\r\n\r\n                {auth.isAuth ?\r\n                    <div className={styleModule.loginAndAvatar}>\r\n                        <div className={styleModule.avatar}>\r\n                            <img src={avatar ? avatar : logo_avatar}/>\r\n                        </div>\r\n                        <div className={styleModule.loginValue}>{fullName}</div>\r\n\r\n                        {/*<div className={styleModule.logoutButton}><button onClick={props.logout} >LOGOUT</button></div>*/}\r\n\r\n                    </div> :\r\n                    <NavLink to={'/login'}>\r\n                        LOGIN\r\n                    </NavLink>}\r\n            </div>\r\n        </Header>\r\n    );\r\n})\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Header} from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {InitialStateAuthType, setAuthUserData, setFullNameAndAvatar} from \"../../redux/redusers/auth/authReducer\";\r\nimport {HEADER_STYLE} from \"../../App\";\r\nimport axios from \"axios\";\r\nimport {ProfileType} from \"../../redux/redusers/profileReducer/profileReducer\";\r\nimport {AUTH_ME_RESULT_CODES, authMeAPI, profileAPI} from \"../../api/api\";\r\n\r\nexport type DataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: DataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n\r\nclass HeaderAPIContainer extends React.Component<HeaderAPIContainerPropsType> {\r\n    componentDidMount(): void {\r\n        const {setAuthUserData, setFullNameAndAvatar} = this.props\r\n        authMeAPI.getAuthorizationInfo().then(data => {\r\n            if (data.resultCode === AUTH_ME_RESULT_CODES.success) {\r\n                setAuthUserData(data.data)\r\n            }\r\n        }).then(() => {\r\n            this.props.auth.id &&  profileAPI.getProfile(this.props.auth.id)\r\n               .then(data => {\r\n                    const fullName = data.fullName\r\n                    const avatar = data.photos.small\r\n                    setFullNameAndAvatar(fullName, avatar)\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <Header title={'Cloudpaper'}\r\n                    description={'Connecting Network'}\r\n                    background={HEADER_STYLE.background}\r\n                    color={HEADER_STYLE.color}\r\n                    logo={HEADER_STYLE.logo}\r\n                    {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport type HeaderAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    auth: InitialStateAuthType\r\n    fullName: string | null\r\n    avatar: string | null | undefined\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setAuthUserData: ({id, email, login}: { id: number, email: string, login: string }) => void\r\n    setFullNameAndAvatar: (fullName: string, avatar: string | null) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth,\r\n        fullName: state.auth.fullName,\r\n        avatar: state.auth.avatar,\r\n    }\r\n};\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {\r\n    setAuthUserData,\r\n    setFullNameAndAvatar\r\n} as MapDispatchToPropsType)(HeaderAPIContainer)\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Music} from \"./components/Music/Music\";\nimport {News} from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport logo from './main-logo.png';\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\n\n\nexport type PATHType = {\n    PROFILE: string\n    DIALOGS: string\n    MUSIC: string\n    NEWS: string\n    USERS: string\n    SETTINGS: string\n}\nconst PATH: PATHType = {\n    PROFILE: '/profile/*',\n    DIALOGS: '/dialogs/*',\n    MUSIC: '/music',\n    NEWS: '/news',\n    USERS: '/users',\n    SETTINGS: '/settings'\n};\n\nexport const HEADER_STYLE = {\n    background: '#7D823F',\n    color: '#ffffff',\n    logo: logo\n};\n\nfunction App() {\n    return (\n            <div className=\"app_wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app_wrapper_content\">\n                    <Routes>\n                        <Route path='/' element={<Navigate to={PATH.PROFILE}/>}/>\n                        <Route path={PATH.PROFILE} element={<ProfileContainer />}/>\n                        <Route path={PATH.DIALOGS} element={<DialogsContainer/>}/>\n                        <Route path={PATH.MUSIC} element={<Music/>}/>\n                        <Route path={PATH.NEWS} element={<News/>}/>\n                        <Route path={PATH.USERS} element={<UsersContainer/>}/>\n                        <Route path={PATH.SETTINGS} element={<Settings/>}/>\n                    </Routes>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n","import {profileReducer} from \"./redusers/profileReducer/profileReducer\";\r\nimport {dialogsReducer} from \"./redusers/dialogsReducer/dialogsReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {usersReducer} from \"./redusers/usersReducer/usersReducer\";\r\nimport {authReducer} from \"./redusers/auth/authReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n    }\r\n);\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}