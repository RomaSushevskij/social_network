{"version":3,"sources":["components/Dialogs/Mesage/Message.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/generic/Paginator/Paginator.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Users/User/User.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Users/Users.module.css","components/generic/Preloader/Preloader.module.css","components/Navbar/Navbar.module.css","components/generic/UnderConstruction/UnderConstruction.module.css","components/generic/Button/Button.module.css","components/generic/Textarea/Textarea.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.tsx","underConstruction.png","components/generic/UnderConstruction/UnderConstruction.tsx","components/Music/Music.tsx","components/News/News.tsx","main-logo.png","api/api.ts","redux/redusers/dialogsReducer/dialogsReducer.ts","usersAvatars/user.png","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Mesage/Message.tsx","components/generic/Button/Button.tsx","components/generic/Textarea/Textarea.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/User/User.tsx","components/generic/Paginator/Paginator.tsx","components/generic/Preloader/Preloader.tsx","components/Users/Users.tsx","redux/redusers/usersReducer/usersReducer.ts","redux/redusers/profileReducer/profileReducer.ts","components/Users/UsersContainer.tsx","hoc/withRouter.tsx","redux/redusers/auth/authReducer.ts","top-wallpaper.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Settings/Settings.tsx","components/Settings/SettingsContainer.tsx","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","React","memo","className","styleModule","nav","item","to","profile","isActive","active","icon","faUserAlt","dialogs","faCommentDots","news","faNewspaper","music","faHeadphonesAlt","users","faUsers","settings","faSlidersH","UnderConstruction","container","src","logo","alt","Music","props","News","FOLLOW_UNFOLLOW_RESULT_CODES","AUTH_ME_RESULT_CODES","initialState","dialogsData","id","name","image","messagesData","message","time","newMessageText","Dialog","background","color","DialogWrapper","styled","div","ContactAvatar","dialog","contactAvatar","userLogo","dialogActive","Message","meBackground","meColor","MessageBlock","Avatar","messageWrapperStyle","messageWrapper","meMessageWrapper","messageBlockStyle","messageBlock","meMessageBlock","avatar","messageAva","Button","onClick","disabled","ButtonWithBefore","button","backgroundHover","colorHover","style","Textarea","textareaValue","setTextareaValue","reference","placeholder","onAddWithEnter","styles","textarea","onChange","onKeyPress","value","ref","Post","likes","isLike","removePost","likePost","PostWrapper","LikesDiv","postWrapper","avaBlock","ava_post","faTimes","onCrossClick","onLikeClick","likesBlock","likeCount","BUTTON_STYLE","POST_STYLE","MyPosts","myPosts","writePost","e","updateNewPostText","currentTarget","newPostText","shiftKey","key","preventDefault","trim","addPost","addPostButton","posts","postsData","map","post","MESSAGE_STYLE","DIALOG_STYLE","Dialogs","isAuth","heading","dialogs_items","dialogsPage","messagesBlock","messages","writeAndSendMessage","writeMessage","updateNewMessageText","addMessageWithEnter","sendMessage","addMessage","PATH","LOGIN","DialogsContainer","connect","state","auth","dispatch","type","payload","updateNewMessageTextAC","User","UserWrapper","Img","img","isFollowingButtonDisabled","followingInProcessUsersId","includes","userWrapper","photos","small","userPhotoDefault","fullName","status","followed","stopBeingFollower","becomeFollower","Paginator","portionSize","useMemo","pageCount","Math","ceil","totalItemsCount","pageSize","pages","i","push","useState","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","firstPage","pagesToBack","threeDots","filter","page","currentPage","selectedPage","onChangePage","pagesToForward","lastPage","Preloader","size","preloaderBlock","fontSize","preloaderIcon","faSpinner","Users","usersTotalCount","isFetching","toggleFollowingInProcess","userElements","user","usersWrapper","usersBlock","USERS_ACTIONS_TYPES","instance_1","axios","create","baseURL","withCredentials","headers","usersAPI","get","then","response","data","userId","delete","profileAPI","authMeAPI","PROFILE_ACTIONS_TYPES","setUsers","SET_USERS","setIsFetchingValue","SET_IS_FETCHING_VALUE","followingInProcess","TOGGLE_FOLLOWING_IN_PROCESS","UsersApiContainer","pageNumber","repeatGetUsers","this","getUsers","nextProps","nextState","Component","UsersContainer","usersPage","userID","resultCode","success","FOLLOW","UNFOLLOW","items","totalCount","SET_USERS_TOTAL_COUNT","SET_CURRENT_PAGE","WrappedComponent","AUTH_ACTIONS_TYPES","ProfileInfo","profileInfo","top_wallpaper","avatarAndFullName","large","logo_avatar","description","wrapper_description","aboutMe","lookingForAJob","statusJob","faCheck","iconYes","iconNot","descriptionJob","lookingForAJobDescription","MyPostsContainer","profilePage","ADD_POST","UPDATE_NEW_POST_TEXT","REMOVE_POST","LIKE_POST","Profile","content","params","ProfileAPIContainer","refreshProfile","getProfile","Number","prevProps","prevState","snapshot","ProfileContainer","SET_PROFILE","useParams","Header","title","header","TitleDescription","logoAndDescription","main_logo","title_description","loginStatus","loginAndAvatar","loginValue","email","login","HeaderAPIContainer","render","HEADER_STYLE","getAuthorizationInfo","HeaderContainer","getState","SET_AUTH_USER_DATA","setAuthUserData","SET_FULL_NAME_AND_AVATAR","setFullNameAndAvatar","Login","Settings","SettingsContainer","useSelector","PROFILE","DIALOGS","MUSIC","NEWS","USERS","SETTINGS","App","path","element","rootReducer","combineReducers","action","newPost","length","p","newMessage","Date","toLocaleTimeString","slice","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b5996ffe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrapper\":\"Message_messageWrapper__2v9vO\",\"meMessageWrapper\":\"Message_meMessageWrapper__1MAX1\",\"messageBlock\":\"Message_messageBlock__3LBDi\",\"meMessageBlock\":\"Message_meMessageBlock__1x_NA\",\"name\":\"Message_name__3Gp6r\",\"message\":\"Message_message__9Gaxr\",\"time\":\"Message_time__2pDBU\",\"avatar\":\"Message_avatar__1V7_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__rKeBu\",\"logoAndDescription\":\"Header_logoAndDescription__36SJL\",\"main_logo\":\"Header_main_logo__227Ld\",\"title_description\":\"Header_title_description__3Sd-q\",\"logo\":\"Header_logo__Z7xS8\",\"loginStatus\":\"Header_loginStatus__27OBc\",\"loginAndAvatar\":\"Header_loginAndAvatar__OJ0Lj\",\"loginValue\":\"Header_loginValue__35gNe\",\"logoutButton\":\"Header_logoutButton__1jl7V\",\"avatar\":\"Header_avatar__1X7_3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1o3_i\",\"heading\":\"Dialogs_heading__2LCaS\",\"dialogs_items\":\"Dialogs_dialogs_items__1CN3_\",\"messagesBlock\":\"Dialogs_messagesBlock___yNFN\",\"messages\":\"Dialogs_messages__174fl\",\"meMessages\":\"Dialogs_meMessages__2Nq9R\",\"writeMessage\":\"Dialogs_writeMessage__2da3A\",\"writeAndSendMessage\":\"Dialogs_writeAndSendMessage__3VXCn\",\"sendMessage\":\"Dialogs_sendMessage__2OMjS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2Taf7\",\"pagesToBack\":\"Paginator_pagesToBack__2y2Mx\",\"pagesToForward\":\"Paginator_pagesToForward__3ky62\",\"firstPage\":\"Paginator_firstPage__2QU6j\",\"lastPage\":\"Paginator_lastPage__gXtZR\",\"selectedPage\":\"Paginator_selectedPage__JE0qS\",\"threeDots\":\"Paginator_threeDots__13XX3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__2dad-\",\"avaBlock\":\"Post_avaBlock__1eypn\",\"messageBlock\":\"Post_messageBlock__q4MKJ\",\"likesBlock\":\"Post_likesBlock__W2PfY\",\"removePost\":\"Post_removePost__ZIsFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"User_userWrapper__HCUEE\",\"avatar\":\"User_avatar__3jo1S\",\"status\":\"User_status__oyUvl\",\"fullName\":\"User_fullName__dcBJC\",\"followed\":\"User_followed__suzg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__14xNj\",\"addPostButton\":\"MyPosts_addPostButton__3kHYc\",\"writePost\":\"MyPosts_writePost__rmb23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2L0-V\",\"contactAvatar\":\"Dialog_contactAvatar__2NdvE\",\"dialogActive\":\"Dialog_dialogActive__2hnMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersBlock\":\"Users_usersBlock__wcdhv\",\"usersWrapper\":\"Users_usersWrapper__2NpI5\",\"buttonBlock\":\"Users_buttonBlock__3E4rQ\",\"selectedPage\":\"Users_selectedPage__2Qq8Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderBlock\":\"Preloader_preloaderBlock__3EBOq\",\"preloaderIcon\":\"Preloader_preloaderIcon__QSMsa\",\"rotate-center\":\"Preloader_rotate-center__1wFP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2lBSZ\",\"item\":\"Navbar_item__Ozyip\",\"icon\":\"Navbar_icon__2lJWr\",\"active\":\"Navbar_active__34byn\",\"settings\":\"Navbar_settings__2WR45\",\"users\":\"Navbar_users__rOSsB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UnderConstruction_container__3E9Tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__egdZh\",\"rotate-center\":\"Button_rotate-center__1PBd9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__3tLx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__7ylqO\",\"avatarAndFullName\":\"ProfileInfo_avatarAndFullName__5j74l\",\"image\":\"ProfileInfo_image__19lBH\",\"fullName\":\"ProfileInfo_fullName__15UDG\",\"top_wallpaper\":\"ProfileInfo_top_wallpaper__1_yd0\",\"description\":\"ProfileInfo_description__3f-6U\",\"aboutMe\":\"ProfileInfo_aboutMe__AeW_S\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__h-vFk\",\"statusJob\":\"ProfileInfo_statusJob__2KhXS\",\"heading\":\"ProfileInfo_heading__1KCBL\",\"iconYes\":\"ProfileInfo_iconYes__3682c\",\"iconNot\":\"ProfileInfo_iconNot__1bYWv\",\"descriptionJob\":\"ProfileInfo_descriptionJob__omSRg\"};","import React from \"react\";\nimport './Navbar.module.css';\nimport styleModule from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCommentDots,\n    faHeadphonesAlt,\n    faNewspaper,\n    faSlidersH,\n    faUserAlt,\n    faUsers\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const Navbar = React.memo(() => {\n    return (\n        <>\n            <nav className={styleModule.nav}>\n                <div className={styleModule.item}>\n                    <NavLink to={'/profile'}\n                             className={profile => profile.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faUserAlt} className={styleModule.icon}/> Profile\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/dialogs'}\n                             className={dialogs => dialogs.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faCommentDots} className={styleModule.icon}/> Messages\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/news'} className={news => news.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faNewspaper} className={styleModule.icon}/> News\n                    </NavLink>\n                </div>\n                <div className={styleModule.item}>\n                    <NavLink to={'/music'} className={music => music.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faHeadphonesAlt} className={styleModule.icon}/> Music\n                    </NavLink>\n                </div>\n                <div className={`${styleModule.item} ${styleModule.users}`}>\n                    <NavLink to={'/users'} className={users => users.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faUsers} className={styleModule.icon}/> Users\n                    </NavLink>\n                </div>\n                <div className={`${styleModule.item} ${styleModule.settings}`}>\n                    <NavLink to={'/settings'}\n                             className={settings => settings.isActive ? styleModule.active : ''}>\n                        <FontAwesomeIcon icon={faSlidersH} className={styleModule.icon}/> Settings\n                    </NavLink>\n                </div>\n\n            </nav>\n        </>\n    )\n})\n","export default __webpack_public_path__ + \"static/media/underConstruction.9d99f69c.png\";","import logo from './../../../underConstruction.png'\r\nimport styleModule from './UnderConstruction.module.css'\r\nexport const UnderConstruction = () => {\r\n    return (\r\n        <div className={styleModule.container}>\r\n            <img src={logo} alt=\"Under Construction\"/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport styleModule from './Music.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport function Music(props:any) {\n    return (\n        <div>\n           <UnderConstruction/>\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './News.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\n\n\nexport function News(props:any) {\n    return (\n        <div>\n            <UnderConstruction/>\n        </div>\n    );\n}\n\n","export default __webpack_public_path__ + \"static/media/main-logo.8de3ea88.png\";","import axios from 'axios'\r\nimport {UserType} from \"../redux/redusers/usersReducer/usersReducer\";\r\nimport {ProfileType} from \"../redux/redusers/profileReducer/profileReducer\";\r\n\r\n//types------------------------------------------types\r\n//↓\r\n//USERS---\r\ntype GetUsersDataType = {\r\n    error: string | null\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\nexport type PostFollowDataType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: object\r\n    fieldsErrors: Array<any>\r\n}\r\nexport type DeleteFollowDataType = PostFollowDataType\r\nexport enum FOLLOW_UNFOLLOW_RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n}\r\n\r\n//PROFILE---\r\ntype GetProfileDataType = ProfileType\r\n\r\n//AUTH---\r\nexport type AuthUserDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: AuthUserDataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\nexport enum AUTH_ME_RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n}\r\n\r\n//↑\r\n//types------------------------------------------types\r\n\r\nconst instance_1 = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageSize: number, currentPage: number) {\r\n        return instance_1.get<GetUsersDataType>(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    becomeFollower(userId: number) {\r\n        return instance_1.post<PostFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    stopBeingFollower(userId: number) {\r\n        return instance_1.delete<DeleteFollowDataType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string | number) {\r\n        return instance_1.get<GetProfileDataType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\nexport let authMeAPI = {\r\n    getAuthorizationInfo() {\r\n        return instance_1.get<GetAuthUserDataType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n","export type DialogType = {\r\n    id: number\r\n    /**\r\n     * Name of contact/friend\r\n     */\r\n    name: string\r\n    /**\r\n     * Image of contact/friend\r\n     */\r\n    image: string | null\r\n    /**\r\n     * Optional background color of component\r\n     */\r\n    background?: string\r\n    /**\r\n     * Optional color text of component\r\n     */\r\n    color?: string\r\n};\r\nexport type MessageType = {\r\n    id: number,\r\n    name: string,\r\n    message: string,\r\n    image: string | null,\r\n    time: string\r\n};\r\nexport type InitialStateDialogsType = typeof initialState\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album'\r\n        },\r\n        {id: 2, name: 'Dmitry', image: null},\r\n        {\r\n            id: 3,\r\n            name: 'Aleksey',\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album'\r\n        },\r\n        {id: 4, name: 'Ivan', image: null},\r\n        {id: 5, name: 'Mother', image: null}\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. In, rem!',\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album',\r\n            time: '12:03'\r\n        },\r\n\r\n        {id: 20392, name: 'Me', message: 'Lorem ipsum dolor !', image: null, time: '12:10'},\r\n        {id: 2, name: 'Dmitry', message: 'Lorem ipsum dolor sit amet', image: null, time: '13:01'},\r\n        {\r\n            id: 3,\r\n            name: 'Ivan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album',\r\n            time: '13:08'\r\n        },\r\n        {\r\n            id: 20392,\r\n            name: 'Me',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\r\n            image: null,\r\n            time: '13:49'\r\n        },\r\n        {id: 4, name: 'Mother', message: 'Lorem ipsum dolor !', image: null, time: '14:05'},\r\n        {id: 20392, name: 'Me', message: 'Lorem ipsum dolor', image: null, time: '14:08'},\r\n        {\r\n            id: 20392,\r\n            name: 'Me',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit dolor sit amet, consectetur.',\r\n            image: null,\r\n            time: '14:10'\r\n        },\r\n        {id: 4, name: 'Mother', message: 'Lorem  consectetur adipisicin ipsum dolor !', image: null, time: '14:23'},\r\n    ] as Array<MessageType>,\r\n    newMessageText: ''\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: DialogsActionType): InitialStateDialogsType => {\r\n    switch (action.type) {\r\n        case \"social/dialogs/ADD-MESSAGE\":\r\n            const newMessage: MessageType = {\r\n                id: 20392,\r\n                name: 'Me',\r\n                message: state.newMessageText,\r\n                image: null,\r\n                time: new Date().toLocaleTimeString().slice(0, 5)\r\n            };\r\n            return {...state, messagesData: [...state.messagesData, newMessage], newMessageText: ''}\r\n        case \"social/dialogs/UPDATE-NEW-MESSAGE-TEXT\":\r\n            return {...state, newMessageText: action.payload.newMessageText}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport type DialogsActionType =\r\n    ReturnType<typeof addMessageAC> |\r\n    ReturnType<typeof updateNewMessageTextAC>\r\n\r\nexport const addMessageAC = () => ({type: 'social/dialogs/ADD-MESSAGE'} as const);\r\nexport const updateNewMessageTextAC = (newMessageText: string) => ({\r\n    type: 'social/dialogs/UPDATE-NEW-MESSAGE-TEXT',\r\n    payload: {newMessageText}\r\n} as const);","export default __webpack_public_path__ + \"static/media/user.cb380ae4.png\";","import React from \"react\";\nimport styleModule from './Dialog.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport userLogo from '../../../usersAvatars/user.png'\nimport {DialogType} from \"../../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport styled from \"styled-components\";\n\nexport type DialogPropsType = DialogType\n\nexport const Dialog = React.memo(({\n                           id,\n                           name,\n                           image,\n                           background,\n                           color, ...props\n                       }: DialogPropsType) => {\n    const DialogWrapper = styled.div`\n    & {\n    background: ${background ? background : '#FF6347'};\n    }\n    & a {\n    color: ${color ? color : '#ffffff'};\n    }\n    \n    `;\n    const ContactAvatar = styled.div`\n    & img {\n    border: 1px solid ${color ? color : '#ffffff'};\n    }\n    `\n    return (\n        <DialogWrapper className={styleModule.dialog}>\n            <ContactAvatar className={styleModule.contactAvatar}>\n                <img src={image ? image : userLogo} alt={'message avatar'}/>\n            </ContactAvatar>\n            <NavLink className={dialog => dialog.isActive ? styleModule.dialogActive : ''} to={`/dialogs/${id}`}>{name}</NavLink>\n        </DialogWrapper>\n    )\n})\n\n","import React, {useEffect} from \"react\";\nimport styleModule from './Message.module.css';\nimport messageAva from '../../../usersAvatars/user.png'\nimport styled from \"styled-components\";\n\nexport type MessagePropsType = {\n    id: number,\n    /**\n     * Name of the interlocutor\n     */\n    name: string,\n    /**\n     * Text of message\n     */\n    message: string,\n    /**\n     * Image of the interlocutor\n     */\n    image: string | null,\n    /**\n     * Time of sending message\n     */\n    time: string\n    background: string\n    color: string\n    meBackground: string\n    meColor: string\n}\n\nexport const Message = React.memo(({\n                                       id,\n                                       name,\n                                       message,\n                                       image,\n                                       time,\n                                       color,\n                                       background,\n                                       meBackground,\n                                       meColor,\n                                       ...props\n                                   }: MessagePropsType) => {\n    const MessageBlock = styled.div`\n    & {\n    background: ${id === 20392 ? meBackground : background};\n    color: ${id === 20392 ? meColor : color}\n    }\n    &:before {\n    background: radial-gradient(circle at top left, transparent 50%, ${id === 20392 ? meBackground : background} 50%);\n    }\n    `;\n    const Avatar = styled.div`\n    & {\n    border-color: ${background}\n    }\n    `;\n\n    // if the message is mine, then one style, if not, then another\n    const messageWrapperStyle = id === 20392 ?\n        `${styleModule.messageWrapper} ${styleModule.meMessageWrapper}` :\n        styleModule.messageWrapper\n    const messageBlockStyle = id === 20392\n        ?\n        `${styleModule.messageBlock} ${styleModule.meMessageBlock}` :\n        styleModule.messageBlock\n    return (\n        <div className={messageWrapperStyle}>\n            <MessageBlock className={messageBlockStyle}>\n                <div className={styleModule.name}>\n                    {name}\n                </div>\n                <div className={styleModule.message}>\n                    {message}\n                </div>\n                <div className={styleModule.time}>\n                    {time}\n                </div>\n            </MessageBlock>\n            <Avatar className={styleModule.avatar}>\n                <img src={image ? image : messageAva}/>\n            </Avatar>\n\n        </div>\n    )\n})\n\n","import React from \"react\";\r\nimport style from './Button.module.css'\r\nimport styled from \"styled-components\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    backgroundHover?: string\r\n    background?: string\r\n    colorHover?: string\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const Button = React.memo(({name, onClick, disabled, ...props}: ButtonPropsType) => {\r\n    const ButtonWithBefore = styled.button`\r\n& {\r\nborder-color: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\ncolor: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\nbackground-color:${props.background ? props.background : '#ffe1a9'}\r\n}\r\n&:before {\r\nbackground: ${props.backgroundHover ? props.backgroundHover : '#ffbf47'};\r\n}\r\n&:hover {\r\ncolor: ${props.colorHover ? props.colorHover : '#ffffff'}\r\n}\r\n`;\r\n\r\n    const onClickButton = () => {\r\n        onClick()\r\n    };\r\n\r\n    return (\r\n        <ButtonWithBefore onClick={onClickButton}\r\n                          className={style.button}\r\n                          disabled={disabled}>\r\n            {name}\r\n        </ButtonWithBefore>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, LegacyRef} from \"react\";\r\nimport style from './Textarea.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    textareaValue: string\r\n    setTextareaValue: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    onAddWithEnter?: (e: KeyboardEvent<HTMLTextAreaElement>) => void\r\n    reference?: LegacyRef<HTMLTextAreaElement>\r\n    placeholder: string\r\n    background: string\r\n    color: string\r\n}\r\n\r\nexport const Textarea = React.memo(({\r\n                             textareaValue,\r\n                             setTextareaValue,\r\n                             reference,\r\n                             placeholder,\r\n                             onAddWithEnter,\r\n                             background,\r\n                             color,\r\n                             ...restProps\r\n                         }: TextareaPropsType) => {\r\n    const styles = {\r\n        background: background,\r\n        color: color\r\n    };\r\n    return (\r\n        <textarea placeholder={placeholder}\r\n                  className={style.textarea}\r\n                  onChange={setTextareaValue}\r\n                  onKeyPress={onAddWithEnter}\r\n                  value={textareaValue}\r\n                  ref={reference}\r\n                  style={styles}\r\n        />\r\n    )\r\n})","import React from \"react\";\nimport styleModule from './Post.module.css'\nimport ava_post from '../../../../usersAvatars/user.png'\nimport {PostType} from \"../../../../redux/redusers/profileReducer/profileReducer\";\nimport styled from \"styled-components\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\ntype PostPropsType = PostType &\n    {\n        removePost: (id: number) => void\n        likePost: (id: number) => void\n    };\n\nexport const Post = React.memo(({\n                                    id,\n                                    name,\n                                    message,\n                                    likes,\n                                    isLike,\n                                    image,\n                                    background,\n                                    color,\n                                    removePost,\n                                    likePost,\n                                    ...props\n                                }: PostPropsType) => {\n    const PostWrapper = styled.div`\n     & {\n        background: ${background ? background : '#FF6347'};\n        color:  ${color ? color : '#ffffff'};\n    }\n    `;\n    const LikesDiv = styled.div`\n    color: ${isLike ? '#ffbf47' : '#ffffff'};\n    `\n\n    const onCrossClick = (id: number) => {\n        removePost(id);\n    };\n    const onLikeClick = (id: number) => {\n        likePost(id)\n    }\n\n    return (\n        <PostWrapper className={styleModule.postWrapper}>\n            <div className={styleModule.avaBlock}>\n                <img src={image ? image : ava_post} alt=\"ava_post\"/>\n                <span>{name}</span>\n                <FontAwesomeIcon icon={faTimes} className={styleModule.removePost} onClick={() => onCrossClick(id)}/>\n            </div>\n            <div className={styleModule.messageBlock}>\n                {message}\n            </div>\n            <LikesDiv>\n                <span onClick={() => onLikeClick(id)}\n                      className={styleModule.likesBlock}>\n                    {`${likes.icon} ${likes.likeCount}`}\n                </span>\n            </LikesDiv>\n        </PostWrapper>\n\n    );\n});\n\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport styleModule from './MyPosts.module.css'\nimport {Post} from \"./Posts/Post\";\nimport {Button} from \"../../generic/Button/Button\";\nimport {Textarea} from \"../../generic/Textarea/Textarea\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\n\n\nexport const BUTTON_STYLE = {\n    BACKGROUND_HOVER: '#ffbf47',\n    BACKGROUND: '#ffe1a9',\n    COLOR_HOVER: '#ffffff'\n};\nexport const POST_STYLE = {\n    background: 'inherit',\n    color: '#ffffff'\n};\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    const onAddPostButton = () => {\n        props.newPostText.trim() && props.addPost(props.newPostText);\n    };\n    const onAddPostWithEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (!e.shiftKey && e.key === 'Enter') {\n            e.preventDefault();\n            props.newPostText.trim() && props.addPost(props.newPostText)\n        }\n    };\n    const onUpdatePostText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewPostText(e.currentTarget.value);\n    };\n\n\n    return (\n        <div className={styleModule.myPosts}>\n            <p>My posts</p>\n            <div>\n                <div className={styleModule.writePost}>\n                    <Textarea setTextareaValue={onUpdatePostText}\n                              textareaValue={props.newPostText}\n                              onAddWithEnter={onAddPostWithEnter}\n                              placeholder={'Here you can leave your post'}\n                              background={'#ffffff'}\n                              color={'#60575A'}/>\n                </div>\n                <div className={styleModule.addPostButton}>\n                    <Button name={'Add post'}\n                            onClick={onAddPostButton}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}/>\n                </div>\n            </div>\n            <div className={styleModule.posts}>\n                {props.postsData.map(post =>\n                    <Post\n                        key={post.id}\n                        background={POST_STYLE.background}\n                        color={POST_STYLE.color}\n                        removePost={props.removePost}\n                        likePost={props.likePost}\n                        {...post}/>\n                )}\n            </div>\n        </div>\n    );\n})\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport {Dialog} from \"./Dialog/Dialog\";\nimport {Message} from \"./Mesage/Message\";\nimport styleModule from './Dialogs.module.css';\nimport {Button} from \"../generic/Button/Button\";\nimport {Textarea} from \"../generic/Textarea/Textarea\";\nimport {BUTTON_STYLE} from \"../Profile/MyPosts/MyPosts\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Navigate} from \"react-router-dom\";\nimport {PATH} from \"../../App\";\n\n\nconst MESSAGE_STYLE = {\n    background: '#e8e8e8',\n    color: '#757575',\n    meBackground:'#FFE1A9',\n    meColor:'#757575',\n};\nconst DIALOG_STYLE = {\n    background: 'inherit',\n    color: '#ffffff'\n};\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n\n\n    const onAddMessageButton = () => {\n        props.addMessage(props.dialogsPage.newMessageText);\n    };\n    const onAddMessageWithEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        props.addMessageWithEnter(e, props.dialogsPage.newMessageText)\n    };\n    const onUpdateNewMessageText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewMessageText(e.currentTarget.value)\n    };\n    if (!props.isAuth) {\n        return (\n            <Navigate to={PATH.LOGIN}/>\n        )\n    }\n    return (\n        <div className={styleModule.dialogs}>\n            <div className={styleModule.heading}>\n                DIALOGS\n            </div>\n            <div className={styleModule.dialogs_items}>\n                {props.dialogsPage.dialogsData.map(dialog => <Dialog key={dialog.id}\n                                                                     background={DIALOG_STYLE.background}\n                                                                     color={DIALOG_STYLE.color}\n                                                                     {...dialog}/>)}\n            </div>\n            <div className={styleModule.messagesBlock}>\n                <div className={styleModule.messages}>\n                    {props.dialogsPage.messagesData.map(message => <Message key={message.id}\n                                                                            background={MESSAGE_STYLE.background}\n                                                                            color={MESSAGE_STYLE.color}\n                                                                            meBackground={MESSAGE_STYLE.meBackground}\n                                                                            meColor={MESSAGE_STYLE.meColor}\n                                                                            {...message}/>)}\n                </div>\n                <div className={styleModule.writeAndSendMessage}>\n                    <div className={styleModule.writeMessage}>\n                        <Textarea textareaValue={props.dialogsPage.newMessageText}\n                                  setTextareaValue={onUpdateNewMessageText}\n                                  onAddWithEnter={onAddMessageWithEnter}\n                                  placeholder={'Enter your message'}\n                                  background={'#ffffff'}\n                                  color={'#60575A'}/>\n\n                    </div>\n                    <div className={styleModule.sendMessage}>\n                        <Button name={'Send'}\n                                onClick={onAddMessageButton}\n                                backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                                background={BUTTON_STYLE.BACKGROUND}\n                                colorHover={BUTTON_STYLE.COLOR_HOVER}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n})\n\n","import React, {KeyboardEvent} from \"react\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    addMessageAC,\n    InitialStateDialogsType,\n    updateNewMessageTextAC\n} from \"../../redux/redusers/dialogsReducer/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\n\nexport type MapStateToPropsType = {\n    dialogsPage: InitialStateDialogsType\n    isAuth:boolean\n}\n\nexport type MapDispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n    addMessageWithEnter: (e: KeyboardEvent<HTMLTextAreaElement>, newMessageText: string) => void\n    updateNewMessageText: (newMessageText: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth:state.auth.isAuth\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newMessageText: string) => {\n            newMessageText.trim() && dispatch(addMessageAC())\n        },\n        addMessageWithEnter: (e: KeyboardEvent<HTMLTextAreaElement>, newMessageText: string) => {\n            if (!e.shiftKey && e.key === 'Enter') {\n                e.preventDefault()\n                newMessageText.trim() && dispatch(addMessageAC())\n            }\n        },\n        updateNewMessageText: (newMessageText: string) => {\n            dispatch(updateNewMessageTextAC(newMessageText));\n        }\n    }\n}\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\n","import React from \"react\";\nimport styleModule from \"./User.module.css\";\nimport userPhotoDefault from \"./../../../usersAvatars/user.png\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../redux/redusers/usersReducer/usersReducer\";\nimport {Button} from \"../../generic/Button/Button\";\nimport {BUTTON_STYLE} from \"../../Profile/MyPosts/MyPosts\";\nimport styled from \"styled-components\";\n\n\ntype UserPropsType = {\n    /**\n     * Callbock that add someone user in followers\n     */\n    becomeFollower: (userID: number) => void\n    /**\n     * Callbock that remove someone user from followers\n     */\n    stopBeingFollower: (userID: number) => void\n    followingInProcessUsersId: number[]\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n    background?: string\n    color?: string\n} & UserType\n\nexport const User = React.memo((props: UserPropsType) => {\n    const UserWrapper = styled.div`\n    & {\n    background: ${props.background ? props.background : 'tomato'};\n    color: ${props.color ? props.color : 'white'}\n    }\n    `\n    const Img = styled.img`\n    & {\n    border-color: ${props.color ? props.color : 'white'}\n    }\n    `\n\n    //is follow button disabled?\n    const isFollowingButtonDisabled = props.followingInProcessUsersId.includes(props.id)\n\n    return (\n        <UserWrapper className={styleModule.userWrapper}>\n            <div className={styleModule.avatar}>\n                <NavLink to={`/profile/${props.id}`}>\n                    <Img src={props.photos.small !== null ? props.photos.small : userPhotoDefault} alt=\"\"/>\n                </NavLink>\n            </div>\n            <div className={styleModule.fullName}>\n                {props.name}\n            </div>\n            <div className={styleModule.status}>\n                <span>{props.status}</span>\n            </div>\n            <div className={styleModule.followed}>\n                {props.followed ?\n                    <Button name={'Unfollow'}\n                            onClick={()=> props.stopBeingFollower(props.id)}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}\n                            disabled={isFollowingButtonDisabled}/> :\n                    <Button name={'Follow'}\n                            onClick={() => props.becomeFollower(props.id)}\n                            backgroundHover={BUTTON_STYLE.BACKGROUND_HOVER}\n                            background={BUTTON_STYLE.BACKGROUND}\n                            colorHover={BUTTON_STYLE.COLOR_HOVER}\n                            disabled={isFollowingButtonDisabled}/>\n                }\n            </div>\n        </UserWrapper>\n    )\n})\n","import React, {useMemo, useState} from \"react\";\nimport styleModule from './Paginator.module.css';\n\nexport type PaginatorPropsType = {\n    portionSize: number\n    currentPage: number\n    pageSize: number\n    totalItemsCount: number\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Paginator = React.memo(({portionSize = 12, ...props}: PaginatorPropsType) => {\n\n    const {pageCount, pages}: { pageCount: number, pages: Array<number> } = useMemo(() => {\n        const pageCount = Math.ceil(props.totalItemsCount / props.pageSize)\n        let pages: Array<number> = [];\n        for (let i = 1; i <= pageCount; i++) {\n            pages.push(i)\n        }\n        return {pageCount, pages}\n    }, [props.totalItemsCount, props.pageSize])\n\n\n    let [portionNumber, setPortionNumber] = useState<number>(1);\n    const portionCount: number = Math.ceil(pageCount / portionSize);\n\n    const leftPortionPageNumber: number = useMemo(() => {\n        return portionSize * (portionNumber - 1) + 1\n    }, [portionSize,\n        portionNumber])\n    const rightPortionPageNumber: number = useMemo(() => {\n        return portionSize * portionNumber;\n    }, [portionSize, portionNumber])\n    return (\n        <div className={styleModule.paginator}>\n            {portionNumber > 1 && <button className={styleModule.firstPage} onClick={() => {\n                setPortionNumber(1)\n            }}>{\"First\"}</button>}\n            {portionNumber > 1 && <button className={styleModule.pagesToBack} onClick={() => {\n                setPortionNumber(portionNumber - 1)\n            }}>{\"Prev\"}</button>}\n            {portionNumber > 1 && <span className={styleModule.threeDots}>{\". . .\"}</span>}\n\n            {pages.filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\n                .map(page => <span key={page} className={props.currentPage === page ? styleModule.selectedPage : ''}\n                                   onClick={() => {\n                                       props.onChangePage(page)\n                                   }}>{page}</span>\n                )}\n\n            {portionNumber < portionCount && <span className={styleModule.threeDots}>{\". . .\"}</span>}\n            {portionNumber < portionCount && <button className={styleModule.pagesToForward} onClick={() => {\n                setPortionNumber(portionNumber + 1)\n            }}>{\"Next\"}</button>}\n            {portionNumber < portionCount && <button className={styleModule.lastPage} onClick={() => {\n                setPortionNumber(portionNumber = portionCount)\n            }}>{\"Last\"}</button>}\n        </div>\n    );\n});\n","import React from \"react\";\nimport styleModule from './Preloader.module.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\ntype PreloaderPropsType = {\n    size: string\n    color: string\n}\n\n\nexport const Preloader = ({size, color}: PreloaderPropsType) => {\n    return (\n        <div className={styleModule.preloaderBlock}>\n            <FontAwesomeIcon style={{fontSize: size, color: color}} className={styleModule.preloaderIcon}\n                             icon={faSpinner}/>\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './Users.module.css';\nimport {User} from \"./User/User\";\nimport {Paginator} from \"../generic/Paginator/Paginator\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {UsersApiContainerPropsType} from \"./UsersContainer\";\n\n\ntype UsersPropsType = UsersApiContainerPropsType & {\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Users = React.memo((props: UsersPropsType) => {\n\n    const {\n        users,\n        becomeFollower,\n        stopBeingFollower,\n        usersTotalCount,\n        pageSize,\n        currentPage,\n        onChangePage,\n        isFetching,\n        followingInProcessUsersId,\n        toggleFollowingInProcess,\n    } = props\n\n    let userElements = users.map(user => <User {...user}\n                                               becomeFollower={becomeFollower}\n                                               stopBeingFollower={stopBeingFollower}\n                                               followingInProcessUsersId={followingInProcessUsersId}\n                                               toggleFollowingInProcess={toggleFollowingInProcess}/>);\n    return (\n        <div className={styleModule.usersWrapper}>\n            <div>\n                <Paginator portionSize={10}\n                           currentPage={currentPage}\n                           pageSize={pageSize}\n                           totalItemsCount={usersTotalCount}\n                           onChangePage={onChangePage}/>\n            </div>\n            {isFetching ? <Preloader size={'100px'} color={'#ffffff'}/> :\n                <div className={styleModule.usersBlock}>\n                    {userElements}\n                </div>}\n\n        </div>\n    )\n})\n\n\n\n","import {AppThunk} from \"../../redux-store\";\r\nimport {FOLLOW_UNFOLLOW_RESULT_CODES, usersAPI} from \"../../../api/api\";\r\n\r\nexport enum USERS_ACTIONS_TYPES {\r\n    FOLLOW = 'social/users/FOLLOW',\r\n    UNFOLLOW = 'social/users/UNFOLLOW',\r\n    SET_USERS = 'social/users/SET_USERS',\r\n    SET_CURRENT_PAGE = 'social/users/SET_CURRENT_PAGE',\r\n    SET_USERS_TOTAL_COUNT = 'social/users/SET_USERS_TOTAL_COUNT',\r\n    SET_IS_FETCHING_VALUE = 'social/users/SET_IS_FETCHING_VALUE',\r\n    TOGGLE_FOLLOWING_IN_PROCESS = 'social/users/TOGGLE_FOLLOWING_IN_PROCESS',\r\n\r\n}\r\n\r\nexport type UserPhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nexport type UserType = {\r\n    /**\r\n     * User name\r\n     */\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    /**\r\n     * User photos\r\n     */\r\n    photos: UserPhotoType\r\n    /**\r\n     * User status\r\n     */\r\n    status: null | string,\r\n    /**\r\n     * Value that indicates if you are following this user\r\n     */\r\n    followed: boolean\r\n}\r\n\r\nexport type InitialStateUsersType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    usersTotalCount: 0,\r\n    pageSize: 12,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProcessUsersId: [] as Array<number>\r\n}\r\n\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: UsersActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case USERS_ACTIONS_TYPES.SET_USERS:\r\n            return {\r\n                ...state, users: action.payload.users\r\n            }\r\n        case USERS_ACTIONS_TYPES.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: true} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.payload.userID ? {...user, followed: false} : user)\r\n            }\r\n        case USERS_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n        case USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT:\r\n        case USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS:\r\n            return {\r\n                ...state, followingInProcessUsersId: action.payload.followingInProcess ?\r\n                    [...state.followingInProcessUsersId, action.payload.userId] :\r\n                    state.followingInProcessUsersId.filter(id => id !== action.payload.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setUsersTotalCount> |\r\n    ReturnType<typeof setIsFetchingValue> |\r\n    ReturnType<typeof toggleFollowingInProcess>\r\n\r\n\r\nexport const follow = (userID: number) => ({type: USERS_ACTIONS_TYPES.FOLLOW, payload: {userID}} as const)\r\nexport const unfollow = (userID: number) => ({type: USERS_ACTIONS_TYPES.UNFOLLOW, payload: {userID}} as const)\r\nexport const setUsers = (users: UserType[]) => ({type: USERS_ACTIONS_TYPES.SET_USERS, payload: {users}} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {currentPage}\r\n} as const)\r\nexport const setUsersTotalCount = (usersTotalCount: number) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_USERS_TOTAL_COUNT,\r\n    payload: {usersTotalCount}\r\n} as const)\r\nexport const setIsFetchingValue = (isFetching: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.SET_IS_FETCHING_VALUE, payload: {isFetching}\r\n} as const)\r\nexport const toggleFollowingInProcess = (userId: number, followingInProcess: boolean) => ({\r\n    type: USERS_ACTIONS_TYPES.TOGGLE_FOLLOWING_IN_PROCESS,\r\n    payload: {userId, followingInProcess}\r\n} as const)\r\n\r\nexport const getUsers = (pageSize: number, currentPage: number): AppThunk => dispatch => {\r\n    dispatch(setIsFetchingValue(true))\r\n    usersAPI.getUsers(pageSize, currentPage)\r\n        .then(data => {\r\n            dispatch(setIsFetchingValue(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setUsersTotalCount(data.totalCount))\r\n        })\r\n}\r\nexport const becomeFollower = (id: number): AppThunk => dispatch => {\r\n    dispatch(toggleFollowingInProcess(id, true))\r\n    usersAPI.becomeFollower(id).then(data => {\r\n        if (data.resultCode === FOLLOW_UNFOLLOW_RESULT_CODES.success) {\r\n            dispatch(follow(id))\r\n        }\r\n        dispatch(toggleFollowingInProcess(id, false))\r\n    })\r\n}\r\nexport const repeatGetUsers = (pageSize: number, pageNumber: number): AppThunk => dispatch => {\r\n    dispatch(setCurrentPage(pageNumber))\r\n    dispatch(setIsFetchingValue(true))\r\n    usersAPI.getUsers(pageSize, pageNumber).then(data => {\r\n        dispatch(setIsFetchingValue(false))\r\n        dispatch(setUsers(data.items))\r\n    })\r\n}\r\n\r\nexport const stopBeingFollower = (id: number):AppThunk => dispatch => {\r\n    dispatch(toggleFollowingInProcess(id, true))\r\n    usersAPI.stopBeingFollower(id).then(data => {\r\n        if (data.resultCode === FOLLOW_UNFOLLOW_RESULT_CODES.success) {\r\n            dispatch(unfollow(id))\r\n        }\r\n        dispatch(toggleFollowingInProcess(id, false))\r\n    })\r\n\r\n}\r\n\r\n","import {profileAPI} from \"../../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppActionsType, AppThunk} from \"../../redux-store\";\r\n\r\nexport enum PROFILE_ACTIONS_TYPES {\r\n    ADD_POST = 'social/profile/ADD-POST',\r\n    UPDATE_NEW_POST_TEXT = 'social/profile/UPDATE_NEW_POST_TEXT',\r\n    REMOVE_POST = \"social/profile/REMOVE_POST\",\r\n    LIKE_POST = 'social/profile/LIKE_POST',\r\n    SET_PROFILE = 'social/profile/SET_PROFILE',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    name: string\r\n    message: string\r\n    likes: {\r\n        icon: string\r\n        likeCount: number\r\n    }\r\n    isLike: boolean\r\n    image: string | null\r\n    background?: string\r\n    color?: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null,\r\n}\r\nexport type PhotosType = {\r\n    small: string | null,\r\n    large: string | null,\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type InitialStateProfileType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Ruslan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deleniti, eum.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: 'https://sun9-15.userapi.com/impg/O_LNAi5kKsq4-ViNecim4rUQkihvDLuTnXfL2w/BSAIvsvBviM.jpg?size=863x1080&quality=96&sign=8c552a2a19907e2e040b0475efdb6b85&type=album'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Mariya',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur cumque harum illo inventore maiores minus mollitia, quaerat quis rem voluptatibus.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 3,\r\n            },\r\n            isLike: false,\r\n            image: null\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Ivan',\r\n            message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis est, et labore laborum nemo nisi.',\r\n            likes: {\r\n                icon: '❤',\r\n                likeCount: 87,\r\n            },\r\n            isLike: true,\r\n            image: 'https://sun9-53.userapi.com/impf/c623626/v623626744/19d9c/KBDd8fH-BOg.jpg?size=1280x960&quality=96&sign=03d1a85127b8411ce8b5b0b4118f78f6&type=album'\r\n        }\r\n    ] as Array<PostType>,\r\n    newPostText: '',\r\n    profile: null as ProfileType | null,\r\n};\r\n\r\nexport const profileReducer = (state: InitialStateProfileType = initialState, action: ProfileActionType): InitialStateProfileType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTIONS_TYPES.ADD_POST:\r\n            const newPost = {\r\n                id: state.postsData.length + 1,\r\n                name: 'Someone',\r\n                message: state.newPostText,\r\n                likes: {\r\n                    icon: '❤',\r\n                    likeCount: 0,\r\n                },\r\n                isLike: false,\r\n                image: null\r\n            };\r\n            return {...state, postsData: [newPost, ...state.postsData], newPostText: ''}\r\n        case PROFILE_ACTIONS_TYPES.UPDATE_NEW_POST_TEXT:\r\n        case PROFILE_ACTIONS_TYPES.SET_PROFILE:\r\n            return {...state, ...action.payload}\r\n        case PROFILE_ACTIONS_TYPES.REMOVE_POST:\r\n            return (\r\n                {...state, postsData: state.postsData.filter(p => p.id !== action.payload.id)}\r\n            );\r\n        case PROFILE_ACTIONS_TYPES.LIKE_POST:\r\n            return (\r\n                {\r\n                    ...state, postsData: state.postsData.map(p => p.id === action.payload.id ?\r\n                        {\r\n                            ...p, isLike: !p.isLike, likes:\r\n                                {...p.likes, likeCount: p.isLike ? p.likes.likeCount - 1 : p.likes.likeCount + 1}\r\n                        } : p)\r\n                }\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport type ProfileActionType =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof updateNewPostText> |\r\n    ReturnType<typeof removePost> |\r\n    ReturnType<typeof likePost> |\r\n    ReturnType<typeof setProfile>\r\n\r\n\r\nexport const addPost = () => ({type: PROFILE_ACTIONS_TYPES.ADD_POST} as const);\r\nexport const updateNewPostText = (newPostText: string) => ({\r\n    type: PROFILE_ACTIONS_TYPES.UPDATE_NEW_POST_TEXT,\r\n    payload: {newPostText}\r\n} as const);\r\nexport const removePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.REMOVE_POST, payload: {id}} as const);\r\nexport const likePost = (id: number) => ({type: PROFILE_ACTIONS_TYPES.LIKE_POST, payload: {id}} as const);\r\nexport const setProfile = (profile: ProfileType) => ({\r\n    type: PROFILE_ACTIONS_TYPES.SET_PROFILE,\r\n    payload: {profile}\r\n} as const);\r\nexport const getProfile = (userId: number): AppThunk => dispatch => {\r\n    profileAPI.getProfile(userId)\r\n        .then(data => {\r\n            dispatch(setProfile(data))\r\n        })\r\n}","import {connect} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    becomeFollower,\n    getUsers,\n    repeatGetUsers,\n    stopBeingFollower,\n    toggleFollowingInProcess,\n    UserType\n} from \"../../redux/redusers/usersReducer/usersReducer\";\nimport React from \"react\";\n\n\nclass UsersApiContainer extends React.Component<UsersApiContainerPropsType> {\n\n    componentDidMount(): void {\n        const {currentPage, pageSize, getUsers} = this.props\n        //get request for getting users (with thunk)\n        getUsers(pageSize, currentPage)\n\n    }\n\n    //optimization of unnecessary rendering. Alternative of React.memo\n    shouldComponentUpdate(nextProps: Readonly<UsersApiContainerPropsType>, nextState: Readonly<{}>): boolean {\n        return nextProps !== this.props || nextState !== this.state\n    }\n\n    // action for pressing on page number\n    onChangePage = (pageNumber: number) => {\n        const {pageSize,repeatGetUsers,} = this.props\n        repeatGetUsers(pageSize, pageNumber)\n    }\n\n    render() {\n        return (\n            <Users {...this.props}\n                   onChangePage={this.onChangePage}\n            />\n        )\n    }\n}\n\n//functionality for redux\n\ntype MapStateToPropsType = {\n    users: UserType[],\n    usersTotalCount: number,\n    pageSize: number,\n    currentPage: number\n    isFetching: boolean\n    followingInProcessUsersId: number[]\n}\ntype MapDispatchToPropsType = {\n    becomeFollower: (userID: number) => void\n    stopBeingFollower: (userID: number) => void\n    toggleFollowingInProcess: (userId: number, followingInProcess: boolean) => void\n    getUsers: (pageSize: number, currentPage: number) => void\n    repeatGetUsers: (pageSize:number, pageNumber:number) => void\n}\n\nexport type UsersApiContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        usersTotalCount: state.usersPage.usersTotalCount,\n        pageSize: state.usersPage.pageSize,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProcessUsersId: state.usersPage.followingInProcessUsersId,\n    }\n}\n\nexport const UsersContainer = connect(mapStateToProps, {\n    becomeFollower,\n    stopBeingFollower,\n    toggleFollowingInProcess,\n    getUsers,\n    repeatGetUsers,\n} as MapDispatchToPropsType)(UsersApiContainer)","//hoc for getting params\r\nimport React from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => {\r\n    const ComponentWithRouter = (props: object) => {\r\n        const params = useParams<'*'>() //... <= profile/*\r\n        return (\r\n            <WrappedComponent {...props} params={params}/>\r\n        )\r\n    }\r\n    return ComponentWithRouter\r\n}","import {AUTH_ME_RESULT_CODES, authMeAPI, AuthUserDataType, profileAPI} from \"../../../api/api\";\r\nimport {AppActionsType, AppThunk, GetStateType} from \"../../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport enum AUTH_ACTIONS_TYPES {\r\n    SET_AUTH_USER_DATA = 'social/auth/SET_AUTH_USER_DATA',\r\n    SET_FULL_NAME_AND_AVATAR = 'social/auth/SET_FULL_NAME_AND_AVATAR',\r\n}\r\n\r\nexport type InitialStateAuthType = typeof initialState\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    fullName: null as null | string,\r\n    avatar: null as null | string\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA:\r\n        case AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR:\r\n            return {\r\n                ...state, isAuth: true, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AuthActionType =\r\n    ReturnType<typeof setAuthUserData> |\r\n    ReturnType<typeof setFullNameAndAvatar>\r\n\r\n\r\nexport const setAuthUserData = ({id, email, login}: AuthUserDataType) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_AUTH_USER_DATA,\r\n    payload: {id, email, login}\r\n})\r\nexport const setFullNameAndAvatar = (fullName: string, avatar: string | null) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_FULL_NAME_AND_AVATAR,\r\n    payload: {fullName, avatar}\r\n})\r\nexport const getAuthorizationInfo = (): AppThunk => (dispatch, getState: GetStateType) => {\r\n    authMeAPI.getAuthorizationInfo()\r\n        .then(data => {\r\n            if (data.resultCode === AUTH_ME_RESULT_CODES.success) {\r\n                dispatch(setAuthUserData(data.data))\r\n            }\r\n        }).then(() => {\r\n            const id = getState().auth.id\r\n            id && profileAPI.getProfile(id)\r\n                .then(data => {\r\n                    const fullName = data.fullName\r\n                    const avatar = data.photos.small\r\n                    dispatch(setFullNameAndAvatar(fullName, avatar))\r\n                })\r\n        }\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/top-wallpaper.47d6d9d7.jpg\";","import React from \"react\";\nimport styleModule from './ProfileInfo.module.css';\nimport top_wallpaper from \"../../../top-wallpaper.jpg\";\nimport logo_avatar from '../../../usersAvatars/user.png';\nimport {ProfileAPIContainerPropsType} from \"../ProfileContainer\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\n\ntype ProfileInfoPropsType = ProfileAPIContainerPropsType\n\nexport const ProfileInfo = React.memo(({profile}: ProfileInfoPropsType) => {\n\n    return (\n        <div className={styleModule.profileInfo}>\n            <div className={styleModule.top_wallpaper}>\n                <img src={top_wallpaper} alt=\"top_wallpaper\"/>\n            </div>\n            <div className={styleModule.avatarAndFullName}>\n                <div className={styleModule.image}>\n                    <img src={profile?.photos.large || logo_avatar}/>\n                </div>\n                <div className={styleModule.fullName}>{profile?.fullName}</div>\n\n                {/*кнопка изменения фото*/}\n                {/*{isOwner &&\n                <div className={styleModule.editMainPhoto}>\n                    <input onChange={onChangeAvatarPhoto} type=\"file\"/>\n                    <label>\n                        <svg height=\"20\" viewBox=\"0 0 512 512\">\n                            <path\n                                d=\"M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z\"></path>\n                        </svg>\n                    </label>\n                </div>}*/}\n\n            </div>\n            <div className={styleModule.description}>\n\n                {/*{!editProfileMode &&*/}\n\n                <div className={styleModule.wrapper_description}>\n\n\n                    {/*<ProfileStatus status={status} updateStatus={updateStatus}/>*/}\n\n                    <div className={styleModule.aboutMe}>{profile?.aboutMe}</div>\n\n                    <div className={styleModule.lookingForAJob}>\n                        <div className={styleModule.statusJob}>\n                            <div className={styleModule.heading}>OPEN TO WORK:</div>\n                            <div className={styleModule.logo}>{profile?.lookingForAJob ?\n                                <FontAwesomeIcon icon={faCheck} className={styleModule.iconYes}/> :\n                                <FontAwesomeIcon icon={faTimes} className={styleModule.iconNot}/>}\n                            </div>\n                        </div>\n                        <div className={styleModule.descriptionJob}>{profile?.lookingForAJobDescription}</div>\n                    </div>\n\n\n                    {/*{isOwner &&\n                    <div className={styleModule.toEditMode}>\n                        <button onClick={activateEditMode}>\n                            <svg viewBox=\"0 0 469 469\">\n                                <path d=\"M438.931,30.403c-40.4-40.5-106.1-40.5-146.5,0l-268.6,268.5c-2.1,2.1-3.4,4.8-3.8,7.7l-19.9,147.4\n\t\tc-0.6,4.2,0.9,8.4,3.8,11.3c2.5,2.5,6,4,9.5,4c0.6,0,1.2,0,1.8-0.1l88.8-12c7.4-1,12.6-7.8,11.6-15.2c-1-7.4-7.8-12.6-15.2-11.6\n\t\tl-71.2,9.6l13.9-102.8l108.2,108.2c2.5,2.5,6,4,9.5,4s7-1.4,9.5-4l268.6-268.5c19.6-19.6,30.4-45.6,30.4-73.3\n\t\tS458.531,49.903,438.931,30.403z M297.631,63.403l45.1,45.1l-245.1,245.1l-45.1-45.1L297.631,63.403z M160.931,416.803l-44.1-44.1\n\t\tl245.1-245.1l44.1,44.1L160.931,416.803z M424.831,152.403l-107.9-107.9c13.7-11.3,30.8-17.5,48.8-17.5c20.5,0,39.7,8,54.2,22.4\n\t\ts22.4,33.7,22.4,54.2C442.331,121.703,436.131,138.703,424.831,152.403z\"/>\n                            </svg>\n                        </button>\n                    </div>\n                    }*/}\n\n                </div>\n\n                {/*}*/}\n\n                {/*{editProfileMode && <EditProfileForm onSubmit={onSubmit} profile={profile}\n                                                     updateProfileDescription={updateProfileDescription}/>}\n\n                <Contacts profile={profile} updateProfileDescription={updateProfileDescription} />*/}\n            </div>\n        </div>\n    )\n});\n\n","import React from \"react\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {\n    addPost,\n    likePost,\n    PostType,\n    removePost,\n    updateNewPostText\n} from \"../../../redux/redusers/profileReducer/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nexport type MapStateToPropsType = {\n    postsData: PostType[]\n    newPostText: string\n}\n\nexport type MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n    updateNewPostText: (newPostText: string) => void\n    removePost: (id: number) => void\n    likePost: (id: number) => void\n}\n\nexport type MyPostsPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    {params: {['*']:string}}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        postsData: state.profilePage.postsData,\n        newPostText: state.profilePage.newPostText,\n\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, {\n    addPost,\n    updateNewPostText,\n    removePost,\n    likePost,\n} as MapDispatchToPropsType)(MyPosts);\n","import React from \"react\";\nimport styleModule from './Profile.module.css';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileAPIContainerPropsType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = ProfileAPIContainerPropsType\n\nexport const Profile = React.memo((props:ProfilePropsType) => {\n    return (\n        <div className={styleModule.content}>\n            <ProfileInfo {...props}/>\n            <MyPostsContainer params={props.params}/>\n        </div>\n    );\n})\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getProfile, ProfileType} from \"../../redux/redusers/profileReducer/profileReducer\";\nimport {Profile} from \"./Profile\";\nimport {Preloader} from \"../generic/Preloader/Preloader\";\nimport {withRouter} from \"../../hoc/withRouter\";\nimport {Navigate} from \"react-router-dom\";\n\n\nclass ProfileAPIContainer extends React.Component<ProfileAPIContainerPropsType> {\n\n    refreshProfile = () => {\n        const {getProfile, params} = this.props\n        let userId = params[\"*\"]\n        if (!userId || userId === '*') {\n            userId = '20392'\n        }\n        getProfile(Number(userId))\n    }\n\n    componentDidMount(): void {\n        this.refreshProfile()\n    }\n\n    //getting own profile after switching from someone profile to your own\n    componentDidUpdate(prevProps: Readonly<ProfileAPIContainerPropsType>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (prevProps.params !== this.props.params) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        if (!this.props.isAuth) {\n            return (\n                <Navigate to={'/login'}/>\n            )\n        }\n        return this.props.profile ? (\n                <Profile {...this.props}/>) :\n            (<Preloader size={'100px'} color={'#ffffff'}/>\n            )\n    }\n}\n\nexport type ProfileAPIContainerPropsType =\n    MapStateToPropsType &\n    MapDispatchToPropsType &\n    { params: { ['*']: string } } //... <= profile/*... => type for props\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null\n    isAuth:boolean\n}\ntype MapDispatchToPropsType = {\n    getProfile: (userId:number) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    isAuth: state.auth.isAuth\n})\n\n\nexport const ProfileContainer = connect(mapStateToProps, {getProfile} as MapDispatchToPropsType)(withRouter(ProfileAPIContainer))\n\n\n","import React from \"react\";\r\nimport styleModule from './Header.module.css';\r\nimport styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {HeaderAPIContainerPropsType} from \"./HeaderContainer\";\r\nimport logo_avatar from '../../usersAvatars/user.png'\r\n\r\nexport type HeaderPropsType = {\r\n    title: string\r\n    description?: string\r\n    background: string\r\n    color: string\r\n    logo?: string\r\n} & HeaderAPIContainerPropsType\r\n\r\n\r\nexport const Header = React.memo((props: HeaderPropsType) => {\r\n    const {\r\n        title,\r\n        description,\r\n        background,\r\n        color,\r\n        logo,\r\n        avatar,\r\n        fullName,\r\n        auth,\r\n    } = props\r\n    const Header = styled.header`\r\n    & {\r\n    background: ${background}\r\n    `;\r\n    const TitleDescription = styled.div`\r\n    & p {\r\n    color: ${color}\r\n    }\r\n    `;\r\n    return (\r\n        <Header className={styleModule.header}>\r\n            <div className={styleModule.logoAndDescription}>\r\n                <div className={styleModule.logo}>\r\n                    <img src={logo} className={styleModule.main_logo}/>\r\n                </div>\r\n                <TitleDescription className={styleModule.title_description}>\r\n                    <p>{title}</p>\r\n                    <p>{description}</p>\r\n                </TitleDescription>\r\n            </div>\r\n            <div className={styleModule.loginStatus}>\r\n\r\n                {auth.isAuth ?\r\n                    <div className={styleModule.loginAndAvatar}>\r\n                        <div className={styleModule.avatar}>\r\n                            <img src={avatar ? avatar : logo_avatar}/>\r\n                        </div>\r\n                        <div className={styleModule.loginValue}>{fullName}</div>\r\n\r\n                        {/*<div className={styleModule.logoutButton}><button onClick={props.logout} >LOGOUT</button></div>*/}\r\n\r\n                    </div> :\r\n                    <NavLink to={'/login'}>\r\n                        LOGIN\r\n                    </NavLink>}\r\n            </div>\r\n        </Header>\r\n    );\r\n})\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Header} from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getAuthorizationInfo, InitialStateAuthType} from \"../../redux/redusers/auth/authReducer\";\r\nimport {HEADER_STYLE} from \"../../App\";\r\n\r\nexport type DataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type GetAuthUserDataType = {\r\n    data: DataType\r\n    fieldsErrors: Array<any>\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n\r\nclass HeaderAPIContainer extends React.Component<HeaderAPIContainerPropsType> {\r\n    componentDidMount(): void {\r\n        const {getAuthorizationInfo} = this.props\r\n        getAuthorizationInfo()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <Header title={'Cloudpaper'}\r\n                    description={'Connecting Network'}\r\n                    background={HEADER_STYLE.background}\r\n                    color={HEADER_STYLE.color}\r\n                    logo={HEADER_STYLE.logo}\r\n                    {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport type HeaderAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    auth: InitialStateAuthType\r\n    fullName: string | null\r\n    avatar: string | null | undefined\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getAuthorizationInfo: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth,\r\n        fullName: state.auth.fullName,\r\n        avatar: state.auth.avatar,\r\n    }\r\n};\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {\r\n    getAuthorizationInfo\r\n} as MapDispatchToPropsType)(HeaderAPIContainer)\r\n\r\n\r\n\r\n","import React from \"react\";\nimport styleModule from './Login.module.css';\n\n\nexport function Login(props:any) {\n    return (\n        <div>\n           Login\n        </div>\n    );\n}\n\n\n\n","import React from \"react\";\nimport styleModule from './Settings.module.css';\nimport {UnderConstruction} from \"../generic/UnderConstruction/UnderConstruction\";\nimport {Navigate} from \"react-router-dom\";\n\ntype SettingsPropType = {\n    isAuth:boolean\n}\n\nexport function Settings(props:SettingsPropType) {\n    if (!props.isAuth) {\n        return (\n            <Navigate to={'/login'}/>\n        )\n    }\n    return (\n        <div>\n            <UnderConstruction/>\n        </div>\n    );\n}\n\n","import {Settings} from \"./Settings\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const SettingsContainer = (props:any) => {\r\n    const isAuth = useSelector((state:AppStateType) => state.auth.isAuth)\r\n    return (\r\n        <Settings isAuth={isAuth}/>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Music} from \"./components/Music/Music\";\nimport {News} from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport logo from './main-logo.png';\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {SettingsContainer} from \"./components/Settings/SettingsContainer\";\n\n\nexport type PATHType = {\n    PROFILE: string\n    DIALOGS: string\n    MUSIC: string\n    NEWS: string\n    USERS: string\n    SETTINGS: string\n    LOGIN:string\n}\nexport const PATH: PATHType = {\n    PROFILE: '/profile/*',\n    DIALOGS: '/dialogs/*',\n    MUSIC: '/music',\n    NEWS: '/news',\n    USERS: '/users',\n    SETTINGS: '/settings',\n    LOGIN: '/login',\n};\n\nexport const HEADER_STYLE = {\n    background: '#7D823F',\n    color: '#ffffff',\n    logo: logo\n};\n\nfunction App() {\n\n    return (\n            <div className=\"app_wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app_wrapper_content\">\n                    <Routes>\n                        <Route path='/' element={<Navigate to={PATH.PROFILE}/>}/>\n                        <Route path={PATH.PROFILE} element={<ProfileContainer />}/>\n                        <Route path={PATH.DIALOGS} element={<DialogsContainer/>}/>\n                        <Route path={PATH.MUSIC} element={<Music/>}/>\n                        <Route path={PATH.NEWS} element={<News/>}/>\n                        <Route path={PATH.USERS} element={<UsersContainer/>}/>\n                        <Route path={PATH.SETTINGS} element={<SettingsContainer/>}/>\n                        <Route path={PATH.LOGIN} element={<Login/>}/>\n                    </Routes>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n","import {ProfileActionType, profileReducer} from \"./redusers/profileReducer/profileReducer\";\r\nimport {DialogsActionType, dialogsReducer} from \"./redusers/dialogsReducer/dialogsReducer\";\r\nimport {UsersActionType, usersReducer} from \"./redusers/usersReducer/usersReducer\";\r\nimport {AuthActionType, authReducer} from \"./redusers/auth/authReducer\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {ThunkAction} from 'redux-thunk';\r\n\r\nexport const rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n    }\r\n);\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType =\r\n    UsersActionType |\r\n    ProfileActionType |\r\n    DialogsActionType|\r\n    AuthActionType\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type GetStateType = typeof store.getState\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType\r\n    >\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}