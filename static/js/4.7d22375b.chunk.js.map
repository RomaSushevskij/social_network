{"version":3,"sources":["components/Settings/Settings.module.scss","components/forms/ContactsForm/ContactsSettingsForm.module.scss","components/forms/ProfileUpdateForm/ProfileSettingsForm.module.scss","components/generic/TextareaSecondary/TextareaSecondary.module.scss","components/forms/ContactsForm/ContactsSettingsForm.tsx","utils/validators.ts","components/generic/TextareaSecondary/TextareaSecondary.tsx","components/forms/ProfileUpdateForm/ProfileSettingsForm.tsx","components/Settings/Settings.tsx"],"names":["module","exports","ContactsSettingsForm","memo","contacts","useSelector","state","profilePage","profile","isFetching","usersPage","dispatch","useDispatch","navigate","useNavigate","contactsTitles","Object","keys","formik","useFormik","initialValues","onSubmit","values","updateContacts","validate","errors","map","contact","prop","test","validateURL","isSubmitButtonDisabled","length","className","styleModule","settingsFormWrapper","description","settingsFormContainer","handleSubmit","Preloader","size","color","key","field","fieldTitle","toUpperCase","slice","InputTextSecondary","placeholder","getFieldProps","error","border","Button","type","name","disabled","TextareaSecondary","onChange","onChangeText","onKeyPress","onEnter","spanClassName","customStyle","title","restProps","finalSpanClassName","s","finalInputClassName","errorTextarea","superTextarea","textAreaWrapper","e","currentTarget","value","ProfileSettingsForm","fullName","userId","aboutMe","lookingForAJob","lookingForAJobDescription","profileModel","updateProfile","checkbox","Checkbox","checked","id","optionalField","Settings","props","useEffect","settingsWrapper","links","to","l","isActive","activeLink","path","element"],"mappings":"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","file":"static/js/4.7d22375b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"Settings_settingsWrapper__2xl9v\",\"title\":\"Settings_title__23wx6\",\"links\":\"Settings_links__4idMT\",\"activeLink\":\"Settings_activeLink__2yHFp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsFormWrapper\":\"ContactsSettingsForm_settingsFormWrapper__2FxEf\",\"description\":\"ContactsSettingsForm_description__3uprw\",\"settingsFormContainer\":\"ContactsSettingsForm_settingsFormContainer__3QJCb\",\"field\":\"ContactsSettingsForm_field__1verD\",\"fieldTitle\":\"ContactsSettingsForm_fieldTitle__1105X\",\"border\":\"ContactsSettingsForm_border__j37_4\",\"checkbox\":\"ContactsSettingsForm_checkbox__1jA7C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsFormWrapper\":\"ProfileSettingsForm_settingsFormWrapper__1YflB\",\"description\":\"ProfileSettingsForm_description__2LQxp\",\"settingsFormContainer\":\"ProfileSettingsForm_settingsFormContainer__3PcJp\",\"field\":\"ProfileSettingsForm_field__3YQTg\",\"fieldTitle\":\"ProfileSettingsForm_fieldTitle__3onzs\",\"border\":\"ProfileSettingsForm_border__3kpGo\",\"checkbox\":\"ProfileSettingsForm_checkbox__4q5AZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textAreaWrapper\":\"TextareaSecondary_textAreaWrapper__1ochf\",\"superTextarea\":\"TextareaSecondary_superTextarea___y7wB\",\"errorTextarea\":\"TextareaSecondary_errorTextarea__3fJLt\",\"error\":\"TextareaSecondary_error__1Dsee\"};","import React, {memo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {useNavigate} from 'react-router-dom';\nimport {useFormik} from 'formik';\nimport {ContactsType, updateContacts} from '../../../redux/redusers/profileReducer/profileReducer';\nimport styleModule from './ContactsSettingsForm.module.scss';\nimport {Preloader} from '../../generic/Preloader/Preloader';\nimport InputTextSecondary from '../../generic/InputTextSecondary/InputTextSecondary';\nimport {Button} from '../../generic/Button/Button';\nimport {validateURL} from '../../../utils/validators';\n\nexport const ContactsSettingsForm = memo(() => {\n    const contacts = useSelector((state: AppStateType) => state.profilePage.profile?.contacts)\n    const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const contactsTitles = contacts && Object.keys(contacts);\n    const formik = useFormik({\n        initialValues: {\n            ...contacts\n        },\n        onSubmit: values => {\n            dispatch(updateContacts(values, navigate))\n        },\n        validate: values => {\n            const errors: Partial<ContactsType> = {};\n            Object.keys(values).map(contact => validateURL(values, errors, contact))\n            return errors;\n        }\n    });\n\n    const isSubmitButtonDisabled = Object.keys(formik.errors).length !== 0;\n    return (\n        <div className={styleModule.settingsFormWrapper}>\n            <div className={styleModule.description}>\n                <h3>Social links</h3>\n                <p>Here you can enter your contacts...</p>\n            </div>\n            <div className={styleModule.settingsFormContainer}>\n                <form onSubmit={formik.handleSubmit}>\n                    {isFetching ? <Preloader size={'30px'} color={'#EC4899'}/> :\n                        <>\n                            {contactsTitles && contactsTitles.map(key => {\n                                    return (\n                                        <div className={styleModule.field}\n                                             key={key}>\n                                            <p className={styleModule.fieldTitle}>\n                                                {`${key[0].toUpperCase()}${key.slice(1)}`}\n                                            </p>\n                                            <InputTextSecondary placeholder={`${key}...`}\n                                                                {...formik.getFieldProps(key)}\n                                                //@ts-ignore\n                                                                error={formik.errors[key]}\n                                                //@ts-ignore\n                                                                className={!formik.errors[key] ? styleModule.border : ''}/>\n                                        </div>\n                                    )\n                                }\n                            )}\n                            < Button type={'submit'} name={'Save'} disabled={isSubmitButtonDisabled}/>\n                        </>}\n                </form>\n            </div>\n        </div>\n    )\n})","export const requiredField = (value: string): string | null => {\n    return !value.length ? 'This field is required' : null\n}\nexport const maxLength = (maxLength: number) => (value: string) => {\n    return value.length > maxLength ? `Max length is ${maxLength} characters!` : null\n}\nexport const composeValidators = (...validators: Function[]) => (value: string) =>\n    validators.reduce((error, validator) => error || validator(value), undefined);\n\nexport const validateURL = (values: any, errors: any, prop: string) => {\n    if (values[prop]) {\n        if (!/[-a-zA-Z0-9@:%_\\+.~#?&\\/=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&\\/=]*)?/gi.test(values[prop])) {\n            errors[prop] = 'Invalid URL address';\n        }\n    }\n}","import React, {\n    ChangeEvent,\n    DetailedHTMLProps,\n    InputHTMLAttributes,\n    KeyboardEvent,\n    memo,\n    TextareaHTMLAttributes\n} from 'react'\nimport s from './TextareaSecondary.module.scss'\n\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\n\n\ntype SuperInputTextPropsType = DefaultTextAreaPropsType & {\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    customStyle?: string\n}\n\nexport const TextareaSecondary: React.FC<SuperInputTextPropsType> = memo((\n    {\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName, name, title,\n        customStyle,\n\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    };\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        onKeyPress && onKeyPress(e);\n        onEnter && e.key === 'Enter' && onEnter()\n    };\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\n    const finalInputClassName = `${error ? `${s.errorTextarea} ${s.superTextarea}` : s.superTextarea} ${className}`;\n\n    return (\n        <div className={customStyle ? `${customStyle} ${s.textAreaWrapper}` : s.textAreaWrapper}>\n            <textarea name={name}\n                   onChange={onChangeCallback}\n                   onKeyPress={onKeyPressCallback}\n                   className={finalInputClassName}\n                   {...restProps}\n            />\n            {error && <div className={finalSpanClassName}>{error}</div>}\n        </div>\n    )\n});\n\n","import React, {memo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {useNavigate} from 'react-router-dom';\nimport {useFormik} from 'formik';\nimport {UploadProfileModelType} from '../../../api/api';\nimport styleModule from './ProfileSettingsForm.module.scss';\nimport {Preloader} from '../../generic/Preloader/Preloader';\nimport InputTextSecondary from '../../generic/InputTextSecondary/InputTextSecondary';\nimport {TextareaSecondary} from '../../generic/TextareaSecondary/TextareaSecondary';\nimport {Checkbox} from '../../generic/Checkbox/Checkbox';\nimport {Button} from '../../generic/Button/Button';\nimport {updateProfile} from \"../../../redux/redusers/profileReducer/profileReducer\";\n\nexport const ProfileSettingsForm = memo(() => {\n    const fullName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName)\n    const userId = useSelector((state: AppStateType) => state.profilePage.profile?.userId)\n    const aboutMe = useSelector((state: AppStateType) => state.profilePage.profile?.aboutMe)\n    const lookingForAJob = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJob)\n    const lookingForAJobDescription = useSelector((state: AppStateType) => state.profilePage.profile?.lookingForAJobDescription)\n    const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const formik = useFormik({\n        initialValues: {\n            fullName,\n            aboutMe,\n            lookingForAJob,\n            lookingForAJobDescription,\n        },\n        onSubmit: values => {\n            const profileModel: UploadProfileModelType = {\n                fullName: values.fullName,\n                aboutMe: values.aboutMe,\n                lookingForAJob: values.lookingForAJob,\n                lookingForAJobDescription: values.lookingForAJobDescription,\n                userId: userId\n            }\n            dispatch(updateProfile(profileModel, navigate))\n        },\n        validate: values => {\n            const errors: Partial<UploadProfileModelType> = {};\n            if (!values.fullName) {\n                errors.fullName = 'Field is required';\n            }\n            if (!values.aboutMe) {\n                errors.aboutMe = 'Field is required';\n            }\n            return errors;\n        }\n    });\n    const isSubmitButtonDisabled = formik.errors.fullName || formik.errors.aboutMe;\n\n    return (\n        <div className={styleModule.settingsFormWrapper}>\n            <div className={styleModule.description}>\n                <h3>Basic</h3>\n                <p>Basic settings for your profile...</p>\n            </div>\n            <div className={styleModule.settingsFormContainer}>\n                <form onSubmit={formik.handleSubmit}>\n                    {isFetching ? <Preloader size={'30px'} color={'#EC4899'}/> :\n                        <>\n                            <div className={styleModule.field}>\n                                <p className={styleModule.fieldTitle}>\n                                    Full name\n                                </p>\n                                <InputTextSecondary placeholder={'Your name...'}\n                                                    {...formik.getFieldProps('fullName')}\n                                                    error={formik.errors.fullName}\n                                                    className={!formik.errors.fullName ? styleModule.border : ''}/>\n                            </div>\n                            <div className={styleModule.field}>\n                                <p className={styleModule.fieldTitle}>\n                                    About me\n                                </p>\n                                <TextareaSecondary placeholder={'A few words about myself...'}\n                                                   {...formik.getFieldProps('aboutMe')}\n                                                   error={formik.errors.aboutMe}\n                                                   className={!formik.errors.aboutMe ? styleModule.border : ''}/>\n                            </div>\n                            <div className={`${styleModule.field} ${styleModule.checkbox}`}>\n                                <p className={styleModule.fieldTitle}>\n                                    Looking for a job\n                                </p>\n                                <Checkbox {...formik.getFieldProps(\"lookingForAJob\")}\n                                    checked={formik.values.lookingForAJob}\n                                          id={\"lookingForAJob\"}>\n                                    Looking for a job\n                                </Checkbox>\n                            </div>\n                            <div className={styleModule.field}>\n                                <p className={styleModule.fieldTitle}>\n                                    Job description\n                                </p>\n                                <TextareaSecondary placeholder={'Description of the job you are looking for...'}\n                                                   {...formik.getFieldProps('lookingForAJobDescription')}\n                                                   disabled={!formik.values.lookingForAJob}\n                                                   className={!formik.errors.lookingForAJobDescription ?\n                                                       `${styleModule.optionalField} ${styleModule.border}` :\n                                                       styleModule.optionalField}/>\n                            </div>\n                            <Button type={'submit'} name={'Save'} disabled={!!isSubmitButtonDisabled}/>\n                        </>\n                    }\n                </form>\n            </div>\n        </div>\n    )\n})","import React, {memo, useEffect} from \"react\";\nimport styleModule from './Settings.module.scss';\nimport {NavLink, Route, Routes, useNavigate} from 'react-router-dom';\nimport {ContactsSettingsForm} from '../forms/ContactsForm/ContactsSettingsForm';\nimport {ProfileSettingsForm} from '../forms/ProfileUpdateForm/ProfileSettingsForm';\n\nconst Settings = memo((props: any) => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        navigate('/settings/profile')\n    }, [])\n    return (\n        <div className={styleModule.settingsWrapper}>\n            <div className={styleModule.title}>\n                Account Setting\n            </div>\n            <div className={styleModule.links}>\n                <NavLink to={'/settings/profile'}\n\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Profile\n                </NavLink>\n                <NavLink to={'/settings/contacts'}\n                         className={l => l.isActive ? styleModule.activeLink : ''}>\n                    Contacts\n                </NavLink>\n            </div>\n            <Routes>\n                <Route path={'profile'} element={<ProfileSettingsForm/>}/>\n                <Route path={'contacts'} element={<ContactsSettingsForm/>}/>\n            </Routes>\n        </div>\n    );\n})\nexport default Settings;\n"],"sourceRoot":""}